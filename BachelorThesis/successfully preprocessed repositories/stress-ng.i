# 0 "stress-ng.c"
# 0 "<built-in>"
# 0 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 0 "<command-line>" 2
# 1 "stress-ng.c"
# 25 "stress-ng.c"
# 1 "stress-ng.h" 1
# 50 "stress-ng.h"
# 1 "/usr/include/ctype.h" 1 3 4
# 25 "/usr/include/ctype.h" 3 4
# 1 "/usr/include/features.h" 1 3 4
# 392 "/usr/include/features.h" 3 4
# 1 "/usr/include/features-time64.h" 1 3 4
# 20 "/usr/include/features-time64.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/wordsize.h" 1 3 4
# 21 "/usr/include/features-time64.h" 2 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/timesize.h" 1 3 4
# 22 "/usr/include/features-time64.h" 2 3 4
# 393 "/usr/include/features.h" 2 3 4
# 486 "/usr/include/features.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/sys/cdefs.h" 1 3 4
# 559 "/usr/include/aarch64-linux-gnu/sys/cdefs.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/wordsize.h" 1 3 4
# 560 "/usr/include/aarch64-linux-gnu/sys/cdefs.h" 2 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/long-double.h" 1 3 4
# 561 "/usr/include/aarch64-linux-gnu/sys/cdefs.h" 2 3 4
# 487 "/usr/include/features.h" 2 3 4
# 510 "/usr/include/features.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/gnu/stubs.h" 1 3 4




# 1 "/usr/include/aarch64-linux-gnu/bits/wordsize.h" 1 3 4
# 6 "/usr/include/aarch64-linux-gnu/gnu/stubs.h" 2 3 4


# 1 "/usr/include/aarch64-linux-gnu/gnu/stubs-lp64.h" 1 3 4
# 9 "/usr/include/aarch64-linux-gnu/gnu/stubs.h" 2 3 4
# 511 "/usr/include/features.h" 2 3 4
# 26 "/usr/include/ctype.h" 2 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/types.h" 1 3 4
# 27 "/usr/include/aarch64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/wordsize.h" 1 3 4
# 28 "/usr/include/aarch64-linux-gnu/bits/types.h" 2 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/timesize.h" 1 3 4
# 29 "/usr/include/aarch64-linux-gnu/bits/types.h" 2 3 4



# 31 "/usr/include/aarch64-linux-gnu/bits/types.h" 3 4
typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;

typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;






typedef __int8_t __int_least8_t;
typedef __uint8_t __uint_least8_t;
typedef __int16_t __int_least16_t;
typedef __uint16_t __uint_least16_t;
typedef __int32_t __int_least32_t;
typedef __uint32_t __uint_least32_t;
typedef __int64_t __int_least64_t;
typedef __uint64_t __uint_least64_t;



typedef long int __quad_t;
typedef unsigned long int __u_quad_t;







typedef long int __intmax_t;
typedef unsigned long int __uintmax_t;
# 141 "/usr/include/aarch64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/typesizes.h" 1 3 4
# 142 "/usr/include/aarch64-linux-gnu/bits/types.h" 2 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/time64.h" 1 3 4
# 143 "/usr/include/aarch64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned long int __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef unsigned long int __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned int __nlink_t;
typedef long int __off_t;
typedef long int __off64_t;
typedef int __pid_t;
typedef struct { int __val[2]; } __fsid_t;
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef unsigned long int __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;
typedef long int __suseconds64_t;

typedef int __daddr_t;
typedef int __key_t;


typedef int __clockid_t;


typedef void * __timer_t;


typedef int __blksize_t;




typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;


typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;


typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;


typedef long int __fsword_t;

typedef long int __ssize_t;


typedef long int __syscall_slong_t;

typedef unsigned long int __syscall_ulong_t;



typedef __off64_t __loff_t;
typedef char *__caddr_t;


typedef long int __intptr_t;


typedef unsigned int __socklen_t;




typedef int __sig_atomic_t;
# 27 "/usr/include/ctype.h" 2 3 4


# 39 "/usr/include/ctype.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/endian.h" 1 3 4
# 35 "/usr/include/aarch64-linux-gnu/bits/endian.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/endianness.h" 1 3 4
# 36 "/usr/include/aarch64-linux-gnu/bits/endian.h" 2 3 4
# 40 "/usr/include/ctype.h" 2 3 4






enum
{
  _ISupper = ((0) < 8 ? ((1 << (0)) << 8) : ((1 << (0)) >> 8)),
  _ISlower = ((1) < 8 ? ((1 << (1)) << 8) : ((1 << (1)) >> 8)),
  _ISalpha = ((2) < 8 ? ((1 << (2)) << 8) : ((1 << (2)) >> 8)),
  _ISdigit = ((3) < 8 ? ((1 << (3)) << 8) : ((1 << (3)) >> 8)),
  _ISxdigit = ((4) < 8 ? ((1 << (4)) << 8) : ((1 << (4)) >> 8)),
  _ISspace = ((5) < 8 ? ((1 << (5)) << 8) : ((1 << (5)) >> 8)),
  _ISprint = ((6) < 8 ? ((1 << (6)) << 8) : ((1 << (6)) >> 8)),
  _ISgraph = ((7) < 8 ? ((1 << (7)) << 8) : ((1 << (7)) >> 8)),
  _ISblank = ((8) < 8 ? ((1 << (8)) << 8) : ((1 << (8)) >> 8)),
  _IScntrl = ((9) < 8 ? ((1 << (9)) << 8) : ((1 << (9)) >> 8)),
  _ISpunct = ((10) < 8 ? ((1 << (10)) << 8) : ((1 << (10)) >> 8)),
  _ISalnum = ((11) < 8 ? ((1 << (11)) << 8) : ((1 << (11)) >> 8))
};
# 79 "/usr/include/ctype.h" 3 4
extern const unsigned short int **__ctype_b_loc (void)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
extern const __int32_t **__ctype_tolower_loc (void)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
extern const __int32_t **__ctype_toupper_loc (void)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
# 108 "/usr/include/ctype.h" 3 4
extern int isalnum (int) __attribute__ ((__nothrow__ , __leaf__));
extern int isalpha (int) __attribute__ ((__nothrow__ , __leaf__));
extern int iscntrl (int) __attribute__ ((__nothrow__ , __leaf__));
extern int isdigit (int) __attribute__ ((__nothrow__ , __leaf__));
extern int islower (int) __attribute__ ((__nothrow__ , __leaf__));
extern int isgraph (int) __attribute__ ((__nothrow__ , __leaf__));
extern int isprint (int) __attribute__ ((__nothrow__ , __leaf__));
extern int ispunct (int) __attribute__ ((__nothrow__ , __leaf__));
extern int isspace (int) __attribute__ ((__nothrow__ , __leaf__));
extern int isupper (int) __attribute__ ((__nothrow__ , __leaf__));
extern int isxdigit (int) __attribute__ ((__nothrow__ , __leaf__));



extern int tolower (int __c) __attribute__ ((__nothrow__ , __leaf__));


extern int toupper (int __c) __attribute__ ((__nothrow__ , __leaf__));




extern int isblank (int) __attribute__ ((__nothrow__ , __leaf__));




extern int isctype (int __c, int __mask) __attribute__ ((__nothrow__ , __leaf__));






extern int isascii (int __c) __attribute__ ((__nothrow__ , __leaf__));



extern int toascii (int __c) __attribute__ ((__nothrow__ , __leaf__));



extern int _toupper (int) __attribute__ ((__nothrow__ , __leaf__));
extern int _tolower (int) __attribute__ ((__nothrow__ , __leaf__));
# 206 "/usr/include/ctype.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__nothrow__ , __leaf__)) tolower (int __c)
{
  return __c >= -128 && __c < 256 ? (*__ctype_tolower_loc ())[__c] : __c;
}

extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__nothrow__ , __leaf__)) toupper (int __c)
{
  return __c >= -128 && __c < 256 ? (*__ctype_toupper_loc ())[__c] : __c;
}
# 237 "/usr/include/ctype.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/types/locale_t.h" 1 3 4
# 22 "/usr/include/aarch64-linux-gnu/bits/types/locale_t.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/types/__locale_t.h" 1 3 4
# 27 "/usr/include/aarch64-linux-gnu/bits/types/__locale_t.h" 3 4
struct __locale_struct
{

  struct __locale_data *__locales[13];


  const unsigned short int *__ctype_b;
  const int *__ctype_tolower;
  const int *__ctype_toupper;


  const char *__names[13];
};

typedef struct __locale_struct *__locale_t;
# 23 "/usr/include/aarch64-linux-gnu/bits/types/locale_t.h" 2 3 4

typedef __locale_t locale_t;
# 238 "/usr/include/ctype.h" 2 3 4
# 251 "/usr/include/ctype.h" 3 4
extern int isalnum_l (int, locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int isalpha_l (int, locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int iscntrl_l (int, locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int isdigit_l (int, locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int islower_l (int, locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int isgraph_l (int, locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int isprint_l (int, locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int ispunct_l (int, locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int isspace_l (int, locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int isupper_l (int, locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int isxdigit_l (int, locale_t) __attribute__ ((__nothrow__ , __leaf__));

extern int isblank_l (int, locale_t) __attribute__ ((__nothrow__ , __leaf__));



extern int __tolower_l (int __c, locale_t __l) __attribute__ ((__nothrow__ , __leaf__));
extern int tolower_l (int __c, locale_t __l) __attribute__ ((__nothrow__ , __leaf__));


extern int __toupper_l (int __c, locale_t __l) __attribute__ ((__nothrow__ , __leaf__));
extern int toupper_l (int __c, locale_t __l) __attribute__ ((__nothrow__ , __leaf__));
# 327 "/usr/include/ctype.h" 3 4

# 51 "stress-ng.h" 2
# 1 "/usr/include/dirent.h" 1 3 4
# 27 "/usr/include/dirent.h" 3 4

# 36 "/usr/include/dirent.h" 3 4
typedef __ino64_t ino_t;




typedef __ino64_t ino64_t;
# 61 "/usr/include/dirent.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/dirent.h" 1 3 4
# 22 "/usr/include/aarch64-linux-gnu/bits/dirent.h" 3 4
struct dirent
  {




    __ino64_t d_ino;
    __off64_t d_off;

    unsigned short int d_reclen;
    unsigned char d_type;
    char d_name[256];
  };


struct dirent64
  {
    __ino64_t d_ino;
    __off64_t d_off;
    unsigned short int d_reclen;
    unsigned char d_type;
    char d_name[256];
  };
# 62 "/usr/include/dirent.h" 2 3 4
# 97 "/usr/include/dirent.h" 3 4
enum
  {
    DT_UNKNOWN = 0,

    DT_FIFO = 1,

    DT_CHR = 2,

    DT_DIR = 4,

    DT_BLK = 6,

    DT_REG = 8,

    DT_LNK = 10,

    DT_SOCK = 12,

    DT_WHT = 14

  };
# 127 "/usr/include/dirent.h" 3 4
typedef struct __dirstream DIR;






extern DIR *opendir (const char *__name) __attribute__ ((__nonnull__ (1)));






extern DIR *fdopendir (int __fd);







extern int closedir (DIR *__dirp) __attribute__ ((__nonnull__ (1)));
# 165 "/usr/include/dirent.h" 3 4
extern struct dirent *readdir (DIR *__dirp) __asm__ ("" "readdir64")
     __attribute__ ((__nonnull__ (1)));






extern struct dirent64 *readdir64 (DIR *__dirp) __attribute__ ((__nonnull__ (1)));
# 189 "/usr/include/dirent.h" 3 4
extern int readdir_r (DIR *__restrict __dirp, struct dirent *__restrict __entry, struct dirent **__restrict __result) __asm__ ("" "readdir64_r")




  __attribute__ ((__nonnull__ (1, 2, 3))) __attribute__ ((__deprecated__));






extern int readdir64_r (DIR *__restrict __dirp,
   struct dirent64 *__restrict __entry,
   struct dirent64 **__restrict __result)
  __attribute__ ((__nonnull__ (1, 2, 3))) __attribute__ ((__deprecated__));




extern void rewinddir (DIR *__dirp) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern void seekdir (DIR *__dirp, long int __pos) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern long int telldir (DIR *__dirp) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int dirfd (DIR *__dirp) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 233 "/usr/include/dirent.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/posix1_lim.h" 1 3 4
# 27 "/usr/include/aarch64-linux-gnu/bits/posix1_lim.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/wordsize.h" 1 3 4
# 28 "/usr/include/aarch64-linux-gnu/bits/posix1_lim.h" 2 3 4
# 161 "/usr/include/aarch64-linux-gnu/bits/posix1_lim.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/local_lim.h" 1 3 4
# 38 "/usr/include/aarch64-linux-gnu/bits/local_lim.h" 3 4
# 1 "/usr/include/linux/limits.h" 1 3 4
# 39 "/usr/include/aarch64-linux-gnu/bits/local_lim.h" 2 3 4
# 81 "/usr/include/aarch64-linux-gnu/bits/local_lim.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/pthread_stack_min-dynamic.h" 1 3 4
# 23 "/usr/include/aarch64-linux-gnu/bits/pthread_stack_min-dynamic.h" 3 4

extern long int __sysconf (int __name) __attribute__ ((__nothrow__ , __leaf__));

# 82 "/usr/include/aarch64-linux-gnu/bits/local_lim.h" 2 3 4
# 162 "/usr/include/aarch64-linux-gnu/bits/posix1_lim.h" 2 3 4
# 234 "/usr/include/dirent.h" 2 3 4
# 245 "/usr/include/dirent.h" 3 4
# 1 "/usr/lib/gcc/aarch64-linux-gnu/11/include/stddef.h" 1 3 4
# 209 "/usr/lib/gcc/aarch64-linux-gnu/11/include/stddef.h" 3 4
typedef long unsigned int size_t;
# 246 "/usr/include/dirent.h" 2 3 4
# 263 "/usr/include/dirent.h" 3 4
extern int scandir (const char *__restrict __dir, struct dirent ***__restrict __namelist, int (*__selector) (const struct dirent *), int (*__cmp) (const struct dirent **, const struct dirent **)) __asm__ ("" "scandir64")





                    __attribute__ ((__nonnull__ (1, 2)));
# 278 "/usr/include/dirent.h" 3 4
extern int scandir64 (const char *__restrict __dir,
        struct dirent64 ***__restrict __namelist,
        int (*__selector) (const struct dirent64 *),
        int (*__cmp) (const struct dirent64 **,
        const struct dirent64 **))
     __attribute__ ((__nonnull__ (1, 2)));
# 301 "/usr/include/dirent.h" 3 4
extern int scandirat (int __dfd, const char *__restrict __dir, struct dirent ***__restrict __namelist, int (*__selector) (const struct dirent *), int (*__cmp) (const struct dirent **, const struct dirent **)) __asm__ ("" "scandirat64")





                      __attribute__ ((__nonnull__ (2, 3)));







extern int scandirat64 (int __dfd, const char *__restrict __dir,
   struct dirent64 ***__restrict __namelist,
   int (*__selector) (const struct dirent64 *),
   int (*__cmp) (const struct dirent64 **,
          const struct dirent64 **))
     __attribute__ ((__nonnull__ (2, 3)));
# 330 "/usr/include/dirent.h" 3 4
extern int alphasort (const struct dirent **__e1, const struct dirent **__e2) __asm__ ("" "alphasort64") __attribute__ ((__nothrow__ , __leaf__))


                   __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));






extern int alphasort64 (const struct dirent64 **__e1,
   const struct dirent64 **__e2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 359 "/usr/include/dirent.h" 3 4
extern __ssize_t getdirentries (int __fd, char *__restrict __buf, size_t __nbytes, __off64_t *__restrict __basep) __asm__ ("" "getdirentries64") __attribute__ ((__nothrow__ , __leaf__))



                      __attribute__ ((__nonnull__ (2, 4)));






extern __ssize_t getdirentries64 (int __fd, char *__restrict __buf,
      size_t __nbytes,
      __off64_t *__restrict __basep)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4)));
# 385 "/usr/include/dirent.h" 3 4
extern int versionsort (const struct dirent **__e1, const struct dirent **__e2) __asm__ ("" "versionsort64") __attribute__ ((__nothrow__ , __leaf__))



     __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));






extern int versionsort64 (const struct dirent64 **__e1,
     const struct dirent64 **__e2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));





# 1 "/usr/include/aarch64-linux-gnu/bits/dirent_ext.h" 1 3 4
# 23 "/usr/include/aarch64-linux-gnu/bits/dirent_ext.h" 3 4






extern __ssize_t getdents64 (int __fd, void *__buffer, size_t __length)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



# 405 "/usr/include/dirent.h" 2 3 4
# 52 "stress-ng.h" 2
# 1 "/usr/include/errno.h" 1 3 4
# 28 "/usr/include/errno.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/errno.h" 1 3 4
# 26 "/usr/include/aarch64-linux-gnu/bits/errno.h" 3 4
# 1 "/usr/include/linux/errno.h" 1 3 4
# 1 "/usr/include/aarch64-linux-gnu/asm/errno.h" 1 3 4
# 1 "/usr/include/asm-generic/errno.h" 1 3 4




# 1 "/usr/include/asm-generic/errno-base.h" 1 3 4
# 6 "/usr/include/asm-generic/errno.h" 2 3 4
# 2 "/usr/include/aarch64-linux-gnu/asm/errno.h" 2 3 4
# 2 "/usr/include/linux/errno.h" 2 3 4
# 27 "/usr/include/aarch64-linux-gnu/bits/errno.h" 2 3 4
# 29 "/usr/include/errno.h" 2 3 4








extern int *__errno_location (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));







extern char *program_invocation_name;
extern char *program_invocation_short_name;

# 1 "/usr/include/aarch64-linux-gnu/bits/types/error_t.h" 1 3 4
# 22 "/usr/include/aarch64-linux-gnu/bits/types/error_t.h" 3 4
typedef int error_t;
# 49 "/usr/include/errno.h" 2 3 4




# 53 "stress-ng.h" 2
# 1 "/usr/include/fcntl.h" 1 3 4
# 28 "/usr/include/fcntl.h" 3 4







# 1 "/usr/include/aarch64-linux-gnu/bits/fcntl.h" 1 3 4
# 40 "/usr/include/aarch64-linux-gnu/bits/fcntl.h" 3 4
struct flock
  {
    short int l_type;
    short int l_whence;
    __off_t l_start;
    __off_t l_len;
    __pid_t l_pid;
  };


struct flock64
  {
    short int l_type;
    short int l_whence;
    __off64_t l_start;
    __off64_t l_len;
    __pid_t l_pid;
  };



# 1 "/usr/include/aarch64-linux-gnu/bits/fcntl-linux.h" 1 3 4
# 38 "/usr/include/aarch64-linux-gnu/bits/fcntl-linux.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/types/struct_iovec.h" 1 3 4
# 23 "/usr/include/aarch64-linux-gnu/bits/types/struct_iovec.h" 3 4
# 1 "/usr/lib/gcc/aarch64-linux-gnu/11/include/stddef.h" 1 3 4
# 24 "/usr/include/aarch64-linux-gnu/bits/types/struct_iovec.h" 2 3 4


struct iovec
  {
    void *iov_base;
    size_t iov_len;
  };
# 39 "/usr/include/aarch64-linux-gnu/bits/fcntl-linux.h" 2 3 4
# 265 "/usr/include/aarch64-linux-gnu/bits/fcntl-linux.h" 3 4
enum __pid_type
  {
    F_OWNER_TID = 0,
    F_OWNER_PID,
    F_OWNER_PGRP,
    F_OWNER_GID = F_OWNER_PGRP
  };


struct f_owner_ex
  {
    enum __pid_type type;
    __pid_t pid;
  };
# 354 "/usr/include/aarch64-linux-gnu/bits/fcntl-linux.h" 3 4
# 1 "/usr/include/linux/falloc.h" 1 3 4
# 355 "/usr/include/aarch64-linux-gnu/bits/fcntl-linux.h" 2 3 4



struct file_handle
{
  unsigned int handle_bytes;
  int handle_type;

  unsigned char f_handle[0];
};
# 393 "/usr/include/aarch64-linux-gnu/bits/fcntl-linux.h" 3 4





extern __ssize_t readahead (int __fd, __off64_t __offset, size_t __count)
    __attribute__ ((__nothrow__ , __leaf__));






extern int sync_file_range (int __fd, __off64_t __offset, __off64_t __count,
       unsigned int __flags);






extern __ssize_t vmsplice (int __fdout, const struct iovec *__iov,
      size_t __count, unsigned int __flags);





extern __ssize_t splice (int __fdin, __off64_t *__offin, int __fdout,
    __off64_t *__offout, size_t __len,
    unsigned int __flags);





extern __ssize_t tee (int __fdin, int __fdout, size_t __len,
        unsigned int __flags);
# 440 "/usr/include/aarch64-linux-gnu/bits/fcntl-linux.h" 3 4
extern int fallocate (int __fd, int __mode, __off64_t __offset, __off64_t __len) __asm__ ("" "fallocate64")

                     ;





extern int fallocate64 (int __fd, int __mode, __off64_t __offset,
   __off64_t __len);




extern int name_to_handle_at (int __dfd, const char *__name,
         struct file_handle *__handle, int *__mnt_id,
         int __flags) __attribute__ ((__nothrow__ , __leaf__));





extern int open_by_handle_at (int __mountdirfd, struct file_handle *__handle,
         int __flags);




# 62 "/usr/include/aarch64-linux-gnu/bits/fcntl.h" 2 3 4
# 36 "/usr/include/fcntl.h" 2 3 4
# 50 "/usr/include/fcntl.h" 3 4
typedef __mode_t mode_t;







typedef __off64_t off_t;





typedef __off64_t off64_t;




typedef __pid_t pid_t;





# 1 "/usr/include/aarch64-linux-gnu/bits/types/struct_timespec.h" 1 3 4






# 1 "/usr/include/aarch64-linux-gnu/bits/types/time_t.h" 1 3 4
# 10 "/usr/include/aarch64-linux-gnu/bits/types/time_t.h" 3 4
typedef __time_t time_t;
# 8 "/usr/include/aarch64-linux-gnu/bits/types/struct_timespec.h" 2 3 4



struct timespec
{



  __time_t tv_sec;




  __syscall_slong_t tv_nsec;
# 31 "/usr/include/aarch64-linux-gnu/bits/types/struct_timespec.h" 3 4
};
# 76 "/usr/include/fcntl.h" 2 3 4


# 1 "/usr/include/aarch64-linux-gnu/bits/stat.h" 1 3 4
# 25 "/usr/include/aarch64-linux-gnu/bits/stat.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/struct_stat.h" 1 3 4
# 27 "/usr/include/aarch64-linux-gnu/bits/struct_stat.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/wordsize.h" 1 3 4
# 28 "/usr/include/aarch64-linux-gnu/bits/struct_stat.h" 2 3 4
# 44 "/usr/include/aarch64-linux-gnu/bits/struct_stat.h" 3 4
struct stat
  {
    __dev_t st_dev;
    __ino64_t st_ino;
    __mode_t st_mode;
    __nlink_t st_nlink;
    __uid_t st_uid;
    __gid_t st_gid;
    __dev_t st_rdev;
    __dev_t __pad1;
    __off64_t st_size;
    __blksize_t st_blksize;
    int __pad2;
    __blkcnt64_t st_blocks;







    struct timespec st_atim;
    struct timespec st_mtim;
    struct timespec st_ctim;
# 79 "/usr/include/aarch64-linux-gnu/bits/struct_stat.h" 3 4
    int __glibc_reserved[2];
  };




struct stat64
  {
    __dev_t st_dev;
    __ino64_t st_ino;
    __mode_t st_mode;
    __nlink_t st_nlink;
    __uid_t st_uid;
    __gid_t st_gid;
    __dev_t st_rdev;
    __dev_t __pad1;
    __off64_t st_size;
    __blksize_t st_blksize;
    int __pad2;
    __blkcnt64_t st_blocks;







    struct timespec st_atim;
    struct timespec st_mtim;
    struct timespec st_ctim;
# 117 "/usr/include/aarch64-linux-gnu/bits/struct_stat.h" 3 4
    int __glibc_reserved[2];
  };
# 26 "/usr/include/aarch64-linux-gnu/bits/stat.h" 2 3 4
# 79 "/usr/include/fcntl.h" 2 3 4
# 152 "/usr/include/fcntl.h" 3 4
extern int fcntl (int __fd, int __cmd, ...) __asm__ ("" "fcntl64");





extern int fcntl64 (int __fd, int __cmd, ...);
# 184 "/usr/include/fcntl.h" 3 4
extern int open (const char *__file, int __oflag, ...) __asm__ ("" "open64")
     __attribute__ ((__nonnull__ (1)));





extern int open64 (const char *__file, int __oflag, ...) __attribute__ ((__nonnull__ (1)));
# 209 "/usr/include/fcntl.h" 3 4
extern int openat (int __fd, const char *__file, int __oflag, ...) __asm__ ("" "openat64")
                    __attribute__ ((__nonnull__ (2)));





extern int openat64 (int __fd, const char *__file, int __oflag, ...)
     __attribute__ ((__nonnull__ (2)));
# 230 "/usr/include/fcntl.h" 3 4
extern int creat (const char *__file, mode_t __mode) __asm__ ("" "creat64")
                  __attribute__ ((__nonnull__ (1)));





extern int creat64 (const char *__file, mode_t __mode) __attribute__ ((__nonnull__ (1)));
# 259 "/usr/include/fcntl.h" 3 4
extern int lockf (int __fd, int __cmd, __off64_t __len) __asm__ ("" "lockf64");





extern int lockf64 (int __fd, int __cmd, off64_t __len);
# 277 "/usr/include/fcntl.h" 3 4
extern int posix_fadvise (int __fd, __off64_t __offset, __off64_t __len, int __advise) __asm__ ("" "posix_fadvise64") __attribute__ ((__nothrow__ , __leaf__))

                      ;





extern int posix_fadvise64 (int __fd, off64_t __offset, off64_t __len,
       int __advise) __attribute__ ((__nothrow__ , __leaf__));
# 298 "/usr/include/fcntl.h" 3 4
extern int posix_fallocate (int __fd, __off64_t __offset, __off64_t __len) __asm__ ("" "posix_fallocate64")

                           ;





extern int posix_fallocate64 (int __fd, off64_t __offset, off64_t __len);







# 1 "/usr/include/aarch64-linux-gnu/bits/fcntl2.h" 1 3 4
# 30 "/usr/include/aarch64-linux-gnu/bits/fcntl2.h" 3 4
extern int __open_2 (const char *__path, int __oflag) __asm__ ("" "__open64_2")
                     __attribute__ ((__nonnull__ (1)));
extern int __open_alias (const char *__path, int __oflag, ...) __asm__ ("" "open64")
                 __attribute__ ((__nonnull__ (1)));

extern void __open_too_many_args (void) __attribute__((__error__ ("open can be called either with 2 or 3 arguments, not more")))
                                                                  ;
extern void __open_missing_mode (void) __attribute__((__error__ ("open with O_CREAT or O_TMPFILE in second argument needs 3 arguments")))
                                                                            ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
open (const char *__path, int __oflag, ...)
{
  if (__builtin_va_arg_pack_len () > 1)
    __open_too_many_args ();

  if (__builtin_constant_p (__oflag))
    {
      if ((((__oflag) & 0100) != 0 || ((__oflag) & (020000000 | 040000)) == (020000000 | 040000)) && __builtin_va_arg_pack_len () < 1)
 {
   __open_missing_mode ();
   return __open_2 (__path, __oflag);
 }
      return __open_alias (__path, __oflag, __builtin_va_arg_pack ());
    }

  if (__builtin_va_arg_pack_len () < 1)
    return __open_2 (__path, __oflag);

  return __open_alias (__path, __oflag, __builtin_va_arg_pack ());
}



extern int __open64_2 (const char *__path, int __oflag) __attribute__ ((__nonnull__ (1)));
extern int __open64_alias (const char *__path, int __oflag, ...) __asm__ ("" "open64")
                   __attribute__ ((__nonnull__ (1)));
extern void __open64_too_many_args (void) __attribute__((__error__ ("open64 can be called either with 2 or 3 arguments, not more")))
                                                                    ;
extern void __open64_missing_mode (void) __attribute__((__error__ ("open64 with O_CREAT or O_TMPFILE in second argument needs 3 arguments")))
                                                                              ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
open64 (const char *__path, int __oflag, ...)
{
  if (__builtin_va_arg_pack_len () > 1)
    __open64_too_many_args ();

  if (__builtin_constant_p (__oflag))
    {
      if ((((__oflag) & 0100) != 0 || ((__oflag) & (020000000 | 040000)) == (020000000 | 040000)) && __builtin_va_arg_pack_len () < 1)
 {
   __open64_missing_mode ();
   return __open64_2 (__path, __oflag);
 }
      return __open64_alias (__path, __oflag, __builtin_va_arg_pack ());
    }

  if (__builtin_va_arg_pack_len () < 1)
    return __open64_2 (__path, __oflag);

  return __open64_alias (__path, __oflag, __builtin_va_arg_pack ());
}
# 104 "/usr/include/aarch64-linux-gnu/bits/fcntl2.h" 3 4
extern int __openat_2 (int __fd, const char *__path, int __oflag) __asm__ ("" "__openat64_2")

     __attribute__ ((__nonnull__ (2)));
extern int __openat_alias (int __fd, const char *__path, int __oflag, ...) __asm__ ("" "openat64")

     __attribute__ ((__nonnull__ (2)));

extern void __openat_too_many_args (void) __attribute__((__error__ ("openat can be called either with 3 or 4 arguments, not more")))
                                                                    ;
extern void __openat_missing_mode (void) __attribute__((__error__ ("openat with O_CREAT or O_TMPFILE in third argument needs 4 arguments")))
                                                                             ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
openat (int __fd, const char *__path, int __oflag, ...)
{
  if (__builtin_va_arg_pack_len () > 1)
    __openat_too_many_args ();

  if (__builtin_constant_p (__oflag))
    {
      if ((((__oflag) & 0100) != 0 || ((__oflag) & (020000000 | 040000)) == (020000000 | 040000)) && __builtin_va_arg_pack_len () < 1)
 {
   __openat_missing_mode ();
   return __openat_2 (__fd, __path, __oflag);
 }
      return __openat_alias (__fd, __path, __oflag, __builtin_va_arg_pack ());
    }

  if (__builtin_va_arg_pack_len () < 1)
    return __openat_2 (__fd, __path, __oflag);

  return __openat_alias (__fd, __path, __oflag, __builtin_va_arg_pack ());
}



extern int __openat64_2 (int __fd, const char *__path, int __oflag)
     __attribute__ ((__nonnull__ (2)));
extern int __openat64_alias (int __fd, const char *__path, int __oflag, ...) __asm__ ("" "openat64")

     __attribute__ ((__nonnull__ (2)));
extern void __openat64_too_many_args (void) __attribute__((__error__ ("openat64 can be called either with 3 or 4 arguments, not more")))
                                                                      ;
extern void __openat64_missing_mode (void) __attribute__((__error__ ("openat64 with O_CREAT or O_TMPFILE in third argument needs 4 arguments")))
                                                                               ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
openat64 (int __fd, const char *__path, int __oflag, ...)
{
  if (__builtin_va_arg_pack_len () > 1)
    __openat64_too_many_args ();

  if (__builtin_constant_p (__oflag))
    {
      if ((((__oflag) & 0100) != 0 || ((__oflag) & (020000000 | 040000)) == (020000000 | 040000)) && __builtin_va_arg_pack_len () < 1)
 {
   __openat64_missing_mode ();
   return __openat64_2 (__fd, __path, __oflag);
 }
      return __openat64_alias (__fd, __path, __oflag, __builtin_va_arg_pack ());
    }

  if (__builtin_va_arg_pack_len () < 1)
    return __openat64_2 (__fd, __path, __oflag);

  return __openat64_alias (__fd, __path, __oflag, __builtin_va_arg_pack ());
}
# 315 "/usr/include/fcntl.h" 2 3 4



# 54 "stress-ng.h" 2
# 1 "/usr/include/getopt.h" 1 3 4
# 35 "/usr/include/getopt.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/getopt_core.h" 1 3 4
# 28 "/usr/include/aarch64-linux-gnu/bits/getopt_core.h" 3 4








extern char *optarg;
# 50 "/usr/include/aarch64-linux-gnu/bits/getopt_core.h" 3 4
extern int optind;




extern int opterr;



extern int optopt;
# 91 "/usr/include/aarch64-linux-gnu/bits/getopt_core.h" 3 4
extern int getopt (int ___argc, char *const *___argv, const char *__shortopts)
       __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));


# 36 "/usr/include/getopt.h" 2 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/getopt_ext.h" 1 3 4
# 27 "/usr/include/aarch64-linux-gnu/bits/getopt_ext.h" 3 4

# 50 "/usr/include/aarch64-linux-gnu/bits/getopt_ext.h" 3 4
struct option
{
  const char *name;


  int has_arg;
  int *flag;
  int val;
};







extern int getopt_long (int ___argc, char *const *___argv,
   const char *__shortopts,
          const struct option *__longopts, int *__longind)
       __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));
extern int getopt_long_only (int ___argc, char *const *___argv,
        const char *__shortopts,
               const struct option *__longopts, int *__longind)
       __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));


# 37 "/usr/include/getopt.h" 2 3 4
# 55 "stress-ng.h" 2
# 1 "/usr/include/inttypes.h" 1 3 4
# 27 "/usr/include/inttypes.h" 3 4
# 1 "/usr/lib/gcc/aarch64-linux-gnu/11/include/stdint.h" 1 3 4
# 9 "/usr/lib/gcc/aarch64-linux-gnu/11/include/stdint.h" 3 4
# 1 "/usr/include/stdint.h" 1 3 4
# 26 "/usr/include/stdint.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/stdint.h" 2 3 4

# 1 "/usr/include/aarch64-linux-gnu/bits/wchar.h" 1 3 4
# 29 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/wordsize.h" 1 3 4
# 30 "/usr/include/stdint.h" 2 3 4




# 1 "/usr/include/aarch64-linux-gnu/bits/stdint-intn.h" 1 3 4
# 24 "/usr/include/aarch64-linux-gnu/bits/stdint-intn.h" 3 4
typedef __int8_t int8_t;
typedef __int16_t int16_t;
typedef __int32_t int32_t;
typedef __int64_t int64_t;
# 35 "/usr/include/stdint.h" 2 3 4


# 1 "/usr/include/aarch64-linux-gnu/bits/stdint-uintn.h" 1 3 4
# 24 "/usr/include/aarch64-linux-gnu/bits/stdint-uintn.h" 3 4
typedef __uint8_t uint8_t;
typedef __uint16_t uint16_t;
typedef __uint32_t uint32_t;
typedef __uint64_t uint64_t;
# 38 "/usr/include/stdint.h" 2 3 4





typedef __int_least8_t int_least8_t;
typedef __int_least16_t int_least16_t;
typedef __int_least32_t int_least32_t;
typedef __int_least64_t int_least64_t;


typedef __uint_least8_t uint_least8_t;
typedef __uint_least16_t uint_least16_t;
typedef __uint_least32_t uint_least32_t;
typedef __uint_least64_t uint_least64_t;





typedef signed char int_fast8_t;

typedef long int int_fast16_t;
typedef long int int_fast32_t;
typedef long int int_fast64_t;
# 71 "/usr/include/stdint.h" 3 4
typedef unsigned char uint_fast8_t;

typedef unsigned long int uint_fast16_t;
typedef unsigned long int uint_fast32_t;
typedef unsigned long int uint_fast64_t;
# 87 "/usr/include/stdint.h" 3 4
typedef long int intptr_t;


typedef unsigned long int uintptr_t;
# 101 "/usr/include/stdint.h" 3 4
typedef __intmax_t intmax_t;
typedef __uintmax_t uintmax_t;
# 10 "/usr/lib/gcc/aarch64-linux-gnu/11/include/stdint.h" 2 3 4
# 28 "/usr/include/inttypes.h" 2 3 4






typedef unsigned int __gwchar_t;
# 266 "/usr/include/inttypes.h" 3 4





typedef struct
  {
    long int quot;
    long int rem;
  } imaxdiv_t;
# 290 "/usr/include/inttypes.h" 3 4
extern intmax_t imaxabs (intmax_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern imaxdiv_t imaxdiv (intmax_t __numer, intmax_t __denom)
      __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern intmax_t strtoimax (const char *__restrict __nptr,
      char **__restrict __endptr, int __base) __attribute__ ((__nothrow__ , __leaf__));


extern uintmax_t strtoumax (const char *__restrict __nptr,
       char ** __restrict __endptr, int __base) __attribute__ ((__nothrow__ , __leaf__));


extern intmax_t wcstoimax (const __gwchar_t *__restrict __nptr,
      __gwchar_t **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__));


extern uintmax_t wcstoumax (const __gwchar_t *__restrict __nptr,
       __gwchar_t ** __restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__));


# 56 "stress-ng.h" 2
# 1 "/usr/lib/gcc/aarch64-linux-gnu/11/include/limits.h" 1 3 4
# 34 "/usr/lib/gcc/aarch64-linux-gnu/11/include/limits.h" 3 4
# 1 "/usr/lib/gcc/aarch64-linux-gnu/11/include/syslimits.h" 1 3 4






# 1 "/usr/lib/gcc/aarch64-linux-gnu/11/include/limits.h" 1 3 4
# 203 "/usr/lib/gcc/aarch64-linux-gnu/11/include/limits.h" 3 4
# 1 "/usr/include/limits.h" 1 3 4
# 26 "/usr/include/limits.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/limits.h" 2 3 4
# 199 "/usr/include/limits.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/posix2_lim.h" 1 3 4
# 200 "/usr/include/limits.h" 2 3 4



# 1 "/usr/include/aarch64-linux-gnu/bits/xopen_lim.h" 1 3 4
# 64 "/usr/include/aarch64-linux-gnu/bits/xopen_lim.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/uio_lim.h" 1 3 4
# 65 "/usr/include/aarch64-linux-gnu/bits/xopen_lim.h" 2 3 4
# 204 "/usr/include/limits.h" 2 3 4
# 204 "/usr/lib/gcc/aarch64-linux-gnu/11/include/limits.h" 2 3 4
# 8 "/usr/lib/gcc/aarch64-linux-gnu/11/include/syslimits.h" 2 3 4
# 35 "/usr/lib/gcc/aarch64-linux-gnu/11/include/limits.h" 2 3 4
# 57 "stress-ng.h" 2
# 1 "/usr/include/math.h" 1 3 4
# 27 "/usr/include/math.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 28 "/usr/include/math.h" 2 3 4












# 1 "/usr/include/aarch64-linux-gnu/bits/math-vector.h" 1 3 4
# 27 "/usr/include/aarch64-linux-gnu/bits/math-vector.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/libm-simd-decl-stubs.h" 1 3 4
# 28 "/usr/include/aarch64-linux-gnu/bits/math-vector.h" 2 3 4
# 41 "/usr/include/math.h" 2 3 4


# 1 "/usr/include/aarch64-linux-gnu/bits/floatn.h" 1 3 4
# 23 "/usr/include/aarch64-linux-gnu/bits/floatn.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/long-double.h" 1 3 4
# 24 "/usr/include/aarch64-linux-gnu/bits/floatn.h" 2 3 4
# 95 "/usr/include/aarch64-linux-gnu/bits/floatn.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/floatn-common.h" 1 3 4
# 24 "/usr/include/aarch64-linux-gnu/bits/floatn-common.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/long-double.h" 1 3 4
# 25 "/usr/include/aarch64-linux-gnu/bits/floatn-common.h" 2 3 4
# 96 "/usr/include/aarch64-linux-gnu/bits/floatn.h" 2 3 4
# 44 "/usr/include/math.h" 2 3 4
# 152 "/usr/include/math.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/flt-eval-method.h" 1 3 4
# 153 "/usr/include/math.h" 2 3 4
# 163 "/usr/include/math.h" 3 4
typedef float float_t;
typedef double double_t;
# 204 "/usr/include/math.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/fp-logb.h" 1 3 4
# 205 "/usr/include/math.h" 2 3 4
# 247 "/usr/include/math.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/fp-fast.h" 1 3 4
# 248 "/usr/include/math.h" 2 3 4



enum
  {
    FP_INT_UPWARD =

      0,
    FP_INT_DOWNWARD =

      1,
    FP_INT_TOWARDZERO =

      2,
    FP_INT_TONEARESTFROMZERO =

      3,
    FP_INT_TONEAREST =

      4,
  };
# 312 "/usr/include/math.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/mathcalls-helper-functions.h" 1 3 4
# 20 "/usr/include/aarch64-linux-gnu/bits/mathcalls-helper-functions.h" 3 4
extern int __fpclassify (double __value) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));


extern int __signbit (double __value) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));



extern int __isinf (double __value) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__const__));


extern int __finite (double __value) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__const__));


extern int __isnan (double __value) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__const__));


extern int __iseqsig (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__));


extern int __issignaling (double __value) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));
# 313 "/usr/include/math.h" 2 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/aarch64-linux-gnu/bits/mathcalls.h" 3 4
 extern double acos (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __acos (double __x) __attribute__ ((__nothrow__ , __leaf__));

 extern double asin (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __asin (double __x) __attribute__ ((__nothrow__ , __leaf__));

 extern double atan (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __atan (double __x) __attribute__ ((__nothrow__ , __leaf__));

 extern double atan2 (double __y, double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __atan2 (double __y, double __x) __attribute__ ((__nothrow__ , __leaf__));


 extern double cos (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __cos (double __x) __attribute__ ((__nothrow__ , __leaf__));

 extern double sin (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __sin (double __x) __attribute__ ((__nothrow__ , __leaf__));

 extern double tan (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __tan (double __x) __attribute__ ((__nothrow__ , __leaf__));




 extern double cosh (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __cosh (double __x) __attribute__ ((__nothrow__ , __leaf__));

 extern double sinh (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __sinh (double __x) __attribute__ ((__nothrow__ , __leaf__));

 extern double tanh (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __tanh (double __x) __attribute__ ((__nothrow__ , __leaf__));



 extern void sincos (double __x, double *__sinx, double *__cosx) __attribute__ ((__nothrow__ , __leaf__)); extern void __sincos (double __x, double *__sinx, double *__cosx) __attribute__ ((__nothrow__ , __leaf__))
                                                        ;




 extern double acosh (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __acosh (double __x) __attribute__ ((__nothrow__ , __leaf__));

 extern double asinh (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __asinh (double __x) __attribute__ ((__nothrow__ , __leaf__));

 extern double atanh (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __atanh (double __x) __attribute__ ((__nothrow__ , __leaf__));





 extern double exp (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __exp (double __x) __attribute__ ((__nothrow__ , __leaf__));


extern double frexp (double __x, int *__exponent) __attribute__ ((__nothrow__ , __leaf__)); extern double __frexp (double __x, int *__exponent) __attribute__ ((__nothrow__ , __leaf__));


extern double ldexp (double __x, int __exponent) __attribute__ ((__nothrow__ , __leaf__)); extern double __ldexp (double __x, int __exponent) __attribute__ ((__nothrow__ , __leaf__));


 extern double log (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __log (double __x) __attribute__ ((__nothrow__ , __leaf__));


 extern double log10 (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __log10 (double __x) __attribute__ ((__nothrow__ , __leaf__));


extern double modf (double __x, double *__iptr) __attribute__ ((__nothrow__ , __leaf__)); extern double __modf (double __x, double *__iptr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



 extern double exp10 (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __exp10 (double __x) __attribute__ ((__nothrow__ , __leaf__));




 extern double expm1 (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __expm1 (double __x) __attribute__ ((__nothrow__ , __leaf__));


 extern double log1p (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __log1p (double __x) __attribute__ ((__nothrow__ , __leaf__));


extern double logb (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __logb (double __x) __attribute__ ((__nothrow__ , __leaf__));




 extern double exp2 (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __exp2 (double __x) __attribute__ ((__nothrow__ , __leaf__));


 extern double log2 (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __log2 (double __x) __attribute__ ((__nothrow__ , __leaf__));






 extern double pow (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)); extern double __pow (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__));


extern double sqrt (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __sqrt (double __x) __attribute__ ((__nothrow__ , __leaf__));



 extern double hypot (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)); extern double __hypot (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__));




 extern double cbrt (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __cbrt (double __x) __attribute__ ((__nothrow__ , __leaf__));






extern double ceil (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __ceil (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern double fabs (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __fabs (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern double floor (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __floor (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern double fmod (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)); extern double __fmod (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__));
# 177 "/usr/include/aarch64-linux-gnu/bits/mathcalls.h" 3 4
extern int isinf (double __value) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__const__));




extern int finite (double __value) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__const__));


extern double drem (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)); extern double __drem (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__));



extern double significand (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __significand (double __x) __attribute__ ((__nothrow__ , __leaf__));






extern double copysign (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __copysign (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern double nan (const char *__tagb) __attribute__ ((__nothrow__ , __leaf__)); extern double __nan (const char *__tagb) __attribute__ ((__nothrow__ , __leaf__));
# 213 "/usr/include/aarch64-linux-gnu/bits/mathcalls.h" 3 4
extern int isnan (double __value) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__const__));





extern double j0 (double) __attribute__ ((__nothrow__ , __leaf__)); extern double __j0 (double) __attribute__ ((__nothrow__ , __leaf__));
extern double j1 (double) __attribute__ ((__nothrow__ , __leaf__)); extern double __j1 (double) __attribute__ ((__nothrow__ , __leaf__));
extern double jn (int, double) __attribute__ ((__nothrow__ , __leaf__)); extern double __jn (int, double) __attribute__ ((__nothrow__ , __leaf__));
extern double y0 (double) __attribute__ ((__nothrow__ , __leaf__)); extern double __y0 (double) __attribute__ ((__nothrow__ , __leaf__));
extern double y1 (double) __attribute__ ((__nothrow__ , __leaf__)); extern double __y1 (double) __attribute__ ((__nothrow__ , __leaf__));
extern double yn (int, double) __attribute__ ((__nothrow__ , __leaf__)); extern double __yn (int, double) __attribute__ ((__nothrow__ , __leaf__));





 extern double erf (double) __attribute__ ((__nothrow__ , __leaf__)); extern double __erf (double) __attribute__ ((__nothrow__ , __leaf__));
 extern double erfc (double) __attribute__ ((__nothrow__ , __leaf__)); extern double __erfc (double) __attribute__ ((__nothrow__ , __leaf__));
extern double lgamma (double) __attribute__ ((__nothrow__ , __leaf__)); extern double __lgamma (double) __attribute__ ((__nothrow__ , __leaf__));




extern double tgamma (double) __attribute__ ((__nothrow__ , __leaf__)); extern double __tgamma (double) __attribute__ ((__nothrow__ , __leaf__));





extern double gamma (double) __attribute__ ((__nothrow__ , __leaf__)); extern double __gamma (double) __attribute__ ((__nothrow__ , __leaf__));







extern double lgamma_r (double, int *__signgamp) __attribute__ ((__nothrow__ , __leaf__)); extern double __lgamma_r (double, int *__signgamp) __attribute__ ((__nothrow__ , __leaf__));






extern double rint (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __rint (double __x) __attribute__ ((__nothrow__ , __leaf__));


extern double nextafter (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)); extern double __nextafter (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__));

extern double nexttoward (double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)); extern double __nexttoward (double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));




extern double nextdown (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __nextdown (double __x) __attribute__ ((__nothrow__ , __leaf__));

extern double nextup (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __nextup (double __x) __attribute__ ((__nothrow__ , __leaf__));



extern double remainder (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)); extern double __remainder (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__));



extern double scalbn (double __x, int __n) __attribute__ ((__nothrow__ , __leaf__)); extern double __scalbn (double __x, int __n) __attribute__ ((__nothrow__ , __leaf__));



extern int ilogb (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern int __ilogb (double __x) __attribute__ ((__nothrow__ , __leaf__));




extern long int llogb (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __llogb (double __x) __attribute__ ((__nothrow__ , __leaf__));




extern double scalbln (double __x, long int __n) __attribute__ ((__nothrow__ , __leaf__)); extern double __scalbln (double __x, long int __n) __attribute__ ((__nothrow__ , __leaf__));



extern double nearbyint (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __nearbyint (double __x) __attribute__ ((__nothrow__ , __leaf__));



extern double round (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __round (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern double trunc (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __trunc (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern double remquo (double __x, double __y, int *__quo) __attribute__ ((__nothrow__ , __leaf__)); extern double __remquo (double __x, double __y, int *__quo) __attribute__ ((__nothrow__ , __leaf__));






extern long int lrint (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __lrint (double __x) __attribute__ ((__nothrow__ , __leaf__));
__extension__
extern long long int llrint (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long long int __llrint (double __x) __attribute__ ((__nothrow__ , __leaf__));



extern long int lround (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __lround (double __x) __attribute__ ((__nothrow__ , __leaf__));
__extension__
extern long long int llround (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long long int __llround (double __x) __attribute__ ((__nothrow__ , __leaf__));



extern double fdim (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)); extern double __fdim (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__));



extern double fmax (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __fmax (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern double fmin (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __fmin (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern double fma (double __x, double __y, double __z) __attribute__ ((__nothrow__ , __leaf__)); extern double __fma (double __x, double __y, double __z) __attribute__ ((__nothrow__ , __leaf__));




extern double roundeven (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __roundeven (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern __intmax_t fromfp (double __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__)); extern __intmax_t __fromfp (double __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__))
                            ;



extern __uintmax_t ufromfp (double __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__)); extern __uintmax_t __ufromfp (double __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__))
                              ;




extern __intmax_t fromfpx (double __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__)); extern __intmax_t __fromfpx (double __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__))
                             ;




extern __uintmax_t ufromfpx (double __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__)); extern __uintmax_t __ufromfpx (double __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__))
                               ;


extern int canonicalize (double *__cx, const double *__x) __attribute__ ((__nothrow__ , __leaf__));






extern double fmaxmag (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __fmaxmag (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern double fminmag (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __fminmag (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern double fmaximum (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __fmaximum (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern double fminimum (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __fminimum (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern double fmaximum_num (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __fmaximum_num (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern double fminimum_num (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __fminimum_num (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern double fmaximum_mag (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __fmaximum_mag (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern double fminimum_mag (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __fminimum_mag (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern double fmaximum_mag_num (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __fmaximum_mag_num (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern double fminimum_mag_num (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __fminimum_mag_num (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern int totalorder (const double *__x, const double *__y) __attribute__ ((__nothrow__ , __leaf__))

     __attribute__ ((__pure__));


extern int totalordermag (const double *__x, const double *__y) __attribute__ ((__nothrow__ , __leaf__))

     __attribute__ ((__pure__));


extern double getpayload (const double *__x) __attribute__ ((__nothrow__ , __leaf__)); extern double __getpayload (const double *__x) __attribute__ ((__nothrow__ , __leaf__));


extern int setpayload (double *__x, double __payload) __attribute__ ((__nothrow__ , __leaf__));


extern int setpayloadsig (double *__x, double __payload) __attribute__ ((__nothrow__ , __leaf__));







extern double scalb (double __x, double __n) __attribute__ ((__nothrow__ , __leaf__)); extern double __scalb (double __x, double __n) __attribute__ ((__nothrow__ , __leaf__));
# 314 "/usr/include/math.h" 2 3 4
# 329 "/usr/include/math.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/mathcalls-helper-functions.h" 1 3 4
# 20 "/usr/include/aarch64-linux-gnu/bits/mathcalls-helper-functions.h" 3 4
extern int __fpclassifyf (float __value) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));


extern int __signbitf (float __value) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));



extern int __isinff (float __value) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__const__));


extern int __finitef (float __value) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__const__));


extern int __isnanf (float __value) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__const__));


extern int __iseqsigf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__));


extern int __issignalingf (float __value) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));
# 330 "/usr/include/math.h" 2 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/aarch64-linux-gnu/bits/mathcalls.h" 3 4
 extern float acosf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __acosf (float __x) __attribute__ ((__nothrow__ , __leaf__));

 extern float asinf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __asinf (float __x) __attribute__ ((__nothrow__ , __leaf__));

 extern float atanf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __atanf (float __x) __attribute__ ((__nothrow__ , __leaf__));

 extern float atan2f (float __y, float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __atan2f (float __y, float __x) __attribute__ ((__nothrow__ , __leaf__));


 extern float cosf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __cosf (float __x) __attribute__ ((__nothrow__ , __leaf__));

 extern float sinf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __sinf (float __x) __attribute__ ((__nothrow__ , __leaf__));

 extern float tanf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __tanf (float __x) __attribute__ ((__nothrow__ , __leaf__));




 extern float coshf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __coshf (float __x) __attribute__ ((__nothrow__ , __leaf__));

 extern float sinhf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __sinhf (float __x) __attribute__ ((__nothrow__ , __leaf__));

 extern float tanhf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __tanhf (float __x) __attribute__ ((__nothrow__ , __leaf__));



 extern void sincosf (float __x, float *__sinx, float *__cosx) __attribute__ ((__nothrow__ , __leaf__)); extern void __sincosf (float __x, float *__sinx, float *__cosx) __attribute__ ((__nothrow__ , __leaf__))
                                                        ;




 extern float acoshf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __acoshf (float __x) __attribute__ ((__nothrow__ , __leaf__));

 extern float asinhf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __asinhf (float __x) __attribute__ ((__nothrow__ , __leaf__));

 extern float atanhf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __atanhf (float __x) __attribute__ ((__nothrow__ , __leaf__));





 extern float expf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __expf (float __x) __attribute__ ((__nothrow__ , __leaf__));


extern float frexpf (float __x, int *__exponent) __attribute__ ((__nothrow__ , __leaf__)); extern float __frexpf (float __x, int *__exponent) __attribute__ ((__nothrow__ , __leaf__));


extern float ldexpf (float __x, int __exponent) __attribute__ ((__nothrow__ , __leaf__)); extern float __ldexpf (float __x, int __exponent) __attribute__ ((__nothrow__ , __leaf__));


 extern float logf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __logf (float __x) __attribute__ ((__nothrow__ , __leaf__));


 extern float log10f (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __log10f (float __x) __attribute__ ((__nothrow__ , __leaf__));


extern float modff (float __x, float *__iptr) __attribute__ ((__nothrow__ , __leaf__)); extern float __modff (float __x, float *__iptr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



 extern float exp10f (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __exp10f (float __x) __attribute__ ((__nothrow__ , __leaf__));




 extern float expm1f (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __expm1f (float __x) __attribute__ ((__nothrow__ , __leaf__));


 extern float log1pf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __log1pf (float __x) __attribute__ ((__nothrow__ , __leaf__));


extern float logbf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __logbf (float __x) __attribute__ ((__nothrow__ , __leaf__));




 extern float exp2f (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __exp2f (float __x) __attribute__ ((__nothrow__ , __leaf__));


 extern float log2f (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __log2f (float __x) __attribute__ ((__nothrow__ , __leaf__));






 extern float powf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)); extern float __powf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__));


extern float sqrtf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __sqrtf (float __x) __attribute__ ((__nothrow__ , __leaf__));



 extern float hypotf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)); extern float __hypotf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__));




 extern float cbrtf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __cbrtf (float __x) __attribute__ ((__nothrow__ , __leaf__));






extern float ceilf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __ceilf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern float fabsf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __fabsf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern float floorf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __floorf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern float fmodf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)); extern float __fmodf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__));
# 177 "/usr/include/aarch64-linux-gnu/bits/mathcalls.h" 3 4
extern int isinff (float __value) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__const__));




extern int finitef (float __value) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__const__));


extern float dremf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)); extern float __dremf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__));



extern float significandf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __significandf (float __x) __attribute__ ((__nothrow__ , __leaf__));






extern float copysignf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __copysignf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern float nanf (const char *__tagb) __attribute__ ((__nothrow__ , __leaf__)); extern float __nanf (const char *__tagb) __attribute__ ((__nothrow__ , __leaf__));
# 213 "/usr/include/aarch64-linux-gnu/bits/mathcalls.h" 3 4
extern int isnanf (float __value) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__const__));





extern float j0f (float) __attribute__ ((__nothrow__ , __leaf__)); extern float __j0f (float) __attribute__ ((__nothrow__ , __leaf__));
extern float j1f (float) __attribute__ ((__nothrow__ , __leaf__)); extern float __j1f (float) __attribute__ ((__nothrow__ , __leaf__));
extern float jnf (int, float) __attribute__ ((__nothrow__ , __leaf__)); extern float __jnf (int, float) __attribute__ ((__nothrow__ , __leaf__));
extern float y0f (float) __attribute__ ((__nothrow__ , __leaf__)); extern float __y0f (float) __attribute__ ((__nothrow__ , __leaf__));
extern float y1f (float) __attribute__ ((__nothrow__ , __leaf__)); extern float __y1f (float) __attribute__ ((__nothrow__ , __leaf__));
extern float ynf (int, float) __attribute__ ((__nothrow__ , __leaf__)); extern float __ynf (int, float) __attribute__ ((__nothrow__ , __leaf__));





 extern float erff (float) __attribute__ ((__nothrow__ , __leaf__)); extern float __erff (float) __attribute__ ((__nothrow__ , __leaf__));
 extern float erfcf (float) __attribute__ ((__nothrow__ , __leaf__)); extern float __erfcf (float) __attribute__ ((__nothrow__ , __leaf__));
extern float lgammaf (float) __attribute__ ((__nothrow__ , __leaf__)); extern float __lgammaf (float) __attribute__ ((__nothrow__ , __leaf__));




extern float tgammaf (float) __attribute__ ((__nothrow__ , __leaf__)); extern float __tgammaf (float) __attribute__ ((__nothrow__ , __leaf__));





extern float gammaf (float) __attribute__ ((__nothrow__ , __leaf__)); extern float __gammaf (float) __attribute__ ((__nothrow__ , __leaf__));







extern float lgammaf_r (float, int *__signgamp) __attribute__ ((__nothrow__ , __leaf__)); extern float __lgammaf_r (float, int *__signgamp) __attribute__ ((__nothrow__ , __leaf__));






extern float rintf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __rintf (float __x) __attribute__ ((__nothrow__ , __leaf__));


extern float nextafterf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)); extern float __nextafterf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__));

extern float nexttowardf (float __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)); extern float __nexttowardf (float __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));




extern float nextdownf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __nextdownf (float __x) __attribute__ ((__nothrow__ , __leaf__));

extern float nextupf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __nextupf (float __x) __attribute__ ((__nothrow__ , __leaf__));



extern float remainderf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)); extern float __remainderf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__));



extern float scalbnf (float __x, int __n) __attribute__ ((__nothrow__ , __leaf__)); extern float __scalbnf (float __x, int __n) __attribute__ ((__nothrow__ , __leaf__));



extern int ilogbf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern int __ilogbf (float __x) __attribute__ ((__nothrow__ , __leaf__));




extern long int llogbf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __llogbf (float __x) __attribute__ ((__nothrow__ , __leaf__));




extern float scalblnf (float __x, long int __n) __attribute__ ((__nothrow__ , __leaf__)); extern float __scalblnf (float __x, long int __n) __attribute__ ((__nothrow__ , __leaf__));



extern float nearbyintf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __nearbyintf (float __x) __attribute__ ((__nothrow__ , __leaf__));



extern float roundf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __roundf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern float truncf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __truncf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern float remquof (float __x, float __y, int *__quo) __attribute__ ((__nothrow__ , __leaf__)); extern float __remquof (float __x, float __y, int *__quo) __attribute__ ((__nothrow__ , __leaf__));






extern long int lrintf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __lrintf (float __x) __attribute__ ((__nothrow__ , __leaf__));
__extension__
extern long long int llrintf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern long long int __llrintf (float __x) __attribute__ ((__nothrow__ , __leaf__));



extern long int lroundf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __lroundf (float __x) __attribute__ ((__nothrow__ , __leaf__));
__extension__
extern long long int llroundf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern long long int __llroundf (float __x) __attribute__ ((__nothrow__ , __leaf__));



extern float fdimf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)); extern float __fdimf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__));



extern float fmaxf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __fmaxf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern float fminf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __fminf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern float fmaf (float __x, float __y, float __z) __attribute__ ((__nothrow__ , __leaf__)); extern float __fmaf (float __x, float __y, float __z) __attribute__ ((__nothrow__ , __leaf__));




extern float roundevenf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __roundevenf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern __intmax_t fromfpf (float __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__)); extern __intmax_t __fromfpf (float __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__))
                            ;



extern __uintmax_t ufromfpf (float __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__)); extern __uintmax_t __ufromfpf (float __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__))
                              ;




extern __intmax_t fromfpxf (float __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__)); extern __intmax_t __fromfpxf (float __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__))
                             ;




extern __uintmax_t ufromfpxf (float __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__)); extern __uintmax_t __ufromfpxf (float __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__))
                               ;


extern int canonicalizef (float *__cx, const float *__x) __attribute__ ((__nothrow__ , __leaf__));






extern float fmaxmagf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __fmaxmagf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern float fminmagf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __fminmagf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern float fmaximumf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __fmaximumf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern float fminimumf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __fminimumf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern float fmaximum_numf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __fmaximum_numf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern float fminimum_numf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __fminimum_numf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern float fmaximum_magf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __fmaximum_magf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern float fminimum_magf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __fminimum_magf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern float fmaximum_mag_numf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __fmaximum_mag_numf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern float fminimum_mag_numf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __fminimum_mag_numf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern int totalorderf (const float *__x, const float *__y) __attribute__ ((__nothrow__ , __leaf__))

     __attribute__ ((__pure__));


extern int totalordermagf (const float *__x, const float *__y) __attribute__ ((__nothrow__ , __leaf__))

     __attribute__ ((__pure__));


extern float getpayloadf (const float *__x) __attribute__ ((__nothrow__ , __leaf__)); extern float __getpayloadf (const float *__x) __attribute__ ((__nothrow__ , __leaf__));


extern int setpayloadf (float *__x, float __payload) __attribute__ ((__nothrow__ , __leaf__));


extern int setpayloadsigf (float *__x, float __payload) __attribute__ ((__nothrow__ , __leaf__));







extern float scalbf (float __x, float __n) __attribute__ ((__nothrow__ , __leaf__)); extern float __scalbf (float __x, float __n) __attribute__ ((__nothrow__ , __leaf__));
# 331 "/usr/include/math.h" 2 3 4
# 398 "/usr/include/math.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/mathcalls-helper-functions.h" 1 3 4
# 20 "/usr/include/aarch64-linux-gnu/bits/mathcalls-helper-functions.h" 3 4
extern int __fpclassifyl (long double __value) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));


extern int __signbitl (long double __value) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));



extern int __isinfl (long double __value) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__const__));


extern int __finitel (long double __value) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__const__));


extern int __isnanl (long double __value) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__const__));


extern int __iseqsigl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));


extern int __issignalingl (long double __value) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));
# 399 "/usr/include/math.h" 2 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/aarch64-linux-gnu/bits/mathcalls.h" 3 4
 extern long double acosl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __acosl (long double __x) __attribute__ ((__nothrow__ , __leaf__));

 extern long double asinl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __asinl (long double __x) __attribute__ ((__nothrow__ , __leaf__));

 extern long double atanl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __atanl (long double __x) __attribute__ ((__nothrow__ , __leaf__));

 extern long double atan2l (long double __y, long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __atan2l (long double __y, long double __x) __attribute__ ((__nothrow__ , __leaf__));


 extern long double cosl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __cosl (long double __x) __attribute__ ((__nothrow__ , __leaf__));

 extern long double sinl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __sinl (long double __x) __attribute__ ((__nothrow__ , __leaf__));

 extern long double tanl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __tanl (long double __x) __attribute__ ((__nothrow__ , __leaf__));




 extern long double coshl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __coshl (long double __x) __attribute__ ((__nothrow__ , __leaf__));

 extern long double sinhl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __sinhl (long double __x) __attribute__ ((__nothrow__ , __leaf__));

 extern long double tanhl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __tanhl (long double __x) __attribute__ ((__nothrow__ , __leaf__));



 extern void sincosl (long double __x, long double *__sinx, long double *__cosx) __attribute__ ((__nothrow__ , __leaf__)); extern void __sincosl (long double __x, long double *__sinx, long double *__cosx) __attribute__ ((__nothrow__ , __leaf__))
                                                        ;




 extern long double acoshl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __acoshl (long double __x) __attribute__ ((__nothrow__ , __leaf__));

 extern long double asinhl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __asinhl (long double __x) __attribute__ ((__nothrow__ , __leaf__));

 extern long double atanhl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __atanhl (long double __x) __attribute__ ((__nothrow__ , __leaf__));





 extern long double expl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __expl (long double __x) __attribute__ ((__nothrow__ , __leaf__));


extern long double frexpl (long double __x, int *__exponent) __attribute__ ((__nothrow__ , __leaf__)); extern long double __frexpl (long double __x, int *__exponent) __attribute__ ((__nothrow__ , __leaf__));


extern long double ldexpl (long double __x, int __exponent) __attribute__ ((__nothrow__ , __leaf__)); extern long double __ldexpl (long double __x, int __exponent) __attribute__ ((__nothrow__ , __leaf__));


 extern long double logl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __logl (long double __x) __attribute__ ((__nothrow__ , __leaf__));


 extern long double log10l (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __log10l (long double __x) __attribute__ ((__nothrow__ , __leaf__));


extern long double modfl (long double __x, long double *__iptr) __attribute__ ((__nothrow__ , __leaf__)); extern long double __modfl (long double __x, long double *__iptr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



 extern long double exp10l (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __exp10l (long double __x) __attribute__ ((__nothrow__ , __leaf__));




 extern long double expm1l (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __expm1l (long double __x) __attribute__ ((__nothrow__ , __leaf__));


 extern long double log1pl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __log1pl (long double __x) __attribute__ ((__nothrow__ , __leaf__));


extern long double logbl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __logbl (long double __x) __attribute__ ((__nothrow__ , __leaf__));




 extern long double exp2l (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __exp2l (long double __x) __attribute__ ((__nothrow__ , __leaf__));


 extern long double log2l (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __log2l (long double __x) __attribute__ ((__nothrow__ , __leaf__));






 extern long double powl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)); extern long double __powl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));


extern long double sqrtl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __sqrtl (long double __x) __attribute__ ((__nothrow__ , __leaf__));



 extern long double hypotl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)); extern long double __hypotl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));




 extern long double cbrtl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __cbrtl (long double __x) __attribute__ ((__nothrow__ , __leaf__));






extern long double ceill (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __ceill (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern long double fabsl (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __fabsl (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern long double floorl (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __floorl (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern long double fmodl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)); extern long double __fmodl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));
# 177 "/usr/include/aarch64-linux-gnu/bits/mathcalls.h" 3 4
extern int isinfl (long double __value) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__const__));




extern int finitel (long double __value) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__const__));


extern long double dreml (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)); extern long double __dreml (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));



extern long double significandl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __significandl (long double __x) __attribute__ ((__nothrow__ , __leaf__));






extern long double copysignl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __copysignl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern long double nanl (const char *__tagb) __attribute__ ((__nothrow__ , __leaf__)); extern long double __nanl (const char *__tagb) __attribute__ ((__nothrow__ , __leaf__));
# 213 "/usr/include/aarch64-linux-gnu/bits/mathcalls.h" 3 4
extern int isnanl (long double __value) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__const__));





extern long double j0l (long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __j0l (long double) __attribute__ ((__nothrow__ , __leaf__));
extern long double j1l (long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __j1l (long double) __attribute__ ((__nothrow__ , __leaf__));
extern long double jnl (int, long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __jnl (int, long double) __attribute__ ((__nothrow__ , __leaf__));
extern long double y0l (long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __y0l (long double) __attribute__ ((__nothrow__ , __leaf__));
extern long double y1l (long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __y1l (long double) __attribute__ ((__nothrow__ , __leaf__));
extern long double ynl (int, long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __ynl (int, long double) __attribute__ ((__nothrow__ , __leaf__));





 extern long double erfl (long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __erfl (long double) __attribute__ ((__nothrow__ , __leaf__));
 extern long double erfcl (long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __erfcl (long double) __attribute__ ((__nothrow__ , __leaf__));
extern long double lgammal (long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __lgammal (long double) __attribute__ ((__nothrow__ , __leaf__));




extern long double tgammal (long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __tgammal (long double) __attribute__ ((__nothrow__ , __leaf__));





extern long double gammal (long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __gammal (long double) __attribute__ ((__nothrow__ , __leaf__));







extern long double lgammal_r (long double, int *__signgamp) __attribute__ ((__nothrow__ , __leaf__)); extern long double __lgammal_r (long double, int *__signgamp) __attribute__ ((__nothrow__ , __leaf__));






extern long double rintl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __rintl (long double __x) __attribute__ ((__nothrow__ , __leaf__));


extern long double nextafterl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)); extern long double __nextafterl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));

extern long double nexttowardl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)); extern long double __nexttowardl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));




extern long double nextdownl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __nextdownl (long double __x) __attribute__ ((__nothrow__ , __leaf__));

extern long double nextupl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __nextupl (long double __x) __attribute__ ((__nothrow__ , __leaf__));



extern long double remainderl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)); extern long double __remainderl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));



extern long double scalbnl (long double __x, int __n) __attribute__ ((__nothrow__ , __leaf__)); extern long double __scalbnl (long double __x, int __n) __attribute__ ((__nothrow__ , __leaf__));



extern int ilogbl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern int __ilogbl (long double __x) __attribute__ ((__nothrow__ , __leaf__));




extern long int llogbl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __llogbl (long double __x) __attribute__ ((__nothrow__ , __leaf__));




extern long double scalblnl (long double __x, long int __n) __attribute__ ((__nothrow__ , __leaf__)); extern long double __scalblnl (long double __x, long int __n) __attribute__ ((__nothrow__ , __leaf__));



extern long double nearbyintl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __nearbyintl (long double __x) __attribute__ ((__nothrow__ , __leaf__));



extern long double roundl (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __roundl (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern long double truncl (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __truncl (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern long double remquol (long double __x, long double __y, int *__quo) __attribute__ ((__nothrow__ , __leaf__)); extern long double __remquol (long double __x, long double __y, int *__quo) __attribute__ ((__nothrow__ , __leaf__));






extern long int lrintl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __lrintl (long double __x) __attribute__ ((__nothrow__ , __leaf__));
__extension__
extern long long int llrintl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long long int __llrintl (long double __x) __attribute__ ((__nothrow__ , __leaf__));



extern long int lroundl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __lroundl (long double __x) __attribute__ ((__nothrow__ , __leaf__));
__extension__
extern long long int llroundl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long long int __llroundl (long double __x) __attribute__ ((__nothrow__ , __leaf__));



extern long double fdiml (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)); extern long double __fdiml (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));



extern long double fmaxl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __fmaxl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern long double fminl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __fminl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern long double fmal (long double __x, long double __y, long double __z) __attribute__ ((__nothrow__ , __leaf__)); extern long double __fmal (long double __x, long double __y, long double __z) __attribute__ ((__nothrow__ , __leaf__));




extern long double roundevenl (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __roundevenl (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern __intmax_t fromfpl (long double __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__)); extern __intmax_t __fromfpl (long double __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__))
                            ;



extern __uintmax_t ufromfpl (long double __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__)); extern __uintmax_t __ufromfpl (long double __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__))
                              ;




extern __intmax_t fromfpxl (long double __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__)); extern __intmax_t __fromfpxl (long double __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__))
                             ;




extern __uintmax_t ufromfpxl (long double __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__)); extern __uintmax_t __ufromfpxl (long double __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__))
                               ;


extern int canonicalizel (long double *__cx, const long double *__x) __attribute__ ((__nothrow__ , __leaf__));






extern long double fmaxmagl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __fmaxmagl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern long double fminmagl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __fminmagl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern long double fmaximuml (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __fmaximuml (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern long double fminimuml (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __fminimuml (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern long double fmaximum_numl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __fmaximum_numl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern long double fminimum_numl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __fminimum_numl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern long double fmaximum_magl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __fmaximum_magl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern long double fminimum_magl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __fminimum_magl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern long double fmaximum_mag_numl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __fmaximum_mag_numl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern long double fminimum_mag_numl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __fminimum_mag_numl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern int totalorderl (const long double *__x, const long double *__y) __attribute__ ((__nothrow__ , __leaf__))

     __attribute__ ((__pure__));


extern int totalordermagl (const long double *__x, const long double *__y) __attribute__ ((__nothrow__ , __leaf__))

     __attribute__ ((__pure__));


extern long double getpayloadl (const long double *__x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __getpayloadl (const long double *__x) __attribute__ ((__nothrow__ , __leaf__));


extern int setpayloadl (long double *__x, long double __payload) __attribute__ ((__nothrow__ , __leaf__));


extern int setpayloadsigl (long double *__x, long double __payload) __attribute__ ((__nothrow__ , __leaf__));







extern long double scalbl (long double __x, long double __n) __attribute__ ((__nothrow__ , __leaf__)); extern long double __scalbl (long double __x, long double __n) __attribute__ ((__nothrow__ , __leaf__));
# 400 "/usr/include/math.h" 2 3 4
# 450 "/usr/include/math.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/aarch64-linux-gnu/bits/mathcalls.h" 3 4
 extern _Float32 acosf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __acosf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));

 extern _Float32 asinf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __asinf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));

 extern _Float32 atanf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __atanf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));

 extern _Float32 atan2f32 (_Float32 __y, _Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __atan2f32 (_Float32 __y, _Float32 __x) __attribute__ ((__nothrow__ , __leaf__));


 extern _Float32 cosf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __cosf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));

 extern _Float32 sinf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __sinf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));

 extern _Float32 tanf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __tanf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));




 extern _Float32 coshf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __coshf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));

 extern _Float32 sinhf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __sinhf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));

 extern _Float32 tanhf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __tanhf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));



 extern void sincosf32 (_Float32 __x, _Float32 *__sinx, _Float32 *__cosx) __attribute__ ((__nothrow__ , __leaf__)); extern void __sincosf32 (_Float32 __x, _Float32 *__sinx, _Float32 *__cosx) __attribute__ ((__nothrow__ , __leaf__))
                                                        ;




 extern _Float32 acoshf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __acoshf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));

 extern _Float32 asinhf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __asinhf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));

 extern _Float32 atanhf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __atanhf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));





 extern _Float32 expf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __expf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float32 frexpf32 (_Float32 __x, int *__exponent) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __frexpf32 (_Float32 __x, int *__exponent) __attribute__ ((__nothrow__ , __leaf__));


extern _Float32 ldexpf32 (_Float32 __x, int __exponent) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __ldexpf32 (_Float32 __x, int __exponent) __attribute__ ((__nothrow__ , __leaf__));


 extern _Float32 logf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __logf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));


 extern _Float32 log10f32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __log10f32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float32 modff32 (_Float32 __x, _Float32 *__iptr) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __modff32 (_Float32 __x, _Float32 *__iptr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



 extern _Float32 exp10f32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __exp10f32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));




 extern _Float32 expm1f32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __expm1f32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));


 extern _Float32 log1pf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __log1pf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float32 logbf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __logbf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));




 extern _Float32 exp2f32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __exp2f32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));


 extern _Float32 log2f32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __log2f32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));






 extern _Float32 powf32 (_Float32 __x, _Float32 __y) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __powf32 (_Float32 __x, _Float32 __y) __attribute__ ((__nothrow__ , __leaf__));


extern _Float32 sqrtf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __sqrtf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));



 extern _Float32 hypotf32 (_Float32 __x, _Float32 __y) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __hypotf32 (_Float32 __x, _Float32 __y) __attribute__ ((__nothrow__ , __leaf__));




 extern _Float32 cbrtf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __cbrtf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));






extern _Float32 ceilf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float32 __ceilf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float32 fabsf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float32 __fabsf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float32 floorf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float32 __floorf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float32 fmodf32 (_Float32 __x, _Float32 __y) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __fmodf32 (_Float32 __x, _Float32 __y) __attribute__ ((__nothrow__ , __leaf__));
# 198 "/usr/include/aarch64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32 copysignf32 (_Float32 __x, _Float32 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float32 __copysignf32 (_Float32 __x, _Float32 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern _Float32 nanf32 (const char *__tagb) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __nanf32 (const char *__tagb) __attribute__ ((__nothrow__ , __leaf__));
# 220 "/usr/include/aarch64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32 j0f32 (_Float32) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __j0f32 (_Float32) __attribute__ ((__nothrow__ , __leaf__));
extern _Float32 j1f32 (_Float32) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __j1f32 (_Float32) __attribute__ ((__nothrow__ , __leaf__));
extern _Float32 jnf32 (int, _Float32) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __jnf32 (int, _Float32) __attribute__ ((__nothrow__ , __leaf__));
extern _Float32 y0f32 (_Float32) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __y0f32 (_Float32) __attribute__ ((__nothrow__ , __leaf__));
extern _Float32 y1f32 (_Float32) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __y1f32 (_Float32) __attribute__ ((__nothrow__ , __leaf__));
extern _Float32 ynf32 (int, _Float32) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __ynf32 (int, _Float32) __attribute__ ((__nothrow__ , __leaf__));





 extern _Float32 erff32 (_Float32) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __erff32 (_Float32) __attribute__ ((__nothrow__ , __leaf__));
 extern _Float32 erfcf32 (_Float32) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __erfcf32 (_Float32) __attribute__ ((__nothrow__ , __leaf__));
extern _Float32 lgammaf32 (_Float32) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __lgammaf32 (_Float32) __attribute__ ((__nothrow__ , __leaf__));




extern _Float32 tgammaf32 (_Float32) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __tgammaf32 (_Float32) __attribute__ ((__nothrow__ , __leaf__));
# 252 "/usr/include/aarch64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32 lgammaf32_r (_Float32, int *__signgamp) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __lgammaf32_r (_Float32, int *__signgamp) __attribute__ ((__nothrow__ , __leaf__));






extern _Float32 rintf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __rintf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float32 nextafterf32 (_Float32 __x, _Float32 __y) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __nextafterf32 (_Float32 __x, _Float32 __y) __attribute__ ((__nothrow__ , __leaf__));






extern _Float32 nextdownf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __nextdownf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));

extern _Float32 nextupf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __nextupf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));



extern _Float32 remainderf32 (_Float32 __x, _Float32 __y) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __remainderf32 (_Float32 __x, _Float32 __y) __attribute__ ((__nothrow__ , __leaf__));



extern _Float32 scalbnf32 (_Float32 __x, int __n) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __scalbnf32 (_Float32 __x, int __n) __attribute__ ((__nothrow__ , __leaf__));



extern int ilogbf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern int __ilogbf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));




extern long int llogbf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __llogbf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));




extern _Float32 scalblnf32 (_Float32 __x, long int __n) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __scalblnf32 (_Float32 __x, long int __n) __attribute__ ((__nothrow__ , __leaf__));



extern _Float32 nearbyintf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __nearbyintf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));



extern _Float32 roundf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float32 __roundf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern _Float32 truncf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float32 __truncf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern _Float32 remquof32 (_Float32 __x, _Float32 __y, int *__quo) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __remquof32 (_Float32 __x, _Float32 __y, int *__quo) __attribute__ ((__nothrow__ , __leaf__));






extern long int lrintf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __lrintf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));
__extension__
extern long long int llrintf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern long long int __llrintf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));



extern long int lroundf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __lroundf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));
__extension__
extern long long int llroundf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)); extern long long int __llroundf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__));



extern _Float32 fdimf32 (_Float32 __x, _Float32 __y) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __fdimf32 (_Float32 __x, _Float32 __y) __attribute__ ((__nothrow__ , __leaf__));



extern _Float32 fmaxf32 (_Float32 __x, _Float32 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float32 __fmaxf32 (_Float32 __x, _Float32 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float32 fminf32 (_Float32 __x, _Float32 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float32 __fminf32 (_Float32 __x, _Float32 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern _Float32 fmaf32 (_Float32 __x, _Float32 __y, _Float32 __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __fmaf32 (_Float32 __x, _Float32 __y, _Float32 __z) __attribute__ ((__nothrow__ , __leaf__));




extern _Float32 roundevenf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float32 __roundevenf32 (_Float32 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern __intmax_t fromfpf32 (_Float32 __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__)); extern __intmax_t __fromfpf32 (_Float32 __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__))
                            ;



extern __uintmax_t ufromfpf32 (_Float32 __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__)); extern __uintmax_t __ufromfpf32 (_Float32 __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__))
                              ;




extern __intmax_t fromfpxf32 (_Float32 __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__)); extern __intmax_t __fromfpxf32 (_Float32 __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__))
                             ;




extern __uintmax_t ufromfpxf32 (_Float32 __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__)); extern __uintmax_t __ufromfpxf32 (_Float32 __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__))
                               ;


extern int canonicalizef32 (_Float32 *__cx, const _Float32 *__x) __attribute__ ((__nothrow__ , __leaf__));






extern _Float32 fmaxmagf32 (_Float32 __x, _Float32 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float32 __fmaxmagf32 (_Float32 __x, _Float32 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float32 fminmagf32 (_Float32 __x, _Float32 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float32 __fminmagf32 (_Float32 __x, _Float32 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern _Float32 fmaximumf32 (_Float32 __x, _Float32 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float32 __fmaximumf32 (_Float32 __x, _Float32 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float32 fminimumf32 (_Float32 __x, _Float32 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float32 __fminimumf32 (_Float32 __x, _Float32 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float32 fmaximum_numf32 (_Float32 __x, _Float32 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float32 __fmaximum_numf32 (_Float32 __x, _Float32 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float32 fminimum_numf32 (_Float32 __x, _Float32 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float32 __fminimum_numf32 (_Float32 __x, _Float32 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float32 fmaximum_magf32 (_Float32 __x, _Float32 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float32 __fmaximum_magf32 (_Float32 __x, _Float32 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float32 fminimum_magf32 (_Float32 __x, _Float32 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float32 __fminimum_magf32 (_Float32 __x, _Float32 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float32 fmaximum_mag_numf32 (_Float32 __x, _Float32 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float32 __fmaximum_mag_numf32 (_Float32 __x, _Float32 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float32 fminimum_mag_numf32 (_Float32 __x, _Float32 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float32 __fminimum_mag_numf32 (_Float32 __x, _Float32 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern int totalorderf32 (const _Float32 *__x, const _Float32 *__y) __attribute__ ((__nothrow__ , __leaf__))

     __attribute__ ((__pure__));


extern int totalordermagf32 (const _Float32 *__x, const _Float32 *__y) __attribute__ ((__nothrow__ , __leaf__))

     __attribute__ ((__pure__));


extern _Float32 getpayloadf32 (const _Float32 *__x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __getpayloadf32 (const _Float32 *__x) __attribute__ ((__nothrow__ , __leaf__));


extern int setpayloadf32 (_Float32 *__x, _Float32 __payload) __attribute__ ((__nothrow__ , __leaf__));


extern int setpayloadsigf32 (_Float32 *__x, _Float32 __payload) __attribute__ ((__nothrow__ , __leaf__));
# 451 "/usr/include/math.h" 2 3 4
# 467 "/usr/include/math.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/aarch64-linux-gnu/bits/mathcalls.h" 3 4
 extern _Float64 acosf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __acosf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));

 extern _Float64 asinf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __asinf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));

 extern _Float64 atanf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __atanf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));

 extern _Float64 atan2f64 (_Float64 __y, _Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __atan2f64 (_Float64 __y, _Float64 __x) __attribute__ ((__nothrow__ , __leaf__));


 extern _Float64 cosf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __cosf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));

 extern _Float64 sinf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __sinf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));

 extern _Float64 tanf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __tanf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));




 extern _Float64 coshf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __coshf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));

 extern _Float64 sinhf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __sinhf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));

 extern _Float64 tanhf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __tanhf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));



 extern void sincosf64 (_Float64 __x, _Float64 *__sinx, _Float64 *__cosx) __attribute__ ((__nothrow__ , __leaf__)); extern void __sincosf64 (_Float64 __x, _Float64 *__sinx, _Float64 *__cosx) __attribute__ ((__nothrow__ , __leaf__))
                                                        ;




 extern _Float64 acoshf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __acoshf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));

 extern _Float64 asinhf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __asinhf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));

 extern _Float64 atanhf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __atanhf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));





 extern _Float64 expf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __expf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float64 frexpf64 (_Float64 __x, int *__exponent) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __frexpf64 (_Float64 __x, int *__exponent) __attribute__ ((__nothrow__ , __leaf__));


extern _Float64 ldexpf64 (_Float64 __x, int __exponent) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __ldexpf64 (_Float64 __x, int __exponent) __attribute__ ((__nothrow__ , __leaf__));


 extern _Float64 logf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __logf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));


 extern _Float64 log10f64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __log10f64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float64 modff64 (_Float64 __x, _Float64 *__iptr) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __modff64 (_Float64 __x, _Float64 *__iptr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



 extern _Float64 exp10f64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __exp10f64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));




 extern _Float64 expm1f64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __expm1f64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));


 extern _Float64 log1pf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __log1pf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float64 logbf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __logbf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));




 extern _Float64 exp2f64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __exp2f64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));


 extern _Float64 log2f64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __log2f64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));






 extern _Float64 powf64 (_Float64 __x, _Float64 __y) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __powf64 (_Float64 __x, _Float64 __y) __attribute__ ((__nothrow__ , __leaf__));


extern _Float64 sqrtf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __sqrtf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));



 extern _Float64 hypotf64 (_Float64 __x, _Float64 __y) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __hypotf64 (_Float64 __x, _Float64 __y) __attribute__ ((__nothrow__ , __leaf__));




 extern _Float64 cbrtf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __cbrtf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));






extern _Float64 ceilf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float64 __ceilf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float64 fabsf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float64 __fabsf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float64 floorf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float64 __floorf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float64 fmodf64 (_Float64 __x, _Float64 __y) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __fmodf64 (_Float64 __x, _Float64 __y) __attribute__ ((__nothrow__ , __leaf__));
# 198 "/usr/include/aarch64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64 copysignf64 (_Float64 __x, _Float64 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float64 __copysignf64 (_Float64 __x, _Float64 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern _Float64 nanf64 (const char *__tagb) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __nanf64 (const char *__tagb) __attribute__ ((__nothrow__ , __leaf__));
# 220 "/usr/include/aarch64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64 j0f64 (_Float64) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __j0f64 (_Float64) __attribute__ ((__nothrow__ , __leaf__));
extern _Float64 j1f64 (_Float64) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __j1f64 (_Float64) __attribute__ ((__nothrow__ , __leaf__));
extern _Float64 jnf64 (int, _Float64) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __jnf64 (int, _Float64) __attribute__ ((__nothrow__ , __leaf__));
extern _Float64 y0f64 (_Float64) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __y0f64 (_Float64) __attribute__ ((__nothrow__ , __leaf__));
extern _Float64 y1f64 (_Float64) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __y1f64 (_Float64) __attribute__ ((__nothrow__ , __leaf__));
extern _Float64 ynf64 (int, _Float64) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __ynf64 (int, _Float64) __attribute__ ((__nothrow__ , __leaf__));





 extern _Float64 erff64 (_Float64) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __erff64 (_Float64) __attribute__ ((__nothrow__ , __leaf__));
 extern _Float64 erfcf64 (_Float64) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __erfcf64 (_Float64) __attribute__ ((__nothrow__ , __leaf__));
extern _Float64 lgammaf64 (_Float64) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __lgammaf64 (_Float64) __attribute__ ((__nothrow__ , __leaf__));




extern _Float64 tgammaf64 (_Float64) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __tgammaf64 (_Float64) __attribute__ ((__nothrow__ , __leaf__));
# 252 "/usr/include/aarch64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64 lgammaf64_r (_Float64, int *__signgamp) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __lgammaf64_r (_Float64, int *__signgamp) __attribute__ ((__nothrow__ , __leaf__));






extern _Float64 rintf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __rintf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float64 nextafterf64 (_Float64 __x, _Float64 __y) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __nextafterf64 (_Float64 __x, _Float64 __y) __attribute__ ((__nothrow__ , __leaf__));






extern _Float64 nextdownf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __nextdownf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));

extern _Float64 nextupf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __nextupf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));



extern _Float64 remainderf64 (_Float64 __x, _Float64 __y) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __remainderf64 (_Float64 __x, _Float64 __y) __attribute__ ((__nothrow__ , __leaf__));



extern _Float64 scalbnf64 (_Float64 __x, int __n) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __scalbnf64 (_Float64 __x, int __n) __attribute__ ((__nothrow__ , __leaf__));



extern int ilogbf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern int __ilogbf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));




extern long int llogbf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __llogbf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));




extern _Float64 scalblnf64 (_Float64 __x, long int __n) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __scalblnf64 (_Float64 __x, long int __n) __attribute__ ((__nothrow__ , __leaf__));



extern _Float64 nearbyintf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __nearbyintf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));



extern _Float64 roundf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float64 __roundf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern _Float64 truncf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float64 __truncf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern _Float64 remquof64 (_Float64 __x, _Float64 __y, int *__quo) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __remquof64 (_Float64 __x, _Float64 __y, int *__quo) __attribute__ ((__nothrow__ , __leaf__));






extern long int lrintf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __lrintf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));
__extension__
extern long long int llrintf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern long long int __llrintf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));



extern long int lroundf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __lroundf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));
__extension__
extern long long int llroundf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)); extern long long int __llroundf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));



extern _Float64 fdimf64 (_Float64 __x, _Float64 __y) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __fdimf64 (_Float64 __x, _Float64 __y) __attribute__ ((__nothrow__ , __leaf__));



extern _Float64 fmaxf64 (_Float64 __x, _Float64 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float64 __fmaxf64 (_Float64 __x, _Float64 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float64 fminf64 (_Float64 __x, _Float64 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float64 __fminf64 (_Float64 __x, _Float64 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern _Float64 fmaf64 (_Float64 __x, _Float64 __y, _Float64 __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __fmaf64 (_Float64 __x, _Float64 __y, _Float64 __z) __attribute__ ((__nothrow__ , __leaf__));




extern _Float64 roundevenf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float64 __roundevenf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern __intmax_t fromfpf64 (_Float64 __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__)); extern __intmax_t __fromfpf64 (_Float64 __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__))
                            ;



extern __uintmax_t ufromfpf64 (_Float64 __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__)); extern __uintmax_t __ufromfpf64 (_Float64 __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__))
                              ;




extern __intmax_t fromfpxf64 (_Float64 __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__)); extern __intmax_t __fromfpxf64 (_Float64 __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__))
                             ;




extern __uintmax_t ufromfpxf64 (_Float64 __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__)); extern __uintmax_t __ufromfpxf64 (_Float64 __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__))
                               ;


extern int canonicalizef64 (_Float64 *__cx, const _Float64 *__x) __attribute__ ((__nothrow__ , __leaf__));






extern _Float64 fmaxmagf64 (_Float64 __x, _Float64 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float64 __fmaxmagf64 (_Float64 __x, _Float64 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float64 fminmagf64 (_Float64 __x, _Float64 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float64 __fminmagf64 (_Float64 __x, _Float64 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern _Float64 fmaximumf64 (_Float64 __x, _Float64 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float64 __fmaximumf64 (_Float64 __x, _Float64 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float64 fminimumf64 (_Float64 __x, _Float64 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float64 __fminimumf64 (_Float64 __x, _Float64 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float64 fmaximum_numf64 (_Float64 __x, _Float64 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float64 __fmaximum_numf64 (_Float64 __x, _Float64 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float64 fminimum_numf64 (_Float64 __x, _Float64 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float64 __fminimum_numf64 (_Float64 __x, _Float64 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float64 fmaximum_magf64 (_Float64 __x, _Float64 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float64 __fmaximum_magf64 (_Float64 __x, _Float64 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float64 fminimum_magf64 (_Float64 __x, _Float64 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float64 __fminimum_magf64 (_Float64 __x, _Float64 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float64 fmaximum_mag_numf64 (_Float64 __x, _Float64 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float64 __fmaximum_mag_numf64 (_Float64 __x, _Float64 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float64 fminimum_mag_numf64 (_Float64 __x, _Float64 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float64 __fminimum_mag_numf64 (_Float64 __x, _Float64 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern int totalorderf64 (const _Float64 *__x, const _Float64 *__y) __attribute__ ((__nothrow__ , __leaf__))

     __attribute__ ((__pure__));


extern int totalordermagf64 (const _Float64 *__x, const _Float64 *__y) __attribute__ ((__nothrow__ , __leaf__))

     __attribute__ ((__pure__));


extern _Float64 getpayloadf64 (const _Float64 *__x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __getpayloadf64 (const _Float64 *__x) __attribute__ ((__nothrow__ , __leaf__));


extern int setpayloadf64 (_Float64 *__x, _Float64 __payload) __attribute__ ((__nothrow__ , __leaf__));


extern int setpayloadsigf64 (_Float64 *__x, _Float64 __payload) __attribute__ ((__nothrow__ , __leaf__));
# 468 "/usr/include/math.h" 2 3 4
# 484 "/usr/include/math.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/aarch64-linux-gnu/bits/mathcalls.h" 3 4
 extern _Float128 acosf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __acosf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));

 extern _Float128 asinf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __asinf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));

 extern _Float128 atanf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __atanf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));

 extern _Float128 atan2f128 (_Float128 __y, _Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __atan2f128 (_Float128 __y, _Float128 __x) __attribute__ ((__nothrow__ , __leaf__));


 extern _Float128 cosf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __cosf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));

 extern _Float128 sinf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __sinf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));

 extern _Float128 tanf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __tanf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));




 extern _Float128 coshf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __coshf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));

 extern _Float128 sinhf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __sinhf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));

 extern _Float128 tanhf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __tanhf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));



 extern void sincosf128 (_Float128 __x, _Float128 *__sinx, _Float128 *__cosx) __attribute__ ((__nothrow__ , __leaf__)); extern void __sincosf128 (_Float128 __x, _Float128 *__sinx, _Float128 *__cosx) __attribute__ ((__nothrow__ , __leaf__))
                                                        ;




 extern _Float128 acoshf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __acoshf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));

 extern _Float128 asinhf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __asinhf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));

 extern _Float128 atanhf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __atanhf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));





 extern _Float128 expf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __expf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float128 frexpf128 (_Float128 __x, int *__exponent) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __frexpf128 (_Float128 __x, int *__exponent) __attribute__ ((__nothrow__ , __leaf__));


extern _Float128 ldexpf128 (_Float128 __x, int __exponent) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __ldexpf128 (_Float128 __x, int __exponent) __attribute__ ((__nothrow__ , __leaf__));


 extern _Float128 logf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __logf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));


 extern _Float128 log10f128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __log10f128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float128 modff128 (_Float128 __x, _Float128 *__iptr) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __modff128 (_Float128 __x, _Float128 *__iptr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



 extern _Float128 exp10f128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __exp10f128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));




 extern _Float128 expm1f128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __expm1f128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));


 extern _Float128 log1pf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __log1pf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float128 logbf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __logbf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));




 extern _Float128 exp2f128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __exp2f128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));


 extern _Float128 log2f128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __log2f128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));






 extern _Float128 powf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __powf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__));


extern _Float128 sqrtf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __sqrtf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));



 extern _Float128 hypotf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __hypotf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__));




 extern _Float128 cbrtf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __cbrtf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));






extern _Float128 ceilf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float128 __ceilf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float128 fabsf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float128 __fabsf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float128 floorf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float128 __floorf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float128 fmodf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __fmodf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__));
# 198 "/usr/include/aarch64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float128 copysignf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float128 __copysignf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern _Float128 nanf128 (const char *__tagb) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __nanf128 (const char *__tagb) __attribute__ ((__nothrow__ , __leaf__));
# 220 "/usr/include/aarch64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float128 j0f128 (_Float128) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __j0f128 (_Float128) __attribute__ ((__nothrow__ , __leaf__));
extern _Float128 j1f128 (_Float128) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __j1f128 (_Float128) __attribute__ ((__nothrow__ , __leaf__));
extern _Float128 jnf128 (int, _Float128) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __jnf128 (int, _Float128) __attribute__ ((__nothrow__ , __leaf__));
extern _Float128 y0f128 (_Float128) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __y0f128 (_Float128) __attribute__ ((__nothrow__ , __leaf__));
extern _Float128 y1f128 (_Float128) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __y1f128 (_Float128) __attribute__ ((__nothrow__ , __leaf__));
extern _Float128 ynf128 (int, _Float128) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __ynf128 (int, _Float128) __attribute__ ((__nothrow__ , __leaf__));





 extern _Float128 erff128 (_Float128) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __erff128 (_Float128) __attribute__ ((__nothrow__ , __leaf__));
 extern _Float128 erfcf128 (_Float128) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __erfcf128 (_Float128) __attribute__ ((__nothrow__ , __leaf__));
extern _Float128 lgammaf128 (_Float128) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __lgammaf128 (_Float128) __attribute__ ((__nothrow__ , __leaf__));




extern _Float128 tgammaf128 (_Float128) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __tgammaf128 (_Float128) __attribute__ ((__nothrow__ , __leaf__));
# 252 "/usr/include/aarch64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float128 lgammaf128_r (_Float128, int *__signgamp) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __lgammaf128_r (_Float128, int *__signgamp) __attribute__ ((__nothrow__ , __leaf__));






extern _Float128 rintf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __rintf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float128 nextafterf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __nextafterf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__));






extern _Float128 nextdownf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __nextdownf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));

extern _Float128 nextupf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __nextupf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));



extern _Float128 remainderf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __remainderf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__));



extern _Float128 scalbnf128 (_Float128 __x, int __n) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __scalbnf128 (_Float128 __x, int __n) __attribute__ ((__nothrow__ , __leaf__));



extern int ilogbf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern int __ilogbf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));




extern long int llogbf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __llogbf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));




extern _Float128 scalblnf128 (_Float128 __x, long int __n) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __scalblnf128 (_Float128 __x, long int __n) __attribute__ ((__nothrow__ , __leaf__));



extern _Float128 nearbyintf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __nearbyintf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));



extern _Float128 roundf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float128 __roundf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern _Float128 truncf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float128 __truncf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern _Float128 remquof128 (_Float128 __x, _Float128 __y, int *__quo) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __remquof128 (_Float128 __x, _Float128 __y, int *__quo) __attribute__ ((__nothrow__ , __leaf__));






extern long int lrintf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __lrintf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));
__extension__
extern long long int llrintf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern long long int __llrintf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));



extern long int lroundf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __lroundf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));
__extension__
extern long long int llroundf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)); extern long long int __llroundf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));



extern _Float128 fdimf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __fdimf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__));



extern _Float128 fmaxf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float128 __fmaxf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float128 fminf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float128 __fminf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern _Float128 fmaf128 (_Float128 __x, _Float128 __y, _Float128 __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __fmaf128 (_Float128 __x, _Float128 __y, _Float128 __z) __attribute__ ((__nothrow__ , __leaf__));




extern _Float128 roundevenf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float128 __roundevenf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern __intmax_t fromfpf128 (_Float128 __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__)); extern __intmax_t __fromfpf128 (_Float128 __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__))
                            ;



extern __uintmax_t ufromfpf128 (_Float128 __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__)); extern __uintmax_t __ufromfpf128 (_Float128 __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__))
                              ;




extern __intmax_t fromfpxf128 (_Float128 __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__)); extern __intmax_t __fromfpxf128 (_Float128 __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__))
                             ;




extern __uintmax_t ufromfpxf128 (_Float128 __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__)); extern __uintmax_t __ufromfpxf128 (_Float128 __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__))
                               ;


extern int canonicalizef128 (_Float128 *__cx, const _Float128 *__x) __attribute__ ((__nothrow__ , __leaf__));






extern _Float128 fmaxmagf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float128 __fmaxmagf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float128 fminmagf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float128 __fminmagf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern _Float128 fmaximumf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float128 __fmaximumf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float128 fminimumf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float128 __fminimumf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float128 fmaximum_numf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float128 __fmaximum_numf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float128 fminimum_numf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float128 __fminimum_numf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float128 fmaximum_magf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float128 __fmaximum_magf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float128 fminimum_magf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float128 __fminimum_magf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float128 fmaximum_mag_numf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float128 __fmaximum_mag_numf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float128 fminimum_mag_numf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float128 __fminimum_mag_numf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern int totalorderf128 (const _Float128 *__x, const _Float128 *__y) __attribute__ ((__nothrow__ , __leaf__))

     __attribute__ ((__pure__));


extern int totalordermagf128 (const _Float128 *__x, const _Float128 *__y) __attribute__ ((__nothrow__ , __leaf__))

     __attribute__ ((__pure__));


extern _Float128 getpayloadf128 (const _Float128 *__x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __getpayloadf128 (const _Float128 *__x) __attribute__ ((__nothrow__ , __leaf__));


extern int setpayloadf128 (_Float128 *__x, _Float128 __payload) __attribute__ ((__nothrow__ , __leaf__));


extern int setpayloadsigf128 (_Float128 *__x, _Float128 __payload) __attribute__ ((__nothrow__ , __leaf__));
# 485 "/usr/include/math.h" 2 3 4
# 501 "/usr/include/math.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/aarch64-linux-gnu/bits/mathcalls.h" 3 4
 extern _Float32x acosf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __acosf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));

 extern _Float32x asinf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __asinf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));

 extern _Float32x atanf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __atanf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));

 extern _Float32x atan2f32x (_Float32x __y, _Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __atan2f32x (_Float32x __y, _Float32x __x) __attribute__ ((__nothrow__ , __leaf__));


 extern _Float32x cosf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __cosf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));

 extern _Float32x sinf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __sinf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));

 extern _Float32x tanf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __tanf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));




 extern _Float32x coshf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __coshf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));

 extern _Float32x sinhf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __sinhf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));

 extern _Float32x tanhf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __tanhf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));



 extern void sincosf32x (_Float32x __x, _Float32x *__sinx, _Float32x *__cosx) __attribute__ ((__nothrow__ , __leaf__)); extern void __sincosf32x (_Float32x __x, _Float32x *__sinx, _Float32x *__cosx) __attribute__ ((__nothrow__ , __leaf__))
                                                        ;




 extern _Float32x acoshf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __acoshf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));

 extern _Float32x asinhf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __asinhf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));

 extern _Float32x atanhf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __atanhf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));





 extern _Float32x expf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __expf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float32x frexpf32x (_Float32x __x, int *__exponent) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __frexpf32x (_Float32x __x, int *__exponent) __attribute__ ((__nothrow__ , __leaf__));


extern _Float32x ldexpf32x (_Float32x __x, int __exponent) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __ldexpf32x (_Float32x __x, int __exponent) __attribute__ ((__nothrow__ , __leaf__));


 extern _Float32x logf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __logf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));


 extern _Float32x log10f32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __log10f32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float32x modff32x (_Float32x __x, _Float32x *__iptr) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __modff32x (_Float32x __x, _Float32x *__iptr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



 extern _Float32x exp10f32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __exp10f32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));




 extern _Float32x expm1f32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __expm1f32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));


 extern _Float32x log1pf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __log1pf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float32x logbf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __logbf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));




 extern _Float32x exp2f32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __exp2f32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));


 extern _Float32x log2f32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __log2f32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));






 extern _Float32x powf32x (_Float32x __x, _Float32x __y) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __powf32x (_Float32x __x, _Float32x __y) __attribute__ ((__nothrow__ , __leaf__));


extern _Float32x sqrtf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __sqrtf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));



 extern _Float32x hypotf32x (_Float32x __x, _Float32x __y) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __hypotf32x (_Float32x __x, _Float32x __y) __attribute__ ((__nothrow__ , __leaf__));




 extern _Float32x cbrtf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __cbrtf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));






extern _Float32x ceilf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float32x __ceilf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float32x fabsf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float32x __fabsf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float32x floorf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float32x __floorf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float32x fmodf32x (_Float32x __x, _Float32x __y) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __fmodf32x (_Float32x __x, _Float32x __y) __attribute__ ((__nothrow__ , __leaf__));
# 198 "/usr/include/aarch64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32x copysignf32x (_Float32x __x, _Float32x __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float32x __copysignf32x (_Float32x __x, _Float32x __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern _Float32x nanf32x (const char *__tagb) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __nanf32x (const char *__tagb) __attribute__ ((__nothrow__ , __leaf__));
# 220 "/usr/include/aarch64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32x j0f32x (_Float32x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __j0f32x (_Float32x) __attribute__ ((__nothrow__ , __leaf__));
extern _Float32x j1f32x (_Float32x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __j1f32x (_Float32x) __attribute__ ((__nothrow__ , __leaf__));
extern _Float32x jnf32x (int, _Float32x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __jnf32x (int, _Float32x) __attribute__ ((__nothrow__ , __leaf__));
extern _Float32x y0f32x (_Float32x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __y0f32x (_Float32x) __attribute__ ((__nothrow__ , __leaf__));
extern _Float32x y1f32x (_Float32x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __y1f32x (_Float32x) __attribute__ ((__nothrow__ , __leaf__));
extern _Float32x ynf32x (int, _Float32x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __ynf32x (int, _Float32x) __attribute__ ((__nothrow__ , __leaf__));





 extern _Float32x erff32x (_Float32x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __erff32x (_Float32x) __attribute__ ((__nothrow__ , __leaf__));
 extern _Float32x erfcf32x (_Float32x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __erfcf32x (_Float32x) __attribute__ ((__nothrow__ , __leaf__));
extern _Float32x lgammaf32x (_Float32x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __lgammaf32x (_Float32x) __attribute__ ((__nothrow__ , __leaf__));




extern _Float32x tgammaf32x (_Float32x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __tgammaf32x (_Float32x) __attribute__ ((__nothrow__ , __leaf__));
# 252 "/usr/include/aarch64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32x lgammaf32x_r (_Float32x, int *__signgamp) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __lgammaf32x_r (_Float32x, int *__signgamp) __attribute__ ((__nothrow__ , __leaf__));






extern _Float32x rintf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __rintf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float32x nextafterf32x (_Float32x __x, _Float32x __y) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __nextafterf32x (_Float32x __x, _Float32x __y) __attribute__ ((__nothrow__ , __leaf__));






extern _Float32x nextdownf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __nextdownf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));

extern _Float32x nextupf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __nextupf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));



extern _Float32x remainderf32x (_Float32x __x, _Float32x __y) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __remainderf32x (_Float32x __x, _Float32x __y) __attribute__ ((__nothrow__ , __leaf__));



extern _Float32x scalbnf32x (_Float32x __x, int __n) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __scalbnf32x (_Float32x __x, int __n) __attribute__ ((__nothrow__ , __leaf__));



extern int ilogbf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern int __ilogbf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));




extern long int llogbf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __llogbf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));




extern _Float32x scalblnf32x (_Float32x __x, long int __n) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __scalblnf32x (_Float32x __x, long int __n) __attribute__ ((__nothrow__ , __leaf__));



extern _Float32x nearbyintf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __nearbyintf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));



extern _Float32x roundf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float32x __roundf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern _Float32x truncf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float32x __truncf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern _Float32x remquof32x (_Float32x __x, _Float32x __y, int *__quo) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __remquof32x (_Float32x __x, _Float32x __y, int *__quo) __attribute__ ((__nothrow__ , __leaf__));






extern long int lrintf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __lrintf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));
__extension__
extern long long int llrintf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern long long int __llrintf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));



extern long int lroundf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __lroundf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));
__extension__
extern long long int llroundf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)); extern long long int __llroundf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));



extern _Float32x fdimf32x (_Float32x __x, _Float32x __y) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __fdimf32x (_Float32x __x, _Float32x __y) __attribute__ ((__nothrow__ , __leaf__));



extern _Float32x fmaxf32x (_Float32x __x, _Float32x __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float32x __fmaxf32x (_Float32x __x, _Float32x __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float32x fminf32x (_Float32x __x, _Float32x __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float32x __fminf32x (_Float32x __x, _Float32x __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern _Float32x fmaf32x (_Float32x __x, _Float32x __y, _Float32x __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __fmaf32x (_Float32x __x, _Float32x __y, _Float32x __z) __attribute__ ((__nothrow__ , __leaf__));




extern _Float32x roundevenf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float32x __roundevenf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern __intmax_t fromfpf32x (_Float32x __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__)); extern __intmax_t __fromfpf32x (_Float32x __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__))
                            ;



extern __uintmax_t ufromfpf32x (_Float32x __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__)); extern __uintmax_t __ufromfpf32x (_Float32x __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__))
                              ;




extern __intmax_t fromfpxf32x (_Float32x __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__)); extern __intmax_t __fromfpxf32x (_Float32x __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__))
                             ;




extern __uintmax_t ufromfpxf32x (_Float32x __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__)); extern __uintmax_t __ufromfpxf32x (_Float32x __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__))
                               ;


extern int canonicalizef32x (_Float32x *__cx, const _Float32x *__x) __attribute__ ((__nothrow__ , __leaf__));






extern _Float32x fmaxmagf32x (_Float32x __x, _Float32x __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float32x __fmaxmagf32x (_Float32x __x, _Float32x __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float32x fminmagf32x (_Float32x __x, _Float32x __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float32x __fminmagf32x (_Float32x __x, _Float32x __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern _Float32x fmaximumf32x (_Float32x __x, _Float32x __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float32x __fmaximumf32x (_Float32x __x, _Float32x __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float32x fminimumf32x (_Float32x __x, _Float32x __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float32x __fminimumf32x (_Float32x __x, _Float32x __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float32x fmaximum_numf32x (_Float32x __x, _Float32x __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float32x __fmaximum_numf32x (_Float32x __x, _Float32x __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float32x fminimum_numf32x (_Float32x __x, _Float32x __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float32x __fminimum_numf32x (_Float32x __x, _Float32x __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float32x fmaximum_magf32x (_Float32x __x, _Float32x __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float32x __fmaximum_magf32x (_Float32x __x, _Float32x __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float32x fminimum_magf32x (_Float32x __x, _Float32x __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float32x __fminimum_magf32x (_Float32x __x, _Float32x __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float32x fmaximum_mag_numf32x (_Float32x __x, _Float32x __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float32x __fmaximum_mag_numf32x (_Float32x __x, _Float32x __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float32x fminimum_mag_numf32x (_Float32x __x, _Float32x __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float32x __fminimum_mag_numf32x (_Float32x __x, _Float32x __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern int totalorderf32x (const _Float32x *__x, const _Float32x *__y) __attribute__ ((__nothrow__ , __leaf__))

     __attribute__ ((__pure__));


extern int totalordermagf32x (const _Float32x *__x, const _Float32x *__y) __attribute__ ((__nothrow__ , __leaf__))

     __attribute__ ((__pure__));


extern _Float32x getpayloadf32x (const _Float32x *__x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __getpayloadf32x (const _Float32x *__x) __attribute__ ((__nothrow__ , __leaf__));


extern int setpayloadf32x (_Float32x *__x, _Float32x __payload) __attribute__ ((__nothrow__ , __leaf__));


extern int setpayloadsigf32x (_Float32x *__x, _Float32x __payload) __attribute__ ((__nothrow__ , __leaf__));
# 502 "/usr/include/math.h" 2 3 4
# 518 "/usr/include/math.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/aarch64-linux-gnu/bits/mathcalls.h" 3 4
 extern _Float64x acosf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __acosf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));

 extern _Float64x asinf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __asinf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));

 extern _Float64x atanf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __atanf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));

 extern _Float64x atan2f64x (_Float64x __y, _Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __atan2f64x (_Float64x __y, _Float64x __x) __attribute__ ((__nothrow__ , __leaf__));


 extern _Float64x cosf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __cosf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));

 extern _Float64x sinf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __sinf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));

 extern _Float64x tanf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __tanf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));




 extern _Float64x coshf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __coshf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));

 extern _Float64x sinhf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __sinhf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));

 extern _Float64x tanhf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __tanhf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));



 extern void sincosf64x (_Float64x __x, _Float64x *__sinx, _Float64x *__cosx) __attribute__ ((__nothrow__ , __leaf__)); extern void __sincosf64x (_Float64x __x, _Float64x *__sinx, _Float64x *__cosx) __attribute__ ((__nothrow__ , __leaf__))
                                                        ;




 extern _Float64x acoshf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __acoshf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));

 extern _Float64x asinhf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __asinhf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));

 extern _Float64x atanhf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __atanhf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));





 extern _Float64x expf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __expf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float64x frexpf64x (_Float64x __x, int *__exponent) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __frexpf64x (_Float64x __x, int *__exponent) __attribute__ ((__nothrow__ , __leaf__));


extern _Float64x ldexpf64x (_Float64x __x, int __exponent) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __ldexpf64x (_Float64x __x, int __exponent) __attribute__ ((__nothrow__ , __leaf__));


 extern _Float64x logf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __logf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));


 extern _Float64x log10f64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __log10f64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float64x modff64x (_Float64x __x, _Float64x *__iptr) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __modff64x (_Float64x __x, _Float64x *__iptr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



 extern _Float64x exp10f64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __exp10f64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));




 extern _Float64x expm1f64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __expm1f64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));


 extern _Float64x log1pf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __log1pf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float64x logbf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __logbf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));




 extern _Float64x exp2f64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __exp2f64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));


 extern _Float64x log2f64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __log2f64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));






 extern _Float64x powf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __powf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__));


extern _Float64x sqrtf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __sqrtf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));



 extern _Float64x hypotf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __hypotf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__));




 extern _Float64x cbrtf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __cbrtf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));






extern _Float64x ceilf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float64x __ceilf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float64x fabsf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float64x __fabsf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float64x floorf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float64x __floorf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float64x fmodf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __fmodf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__));
# 198 "/usr/include/aarch64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64x copysignf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float64x __copysignf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern _Float64x nanf64x (const char *__tagb) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __nanf64x (const char *__tagb) __attribute__ ((__nothrow__ , __leaf__));
# 220 "/usr/include/aarch64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64x j0f64x (_Float64x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __j0f64x (_Float64x) __attribute__ ((__nothrow__ , __leaf__));
extern _Float64x j1f64x (_Float64x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __j1f64x (_Float64x) __attribute__ ((__nothrow__ , __leaf__));
extern _Float64x jnf64x (int, _Float64x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __jnf64x (int, _Float64x) __attribute__ ((__nothrow__ , __leaf__));
extern _Float64x y0f64x (_Float64x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __y0f64x (_Float64x) __attribute__ ((__nothrow__ , __leaf__));
extern _Float64x y1f64x (_Float64x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __y1f64x (_Float64x) __attribute__ ((__nothrow__ , __leaf__));
extern _Float64x ynf64x (int, _Float64x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __ynf64x (int, _Float64x) __attribute__ ((__nothrow__ , __leaf__));





 extern _Float64x erff64x (_Float64x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __erff64x (_Float64x) __attribute__ ((__nothrow__ , __leaf__));
 extern _Float64x erfcf64x (_Float64x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __erfcf64x (_Float64x) __attribute__ ((__nothrow__ , __leaf__));
extern _Float64x lgammaf64x (_Float64x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __lgammaf64x (_Float64x) __attribute__ ((__nothrow__ , __leaf__));




extern _Float64x tgammaf64x (_Float64x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __tgammaf64x (_Float64x) __attribute__ ((__nothrow__ , __leaf__));
# 252 "/usr/include/aarch64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64x lgammaf64x_r (_Float64x, int *__signgamp) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __lgammaf64x_r (_Float64x, int *__signgamp) __attribute__ ((__nothrow__ , __leaf__));






extern _Float64x rintf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __rintf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float64x nextafterf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __nextafterf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__));






extern _Float64x nextdownf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __nextdownf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));

extern _Float64x nextupf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __nextupf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));



extern _Float64x remainderf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __remainderf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__));



extern _Float64x scalbnf64x (_Float64x __x, int __n) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __scalbnf64x (_Float64x __x, int __n) __attribute__ ((__nothrow__ , __leaf__));



extern int ilogbf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern int __ilogbf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));




extern long int llogbf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __llogbf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));




extern _Float64x scalblnf64x (_Float64x __x, long int __n) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __scalblnf64x (_Float64x __x, long int __n) __attribute__ ((__nothrow__ , __leaf__));



extern _Float64x nearbyintf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __nearbyintf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));



extern _Float64x roundf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float64x __roundf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern _Float64x truncf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float64x __truncf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern _Float64x remquof64x (_Float64x __x, _Float64x __y, int *__quo) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __remquof64x (_Float64x __x, _Float64x __y, int *__quo) __attribute__ ((__nothrow__ , __leaf__));






extern long int lrintf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __lrintf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));
__extension__
extern long long int llrintf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern long long int __llrintf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));



extern long int lroundf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __lroundf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));
__extension__
extern long long int llroundf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)); extern long long int __llroundf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));



extern _Float64x fdimf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __fdimf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__));



extern _Float64x fmaxf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float64x __fmaxf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float64x fminf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float64x __fminf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern _Float64x fmaf64x (_Float64x __x, _Float64x __y, _Float64x __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __fmaf64x (_Float64x __x, _Float64x __y, _Float64x __z) __attribute__ ((__nothrow__ , __leaf__));




extern _Float64x roundevenf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float64x __roundevenf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern __intmax_t fromfpf64x (_Float64x __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__)); extern __intmax_t __fromfpf64x (_Float64x __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__))
                            ;



extern __uintmax_t ufromfpf64x (_Float64x __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__)); extern __uintmax_t __ufromfpf64x (_Float64x __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__))
                              ;




extern __intmax_t fromfpxf64x (_Float64x __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__)); extern __intmax_t __fromfpxf64x (_Float64x __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__))
                             ;




extern __uintmax_t ufromfpxf64x (_Float64x __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__)); extern __uintmax_t __ufromfpxf64x (_Float64x __x, int __round, unsigned int __width) __attribute__ ((__nothrow__ , __leaf__))
                               ;


extern int canonicalizef64x (_Float64x *__cx, const _Float64x *__x) __attribute__ ((__nothrow__ , __leaf__));






extern _Float64x fmaxmagf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float64x __fmaxmagf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float64x fminmagf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float64x __fminmagf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern _Float64x fmaximumf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float64x __fmaximumf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float64x fminimumf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float64x __fminimumf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float64x fmaximum_numf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float64x __fmaximum_numf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float64x fminimum_numf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float64x __fminimum_numf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float64x fmaximum_magf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float64x __fmaximum_magf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float64x fminimum_magf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float64x __fminimum_magf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float64x fmaximum_mag_numf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float64x __fmaximum_mag_numf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern _Float64x fminimum_mag_numf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern _Float64x __fminimum_mag_numf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern int totalorderf64x (const _Float64x *__x, const _Float64x *__y) __attribute__ ((__nothrow__ , __leaf__))

     __attribute__ ((__pure__));


extern int totalordermagf64x (const _Float64x *__x, const _Float64x *__y) __attribute__ ((__nothrow__ , __leaf__))

     __attribute__ ((__pure__));


extern _Float64x getpayloadf64x (const _Float64x *__x) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __getpayloadf64x (const _Float64x *__x) __attribute__ ((__nothrow__ , __leaf__));


extern int setpayloadf64x (_Float64x *__x, _Float64x __payload) __attribute__ ((__nothrow__ , __leaf__));


extern int setpayloadsigf64x (_Float64x *__x, _Float64x __payload) __attribute__ ((__nothrow__ , __leaf__));
# 519 "/usr/include/math.h" 2 3 4
# 566 "/usr/include/math.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/aarch64-linux-gnu/bits/mathcalls-narrow.h" 3 4
extern float fadd (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__));


extern float fdiv (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__));


extern float ffma (double __x, double __y, double __z) __attribute__ ((__nothrow__ , __leaf__));


extern float fmul (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__));


extern float fsqrt (double __x) __attribute__ ((__nothrow__ , __leaf__));


extern float fsub (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__));
# 567 "/usr/include/math.h" 2 3 4
# 587 "/usr/include/math.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/aarch64-linux-gnu/bits/mathcalls-narrow.h" 3 4
extern float faddl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));


extern float fdivl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));


extern float ffmal (long double __x, long double __y, long double __z) __attribute__ ((__nothrow__ , __leaf__));


extern float fmull (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));


extern float fsqrtl (long double __x) __attribute__ ((__nothrow__ , __leaf__));


extern float fsubl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));
# 588 "/usr/include/math.h" 2 3 4
# 616 "/usr/include/math.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/aarch64-linux-gnu/bits/mathcalls-narrow.h" 3 4
extern double daddl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));


extern double ddivl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));


extern double dfmal (long double __x, long double __y, long double __z) __attribute__ ((__nothrow__ , __leaf__));


extern double dmull (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));


extern double dsqrtl (long double __x) __attribute__ ((__nothrow__ , __leaf__));


extern double dsubl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));
# 617 "/usr/include/math.h" 2 3 4
# 697 "/usr/include/math.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/aarch64-linux-gnu/bits/mathcalls-narrow.h" 3 4
extern _Float32 f32addf32x (_Float32x __x, _Float32x __y) __attribute__ ((__nothrow__ , __leaf__));


extern _Float32 f32divf32x (_Float32x __x, _Float32x __y) __attribute__ ((__nothrow__ , __leaf__));


extern _Float32 f32fmaf32x (_Float32x __x, _Float32x __y, _Float32x __z) __attribute__ ((__nothrow__ , __leaf__));


extern _Float32 f32mulf32x (_Float32x __x, _Float32x __y) __attribute__ ((__nothrow__ , __leaf__));


extern _Float32 f32sqrtf32x (_Float32x __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float32 f32subf32x (_Float32x __x, _Float32x __y) __attribute__ ((__nothrow__ , __leaf__));
# 698 "/usr/include/math.h" 2 3 4
# 707 "/usr/include/math.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/aarch64-linux-gnu/bits/mathcalls-narrow.h" 3 4
extern _Float32 f32addf64 (_Float64 __x, _Float64 __y) __attribute__ ((__nothrow__ , __leaf__));


extern _Float32 f32divf64 (_Float64 __x, _Float64 __y) __attribute__ ((__nothrow__ , __leaf__));


extern _Float32 f32fmaf64 (_Float64 __x, _Float64 __y, _Float64 __z) __attribute__ ((__nothrow__ , __leaf__));


extern _Float32 f32mulf64 (_Float64 __x, _Float64 __y) __attribute__ ((__nothrow__ , __leaf__));


extern _Float32 f32sqrtf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float32 f32subf64 (_Float64 __x, _Float64 __y) __attribute__ ((__nothrow__ , __leaf__));
# 708 "/usr/include/math.h" 2 3 4
# 717 "/usr/include/math.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/aarch64-linux-gnu/bits/mathcalls-narrow.h" 3 4
extern _Float32 f32addf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__));


extern _Float32 f32divf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__));


extern _Float32 f32fmaf64x (_Float64x __x, _Float64x __y, _Float64x __z) __attribute__ ((__nothrow__ , __leaf__));


extern _Float32 f32mulf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__));


extern _Float32 f32sqrtf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float32 f32subf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__));
# 718 "/usr/include/math.h" 2 3 4
# 727 "/usr/include/math.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/aarch64-linux-gnu/bits/mathcalls-narrow.h" 3 4
extern _Float32 f32addf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__));


extern _Float32 f32divf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__));


extern _Float32 f32fmaf128 (_Float128 __x, _Float128 __y, _Float128 __z) __attribute__ ((__nothrow__ , __leaf__));


extern _Float32 f32mulf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__));


extern _Float32 f32sqrtf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float32 f32subf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__));
# 728 "/usr/include/math.h" 2 3 4
# 747 "/usr/include/math.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/aarch64-linux-gnu/bits/mathcalls-narrow.h" 3 4
extern _Float32x f32xaddf64 (_Float64 __x, _Float64 __y) __attribute__ ((__nothrow__ , __leaf__));


extern _Float32x f32xdivf64 (_Float64 __x, _Float64 __y) __attribute__ ((__nothrow__ , __leaf__));


extern _Float32x f32xfmaf64 (_Float64 __x, _Float64 __y, _Float64 __z) __attribute__ ((__nothrow__ , __leaf__));


extern _Float32x f32xmulf64 (_Float64 __x, _Float64 __y) __attribute__ ((__nothrow__ , __leaf__));


extern _Float32x f32xsqrtf64 (_Float64 __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float32x f32xsubf64 (_Float64 __x, _Float64 __y) __attribute__ ((__nothrow__ , __leaf__));
# 748 "/usr/include/math.h" 2 3 4
# 757 "/usr/include/math.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/aarch64-linux-gnu/bits/mathcalls-narrow.h" 3 4
extern _Float32x f32xaddf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__));


extern _Float32x f32xdivf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__));


extern _Float32x f32xfmaf64x (_Float64x __x, _Float64x __y, _Float64x __z) __attribute__ ((__nothrow__ , __leaf__));


extern _Float32x f32xmulf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__));


extern _Float32x f32xsqrtf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float32x f32xsubf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__));
# 758 "/usr/include/math.h" 2 3 4
# 767 "/usr/include/math.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/aarch64-linux-gnu/bits/mathcalls-narrow.h" 3 4
extern _Float32x f32xaddf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__));


extern _Float32x f32xdivf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__));


extern _Float32x f32xfmaf128 (_Float128 __x, _Float128 __y, _Float128 __z) __attribute__ ((__nothrow__ , __leaf__));


extern _Float32x f32xmulf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__));


extern _Float32x f32xsqrtf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float32x f32xsubf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__));
# 768 "/usr/include/math.h" 2 3 4
# 787 "/usr/include/math.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/aarch64-linux-gnu/bits/mathcalls-narrow.h" 3 4
extern _Float64 f64addf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__));


extern _Float64 f64divf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__));


extern _Float64 f64fmaf64x (_Float64x __x, _Float64x __y, _Float64x __z) __attribute__ ((__nothrow__ , __leaf__));


extern _Float64 f64mulf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__));


extern _Float64 f64sqrtf64x (_Float64x __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float64 f64subf64x (_Float64x __x, _Float64x __y) __attribute__ ((__nothrow__ , __leaf__));
# 788 "/usr/include/math.h" 2 3 4
# 797 "/usr/include/math.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/aarch64-linux-gnu/bits/mathcalls-narrow.h" 3 4
extern _Float64 f64addf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__));


extern _Float64 f64divf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__));


extern _Float64 f64fmaf128 (_Float128 __x, _Float128 __y, _Float128 __z) __attribute__ ((__nothrow__ , __leaf__));


extern _Float64 f64mulf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__));


extern _Float64 f64sqrtf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float64 f64subf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__));
# 798 "/usr/include/math.h" 2 3 4
# 817 "/usr/include/math.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/aarch64-linux-gnu/bits/mathcalls-narrow.h" 3 4
extern _Float64x f64xaddf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__));


extern _Float64x f64xdivf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__));


extern _Float64x f64xfmaf128 (_Float128 __x, _Float128 __y, _Float128 __z) __attribute__ ((__nothrow__ , __leaf__));


extern _Float64x f64xmulf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__));


extern _Float64x f64xsqrtf128 (_Float128 __x) __attribute__ ((__nothrow__ , __leaf__));


extern _Float64x f64xsubf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__));
# 818 "/usr/include/math.h" 2 3 4
# 854 "/usr/include/math.h" 3 4
extern int signgam;
# 934 "/usr/include/math.h" 3 4
enum
  {
    FP_NAN =

      0,
    FP_INFINITE =

      1,
    FP_ZERO =

      2,
    FP_SUBNORMAL =

      3,
    FP_NORMAL =

      4
  };
# 1054 "/usr/include/math.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/iscanonical.h" 1 3 4
# 1055 "/usr/include/math.h" 2 3 4
# 1423 "/usr/include/math.h" 3 4

# 58 "stress-ng.h" 2
# 1 "/usr/include/pwd.h" 1 3 4
# 27 "/usr/include/pwd.h" 3 4





# 1 "/usr/lib/gcc/aarch64-linux-gnu/11/include/stddef.h" 1 3 4
# 33 "/usr/include/pwd.h" 2 3 4





typedef __gid_t gid_t;




typedef __uid_t uid_t;





struct passwd
{
  char *pw_name;
  char *pw_passwd;

  __uid_t pw_uid;
  __gid_t pw_gid;
  char *pw_gecos;
  char *pw_dir;
  char *pw_shell;
};



# 1 "/usr/include/aarch64-linux-gnu/bits/types/FILE.h" 1 3 4



struct _IO_FILE;


typedef struct _IO_FILE FILE;
# 64 "/usr/include/pwd.h" 2 3 4
# 72 "/usr/include/pwd.h" 3 4
extern void setpwent (void);





extern void endpwent (void);





extern struct passwd *getpwent (void);
# 94 "/usr/include/pwd.h" 3 4
extern struct passwd *fgetpwent (FILE *__stream) __attribute__ ((__nonnull__ (1)));







extern int putpwent (const struct passwd *__restrict __p,
       FILE *__restrict __f);






extern struct passwd *getpwuid (__uid_t __uid);





extern struct passwd *getpwnam (const char *__name) __attribute__ ((__nonnull__ (1)));
# 139 "/usr/include/pwd.h" 3 4
extern int getpwent_r (struct passwd *__restrict __resultbuf,
         char *__restrict __buffer, size_t __buflen,
         struct passwd **__restrict __result)
    __attribute__ ((__nonnull__ (1, 2, 4)))
    __attribute__ ((__access__ (__write_only__, 2, 3)));


extern int getpwuid_r (__uid_t __uid,
         struct passwd *__restrict __resultbuf,
         char *__restrict __buffer, size_t __buflen,
         struct passwd **__restrict __result)
    __attribute__ ((__nonnull__ (2, 3, 5)))
    __attribute__ ((__access__ (__write_only__, 3, 4)));

extern int getpwnam_r (const char *__restrict __name,
         struct passwd *__restrict __resultbuf,
         char *__restrict __buffer, size_t __buflen,
         struct passwd **__restrict __result)
    __attribute__ ((__nonnull__ (1, 2, 3, 5)))
    __attribute__ ((__access__ (__write_only__, 3, 4)));
# 169 "/usr/include/pwd.h" 3 4
extern int fgetpwent_r (FILE *__restrict __stream,
   struct passwd *__restrict __resultbuf,
   char *__restrict __buffer, size_t __buflen,
   struct passwd **__restrict __result)
    __attribute__ ((__nonnull__ (1, 2, 3, 5)))
    __attribute__ ((__access__ (__write_only__, 3, 4)));
# 188 "/usr/include/pwd.h" 3 4
extern int getpw (__uid_t __uid, char *__buffer);



# 59 "stress-ng.h" 2
# 1 "/usr/include/sched.h" 1 3 4
# 29 "/usr/include/sched.h" 3 4
# 1 "/usr/lib/gcc/aarch64-linux-gnu/11/include/stddef.h" 1 3 4
# 30 "/usr/include/sched.h" 2 3 4
# 43 "/usr/include/sched.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/sched.h" 1 3 4
# 76 "/usr/include/aarch64-linux-gnu/bits/sched.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/types/struct_sched_param.h" 1 3 4
# 23 "/usr/include/aarch64-linux-gnu/bits/types/struct_sched_param.h" 3 4
struct sched_param
{
  int sched_priority;
};
# 77 "/usr/include/aarch64-linux-gnu/bits/sched.h" 2 3 4





extern int clone (int (*__fn) (void *__arg), void *__child_stack,
    int __flags, void *__arg, ...) __attribute__ ((__nothrow__ , __leaf__));


extern int unshare (int __flags) __attribute__ ((__nothrow__ , __leaf__));


extern int sched_getcpu (void) __attribute__ ((__nothrow__ , __leaf__));


extern int getcpu (unsigned int *, unsigned int *) __attribute__ ((__nothrow__ , __leaf__));


extern int setns (int __fd, int __nstype) __attribute__ ((__nothrow__ , __leaf__));



# 44 "/usr/include/sched.h" 2 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/cpu-set.h" 1 3 4
# 32 "/usr/include/aarch64-linux-gnu/bits/cpu-set.h" 3 4
typedef unsigned long int __cpu_mask;






typedef struct
{
  __cpu_mask __bits[1024 / (8 * sizeof (__cpu_mask))];
} cpu_set_t;
# 115 "/usr/include/aarch64-linux-gnu/bits/cpu-set.h" 3 4


extern int __sched_cpucount (size_t __setsize, const cpu_set_t *__setp)
     __attribute__ ((__nothrow__ , __leaf__));
extern cpu_set_t *__sched_cpualloc (size_t __count) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));
extern void __sched_cpufree (cpu_set_t *__set) __attribute__ ((__nothrow__ , __leaf__));


# 45 "/usr/include/sched.h" 2 3 4









extern int sched_setparam (__pid_t __pid, const struct sched_param *__param)
     __attribute__ ((__nothrow__ , __leaf__));


extern int sched_getparam (__pid_t __pid, struct sched_param *__param) __attribute__ ((__nothrow__ , __leaf__));


extern int sched_setscheduler (__pid_t __pid, int __policy,
          const struct sched_param *__param) __attribute__ ((__nothrow__ , __leaf__));


extern int sched_getscheduler (__pid_t __pid) __attribute__ ((__nothrow__ , __leaf__));


extern int sched_yield (void) __attribute__ ((__nothrow__ , __leaf__));


extern int sched_get_priority_max (int __algorithm) __attribute__ ((__nothrow__ , __leaf__));


extern int sched_get_priority_min (int __algorithm) __attribute__ ((__nothrow__ , __leaf__));



extern int sched_rr_get_interval (__pid_t __pid, struct timespec *__t) __attribute__ ((__nothrow__ , __leaf__));
# 130 "/usr/include/sched.h" 3 4
extern int sched_setaffinity (__pid_t __pid, size_t __cpusetsize,
         const cpu_set_t *__cpuset) __attribute__ ((__nothrow__ , __leaf__));


extern int sched_getaffinity (__pid_t __pid, size_t __cpusetsize,
         cpu_set_t *__cpuset) __attribute__ ((__nothrow__ , __leaf__));



# 60 "stress-ng.h" 2
# 1 "/usr/include/search.h" 1 3 4
# 25 "/usr/include/search.h" 3 4
# 1 "/usr/lib/gcc/aarch64-linux-gnu/11/include/stddef.h" 1 3 4
# 26 "/usr/include/search.h" 2 3 4








struct qelem
  {
    struct qelem *q_forw;
    struct qelem *q_back;
    char q_data[1];
  };




extern void insque (void *__elem, void *__prev) __attribute__ ((__nothrow__ , __leaf__));


extern void remque (void *__elem) __attribute__ ((__nothrow__ , __leaf__));






typedef int (*__compar_fn_t) (const void *, const void *);


typedef __compar_fn_t comparison_fn_t;




typedef enum
  {
    FIND,
    ENTER
  }
ACTION;

typedef struct entry
  {
    char *key;
    void *data;
  }
ENTRY;


struct _ENTRY;
# 87 "/usr/include/search.h" 3 4
extern ENTRY *hsearch (ENTRY __item, ACTION __action) __attribute__ ((__nothrow__ , __leaf__));


extern int hcreate (size_t __nel) __attribute__ ((__nothrow__ , __leaf__));


extern void hdestroy (void) __attribute__ ((__nothrow__ , __leaf__));



struct hsearch_data
  {
    struct _ENTRY *table;
    unsigned int size;
    unsigned int filled;
  };



extern int hsearch_r (ENTRY __item, ACTION __action, ENTRY **__retval,
        struct hsearch_data *__htab) __attribute__ ((__nothrow__ , __leaf__));
extern int hcreate_r (size_t __nel, struct hsearch_data *__htab) __attribute__ ((__nothrow__ , __leaf__));
extern void hdestroy_r (struct hsearch_data *__htab) __attribute__ ((__nothrow__ , __leaf__));
# 118 "/usr/include/search.h" 3 4
typedef enum
{
  preorder,
  postorder,
  endorder,
  leaf
}
VISIT;



extern void *tsearch (const void *__key, void **__rootp,
        __compar_fn_t __compar);



extern void *tfind (const void *__key, void *const *__rootp,
      __compar_fn_t __compar);


extern void *tdelete (const void *__restrict __key,
        void **__restrict __rootp,
        __compar_fn_t __compar);



typedef void (*__action_fn_t) (const void *__nodep, VISIT __value,
          int __level);




extern void twalk (const void *__root, __action_fn_t __action);




extern void twalk_r (const void *__root,
       void (*) (const void *__nodep, VISIT __value,
          void *__closure),
       void *__closure);



typedef void (*__free_fn_t) (void *__nodep);


extern void tdestroy (void *__root, __free_fn_t __freefct);





extern void *lfind (const void *__key, const void *__base,
      size_t *__nmemb, size_t __size, __compar_fn_t __compar);



extern void *lsearch (const void *__key, void *__base,
        size_t *__nmemb, size_t __size, __compar_fn_t __compar);


# 61 "stress-ng.h" 2
# 1 "/usr/include/setjmp.h" 1 3 4
# 27 "/usr/include/setjmp.h" 3 4


# 1 "/usr/include/aarch64-linux-gnu/bits/setjmp.h" 1 3 4
# 30 "/usr/include/aarch64-linux-gnu/bits/setjmp.h" 3 4
__extension__ typedef unsigned long long __jmp_buf [22];
# 30 "/usr/include/setjmp.h" 2 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/types/struct___jmp_buf_tag.h" 1 3 4
# 23 "/usr/include/aarch64-linux-gnu/bits/types/struct___jmp_buf_tag.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/types/__sigset_t.h" 1 3 4




typedef struct
{
  unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
} __sigset_t;
# 24 "/usr/include/aarch64-linux-gnu/bits/types/struct___jmp_buf_tag.h" 2 3 4


struct __jmp_buf_tag
  {




    __jmp_buf __jmpbuf;
    int __mask_was_saved;
    __sigset_t __saved_mask;
  };
# 31 "/usr/include/setjmp.h" 2 3 4

typedef struct __jmp_buf_tag jmp_buf[1];



extern int setjmp (jmp_buf __env) __attribute__ ((__nothrow__));




extern int __sigsetjmp (struct __jmp_buf_tag __env[1], int __savemask) __attribute__ ((__nothrow__));



extern int _setjmp (struct __jmp_buf_tag __env[1]) __attribute__ ((__nothrow__));
# 54 "/usr/include/setjmp.h" 3 4
extern void longjmp (struct __jmp_buf_tag __env[1], int __val)
     __attribute__ ((__nothrow__)) __attribute__ ((__noreturn__));





extern void _longjmp (struct __jmp_buf_tag __env[1], int __val)
     __attribute__ ((__nothrow__)) __attribute__ ((__noreturn__));







typedef struct __jmp_buf_tag sigjmp_buf[1];
# 80 "/usr/include/setjmp.h" 3 4
extern void siglongjmp (sigjmp_buf __env, int __val)
     __attribute__ ((__nothrow__)) __attribute__ ((__noreturn__));





# 1 "/usr/include/aarch64-linux-gnu/bits/setjmp2.h" 1 3 4
# 25 "/usr/include/aarch64-linux-gnu/bits/setjmp2.h" 3 4
extern void longjmp (struct __jmp_buf_tag __env[1], int __val) __asm__ ("" "__longjmp_chk") __attribute__ ((__nothrow__))

                        __attribute__ ((__noreturn__));
extern void _longjmp (struct __jmp_buf_tag __env[1], int __val) __asm__ ("" "__longjmp_chk") __attribute__ ((__nothrow__))

                        __attribute__ ((__noreturn__));
extern void siglongjmp (struct __jmp_buf_tag __env[1], int __val) __asm__ ("" "__longjmp_chk") __attribute__ ((__nothrow__))

                        __attribute__ ((__noreturn__));
# 88 "/usr/include/setjmp.h" 2 3 4



# 62 "stress-ng.h" 2
# 1 "/usr/include/signal.h" 1 3 4
# 27 "/usr/include/signal.h" 3 4



# 1 "/usr/include/aarch64-linux-gnu/bits/signum-generic.h" 1 3 4
# 76 "/usr/include/aarch64-linux-gnu/bits/signum-generic.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/signum-arch.h" 1 3 4
# 77 "/usr/include/aarch64-linux-gnu/bits/signum-generic.h" 2 3 4
# 31 "/usr/include/signal.h" 2 3 4

# 1 "/usr/include/aarch64-linux-gnu/bits/types/sig_atomic_t.h" 1 3 4







typedef __sig_atomic_t sig_atomic_t;
# 33 "/usr/include/signal.h" 2 3 4


# 1 "/usr/include/aarch64-linux-gnu/bits/types/sigset_t.h" 1 3 4






typedef __sigset_t sigset_t;
# 36 "/usr/include/signal.h" 2 3 4
# 57 "/usr/include/signal.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/types/siginfo_t.h" 1 3 4



# 1 "/usr/include/aarch64-linux-gnu/bits/wordsize.h" 1 3 4
# 5 "/usr/include/aarch64-linux-gnu/bits/types/siginfo_t.h" 2 3 4

# 1 "/usr/include/aarch64-linux-gnu/bits/types/__sigval_t.h" 1 3 4
# 24 "/usr/include/aarch64-linux-gnu/bits/types/__sigval_t.h" 3 4
union sigval
{
  int sival_int;
  void *sival_ptr;
};

typedef union sigval __sigval_t;
# 7 "/usr/include/aarch64-linux-gnu/bits/types/siginfo_t.h" 2 3 4
# 16 "/usr/include/aarch64-linux-gnu/bits/types/siginfo_t.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/siginfo-arch.h" 1 3 4
# 17 "/usr/include/aarch64-linux-gnu/bits/types/siginfo_t.h" 2 3 4
# 36 "/usr/include/aarch64-linux-gnu/bits/types/siginfo_t.h" 3 4
typedef struct
  {
    int si_signo;

    int si_errno;

    int si_code;





    int __pad0;


    union
      {
 int _pad[((128 / sizeof (int)) - 4)];


 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
   } _kill;


 struct
   {
     int si_tid;
     int si_overrun;
     __sigval_t si_sigval;
   } _timer;


 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
     __sigval_t si_sigval;
   } _rt;


 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
     int si_status;
     __clock_t si_utime;
     __clock_t si_stime;
   } _sigchld;


 struct
   {
     void *si_addr;
    
     short int si_addr_lsb;
     union
       {

  struct
    {
      void *_lower;
      void *_upper;
    } _addr_bnd;

  __uint32_t _pkey;
       } _bounds;
   } _sigfault;


 struct
   {
     long int si_band;
     int si_fd;
   } _sigpoll;



 struct
   {
     void *_call_addr;
     int _syscall;
     unsigned int _arch;
   } _sigsys;

      } _sifields;
  } siginfo_t ;
# 58 "/usr/include/signal.h" 2 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/siginfo-consts.h" 1 3 4
# 35 "/usr/include/aarch64-linux-gnu/bits/siginfo-consts.h" 3 4
enum
{
  SI_ASYNCNL = -60,
  SI_DETHREAD = -7,

  SI_TKILL,
  SI_SIGIO,

  SI_ASYNCIO,
  SI_MESGQ,
  SI_TIMER,





  SI_QUEUE,
  SI_USER,
  SI_KERNEL = 0x80
# 66 "/usr/include/aarch64-linux-gnu/bits/siginfo-consts.h" 3 4
};




enum
{
  ILL_ILLOPC = 1,

  ILL_ILLOPN,

  ILL_ILLADR,

  ILL_ILLTRP,

  ILL_PRVOPC,

  ILL_PRVREG,

  ILL_COPROC,

  ILL_BADSTK,

  ILL_BADIADDR

};


enum
{
  FPE_INTDIV = 1,

  FPE_INTOVF,

  FPE_FLTDIV,

  FPE_FLTOVF,

  FPE_FLTUND,

  FPE_FLTRES,

  FPE_FLTINV,

  FPE_FLTSUB,

  FPE_FLTUNK = 14,

  FPE_CONDTRAP

};


enum
{
  SEGV_MAPERR = 1,

  SEGV_ACCERR,

  SEGV_BNDERR,

  SEGV_PKUERR,

  SEGV_ACCADI,

  SEGV_ADIDERR,

  SEGV_ADIPERR,

  SEGV_MTEAERR,

  SEGV_MTESERR

};


enum
{
  BUS_ADRALN = 1,

  BUS_ADRERR,

  BUS_OBJERR,

  BUS_MCEERR_AR,

  BUS_MCEERR_AO

};




enum
{
  TRAP_BRKPT = 1,

  TRAP_TRACE,

  TRAP_BRANCH,

  TRAP_HWBKPT,

  TRAP_UNK

};




enum
{
  CLD_EXITED = 1,

  CLD_KILLED,

  CLD_DUMPED,

  CLD_TRAPPED,

  CLD_STOPPED,

  CLD_CONTINUED

};


enum
{
  POLL_IN = 1,

  POLL_OUT,

  POLL_MSG,

  POLL_ERR,

  POLL_PRI,

  POLL_HUP

};





# 1 "/usr/include/aarch64-linux-gnu/bits/siginfo-consts-arch.h" 1 3 4
# 214 "/usr/include/aarch64-linux-gnu/bits/siginfo-consts.h" 2 3 4
# 59 "/usr/include/signal.h" 2 3 4



# 1 "/usr/include/aarch64-linux-gnu/bits/types/sigval_t.h" 1 3 4
# 16 "/usr/include/aarch64-linux-gnu/bits/types/sigval_t.h" 3 4
typedef __sigval_t sigval_t;
# 63 "/usr/include/signal.h" 2 3 4



# 1 "/usr/include/aarch64-linux-gnu/bits/types/sigevent_t.h" 1 3 4



# 1 "/usr/include/aarch64-linux-gnu/bits/wordsize.h" 1 3 4
# 5 "/usr/include/aarch64-linux-gnu/bits/types/sigevent_t.h" 2 3 4
# 17 "/usr/include/aarch64-linux-gnu/bits/types/sigevent_t.h" 3 4
typedef union pthread_attr_t pthread_attr_t;




typedef struct sigevent
  {
    __sigval_t sigev_value;
    int sigev_signo;
    int sigev_notify;

    union
      {
 int _pad[((64 / sizeof (int)) - 4)];



 __pid_t _tid;

 struct
   {
     void (*_function) (__sigval_t);
     pthread_attr_t *_attribute;
   } _sigev_thread;
      } _sigev_un;
  } sigevent_t;
# 67 "/usr/include/signal.h" 2 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/sigevent-consts.h" 1 3 4
# 27 "/usr/include/aarch64-linux-gnu/bits/sigevent-consts.h" 3 4
enum
{
  SIGEV_SIGNAL = 0,

  SIGEV_NONE,

  SIGEV_THREAD,


  SIGEV_THREAD_ID = 4


};
# 68 "/usr/include/signal.h" 2 3 4




typedef void (*__sighandler_t) (int);




extern __sighandler_t __sysv_signal (int __sig, __sighandler_t __handler)
     __attribute__ ((__nothrow__ , __leaf__));

extern __sighandler_t sysv_signal (int __sig, __sighandler_t __handler)
     __attribute__ ((__nothrow__ , __leaf__));






extern __sighandler_t signal (int __sig, __sighandler_t __handler)
     __attribute__ ((__nothrow__ , __leaf__));
# 112 "/usr/include/signal.h" 3 4
extern int kill (__pid_t __pid, int __sig) __attribute__ ((__nothrow__ , __leaf__));






extern int killpg (__pid_t __pgrp, int __sig) __attribute__ ((__nothrow__ , __leaf__));



extern int raise (int __sig) __attribute__ ((__nothrow__ , __leaf__));



extern __sighandler_t ssignal (int __sig, __sighandler_t __handler)
     __attribute__ ((__nothrow__ , __leaf__));
extern int gsignal (int __sig) __attribute__ ((__nothrow__ , __leaf__));




extern void psignal (int __sig, const char *__s);


extern void psiginfo (const siginfo_t *__pinfo, const char *__s);
# 151 "/usr/include/signal.h" 3 4
extern int sigpause (int __sig) __asm__ ("__xpg_sigpause")
  __attribute__ ((__deprecated__ ("Use the sigsuspend function instead")));
# 173 "/usr/include/signal.h" 3 4
extern int sigblock (int __mask) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__deprecated__));


extern int sigsetmask (int __mask) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__deprecated__));


extern int siggetmask (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__deprecated__));
# 188 "/usr/include/signal.h" 3 4
typedef __sighandler_t sighandler_t;




typedef __sighandler_t sig_t;





extern int sigemptyset (sigset_t *__set) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int sigfillset (sigset_t *__set) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int sigaddset (sigset_t *__set, int __signo) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int sigdelset (sigset_t *__set, int __signo) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int sigismember (const sigset_t *__set, int __signo)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int sigisemptyset (const sigset_t *__set) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int sigandset (sigset_t *__set, const sigset_t *__left,
        const sigset_t *__right) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2, 3)));


extern int sigorset (sigset_t *__set, const sigset_t *__left,
       const sigset_t *__right) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2, 3)));




# 1 "/usr/include/aarch64-linux-gnu/bits/sigaction.h" 1 3 4
# 27 "/usr/include/aarch64-linux-gnu/bits/sigaction.h" 3 4
struct sigaction
  {


    union
      {

 __sighandler_t sa_handler;

 void (*sa_sigaction) (int, siginfo_t *, void *);
      }
    __sigaction_handler;







    __sigset_t sa_mask;


    int sa_flags;


    void (*sa_restorer) (void);
  };
# 230 "/usr/include/signal.h" 2 3 4


extern int sigprocmask (int __how, const sigset_t *__restrict __set,
   sigset_t *__restrict __oset) __attribute__ ((__nothrow__ , __leaf__));






extern int sigsuspend (const sigset_t *__set) __attribute__ ((__nonnull__ (1)));


extern int sigaction (int __sig, const struct sigaction *__restrict __act,
        struct sigaction *__restrict __oact) __attribute__ ((__nothrow__ , __leaf__));


extern int sigpending (sigset_t *__set) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));







extern int sigwait (const sigset_t *__restrict __set, int *__restrict __sig)
     __attribute__ ((__nonnull__ (1, 2)));







extern int sigwaitinfo (const sigset_t *__restrict __set,
   siginfo_t *__restrict __info) __attribute__ ((__nonnull__ (1)));







extern int sigtimedwait (const sigset_t *__restrict __set,
    siginfo_t *__restrict __info,
    const struct timespec *__restrict __timeout)
     __attribute__ ((__nonnull__ (1)));
# 292 "/usr/include/signal.h" 3 4
extern int sigqueue (__pid_t __pid, int __sig, const union sigval __val)
     __attribute__ ((__nothrow__ , __leaf__));







# 1 "/usr/include/aarch64-linux-gnu/bits/sigcontext.h" 1 3 4
# 30 "/usr/include/aarch64-linux-gnu/bits/sigcontext.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/asm/sigcontext.h" 1 3 4
# 22 "/usr/include/aarch64-linux-gnu/asm/sigcontext.h" 3 4
# 1 "/usr/include/linux/types.h" 1 3 4




# 1 "/usr/include/aarch64-linux-gnu/asm/types.h" 1 3 4
# 1 "/usr/include/asm-generic/types.h" 1 3 4






# 1 "/usr/include/asm-generic/int-ll64.h" 1 3 4
# 12 "/usr/include/asm-generic/int-ll64.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/asm/bitsperlong.h" 1 3 4
# 22 "/usr/include/aarch64-linux-gnu/asm/bitsperlong.h" 3 4
# 1 "/usr/include/asm-generic/bitsperlong.h" 1 3 4
# 23 "/usr/include/aarch64-linux-gnu/asm/bitsperlong.h" 2 3 4
# 13 "/usr/include/asm-generic/int-ll64.h" 2 3 4







typedef __signed__ char __s8;
typedef unsigned char __u8;

typedef __signed__ short __s16;
typedef unsigned short __u16;

typedef __signed__ int __s32;
typedef unsigned int __u32;


__extension__ typedef __signed__ long long __s64;
__extension__ typedef unsigned long long __u64;
# 8 "/usr/include/asm-generic/types.h" 2 3 4
# 2 "/usr/include/aarch64-linux-gnu/asm/types.h" 2 3 4
# 6 "/usr/include/linux/types.h" 2 3 4



# 1 "/usr/include/linux/posix_types.h" 1 3 4




# 1 "/usr/include/linux/stddef.h" 1 3 4
# 6 "/usr/include/linux/posix_types.h" 2 3 4
# 25 "/usr/include/linux/posix_types.h" 3 4
typedef struct {
 unsigned long fds_bits[1024 / (8 * sizeof(long))];
} __kernel_fd_set;


typedef void (*__kernel_sighandler_t)(int);


typedef int __kernel_key_t;
typedef int __kernel_mqd_t;

# 1 "/usr/include/aarch64-linux-gnu/asm/posix_types.h" 1 3 4




typedef unsigned short __kernel_old_uid_t;
typedef unsigned short __kernel_old_gid_t;


# 1 "/usr/include/asm-generic/posix_types.h" 1 3 4
# 15 "/usr/include/asm-generic/posix_types.h" 3 4
typedef long __kernel_long_t;
typedef unsigned long __kernel_ulong_t;



typedef __kernel_ulong_t __kernel_ino_t;



typedef unsigned int __kernel_mode_t;



typedef int __kernel_pid_t;



typedef int __kernel_ipc_pid_t;



typedef unsigned int __kernel_uid_t;
typedef unsigned int __kernel_gid_t;



typedef __kernel_long_t __kernel_suseconds_t;



typedef int __kernel_daddr_t;



typedef unsigned int __kernel_uid32_t;
typedef unsigned int __kernel_gid32_t;
# 59 "/usr/include/asm-generic/posix_types.h" 3 4
typedef unsigned int __kernel_old_dev_t;
# 72 "/usr/include/asm-generic/posix_types.h" 3 4
typedef __kernel_ulong_t __kernel_size_t;
typedef __kernel_long_t __kernel_ssize_t;
typedef __kernel_long_t __kernel_ptrdiff_t;




typedef struct {
 int val[2];
} __kernel_fsid_t;





typedef __kernel_long_t __kernel_off_t;
typedef long long __kernel_loff_t;
typedef __kernel_long_t __kernel_old_time_t;
typedef __kernel_long_t __kernel_time_t;
typedef long long __kernel_time64_t;
typedef __kernel_long_t __kernel_clock_t;
typedef int __kernel_timer_t;
typedef int __kernel_clockid_t;
typedef char * __kernel_caddr_t;
typedef unsigned short __kernel_uid16_t;
typedef unsigned short __kernel_gid16_t;
# 10 "/usr/include/aarch64-linux-gnu/asm/posix_types.h" 2 3 4
# 37 "/usr/include/linux/posix_types.h" 2 3 4
# 10 "/usr/include/linux/types.h" 2 3 4
# 24 "/usr/include/linux/types.h" 3 4
typedef __u16 __le16;
typedef __u16 __be16;
typedef __u32 __le32;
typedef __u32 __be32;
typedef __u64 __le64;
typedef __u64 __be64;

typedef __u16 __sum16;
typedef __u32 __wsum;
# 47 "/usr/include/linux/types.h" 3 4
typedef unsigned __poll_t;
# 23 "/usr/include/aarch64-linux-gnu/asm/sigcontext.h" 2 3 4





struct sigcontext {
 __u64 fault_address;

 __u64 regs[31];
 __u64 sp;
 __u64 pc;
 __u64 pstate;

 __u8 __reserved[4096] __attribute__((__aligned__(16)));
};
# 66 "/usr/include/aarch64-linux-gnu/asm/sigcontext.h" 3 4
struct _aarch64_ctx {
 __u32 magic;
 __u32 size;
};



struct fpsimd_context {
 struct _aarch64_ctx head;
 __u32 fpsr;
 __u32 fpcr;
 __uint128_t vregs[32];
};
# 92 "/usr/include/aarch64-linux-gnu/asm/sigcontext.h" 3 4
struct esr_context {
 struct _aarch64_ctx head;
 __u64 esr;
};
# 125 "/usr/include/aarch64-linux-gnu/asm/sigcontext.h" 3 4
struct extra_context {
 struct _aarch64_ctx head;
 __u64 datap;
 __u32 size;
 __u32 __reserved[3];
};



struct sve_context {
 struct _aarch64_ctx head;
 __u16 vl;
 __u16 __reserved[3];
};



# 1 "/usr/include/aarch64-linux-gnu/asm/sve_context.h" 1 3 4
# 143 "/usr/include/aarch64-linux-gnu/asm/sigcontext.h" 2 3 4
# 31 "/usr/include/aarch64-linux-gnu/bits/sigcontext.h" 2 3 4



# 1 "/usr/lib/gcc/aarch64-linux-gnu/11/include/stddef.h" 1 3 4
# 35 "/usr/include/aarch64-linux-gnu/bits/sigcontext.h" 2 3 4
# 302 "/usr/include/signal.h" 2 3 4


extern int sigreturn (struct sigcontext *__scp) __attribute__ ((__nothrow__ , __leaf__));






# 1 "/usr/lib/gcc/aarch64-linux-gnu/11/include/stddef.h" 1 3 4
# 312 "/usr/include/signal.h" 2 3 4

# 1 "/usr/include/aarch64-linux-gnu/bits/types/stack_t.h" 1 3 4
# 23 "/usr/include/aarch64-linux-gnu/bits/types/stack_t.h" 3 4
# 1 "/usr/lib/gcc/aarch64-linux-gnu/11/include/stddef.h" 1 3 4
# 24 "/usr/include/aarch64-linux-gnu/bits/types/stack_t.h" 2 3 4


typedef struct
  {
    void *ss_sp;
    int ss_flags;
    size_t ss_size;
  } stack_t;
# 314 "/usr/include/signal.h" 2 3 4


# 1 "/usr/include/aarch64-linux-gnu/sys/ucontext.h" 1 3 4
# 36 "/usr/include/aarch64-linux-gnu/sys/ucontext.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/sys/procfs.h" 1 3 4
# 33 "/usr/include/aarch64-linux-gnu/sys/procfs.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/sys/time.h" 1 3 4
# 25 "/usr/include/aarch64-linux-gnu/sys/time.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/types/struct_timeval.h" 1 3 4







struct timeval
{




  __time_t tv_sec;
  __suseconds_t tv_usec;

};
# 26 "/usr/include/aarch64-linux-gnu/sys/time.h" 2 3 4


typedef __suseconds_t suseconds_t;



# 1 "/usr/include/aarch64-linux-gnu/sys/select.h" 1 3 4
# 30 "/usr/include/aarch64-linux-gnu/sys/select.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/select.h" 1 3 4
# 31 "/usr/include/aarch64-linux-gnu/sys/select.h" 2 3 4
# 49 "/usr/include/aarch64-linux-gnu/sys/select.h" 3 4
typedef long int __fd_mask;
# 59 "/usr/include/aarch64-linux-gnu/sys/select.h" 3 4
typedef struct
  {



    __fd_mask fds_bits[1024 / (8 * (int) sizeof (__fd_mask))];





  } fd_set;






typedef __fd_mask fd_mask;
# 91 "/usr/include/aarch64-linux-gnu/sys/select.h" 3 4

# 102 "/usr/include/aarch64-linux-gnu/sys/select.h" 3 4
extern int select (int __nfds, fd_set *__restrict __readfds,
     fd_set *__restrict __writefds,
     fd_set *__restrict __exceptfds,
     struct timeval *__restrict __timeout);
# 127 "/usr/include/aarch64-linux-gnu/sys/select.h" 3 4
extern int pselect (int __nfds, fd_set *__restrict __readfds,
      fd_set *__restrict __writefds,
      fd_set *__restrict __exceptfds,
      const struct timespec *__restrict __timeout,
      const __sigset_t *__restrict __sigmask);
# 150 "/usr/include/aarch64-linux-gnu/sys/select.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/select2.h" 1 3 4
# 24 "/usr/include/aarch64-linux-gnu/bits/select2.h" 3 4
extern long int __fdelt_chk (long int __d);
extern long int __fdelt_warn (long int __d)
  __attribute__((__warning__ ("bit outside of fd_set selected")));
# 151 "/usr/include/aarch64-linux-gnu/sys/select.h" 2 3 4



# 33 "/usr/include/aarch64-linux-gnu/sys/time.h" 2 3 4


# 52 "/usr/include/aarch64-linux-gnu/sys/time.h" 3 4
struct timezone
  {
    int tz_minuteswest;
    int tz_dsttime;
  };
# 67 "/usr/include/aarch64-linux-gnu/sys/time.h" 3 4
extern int gettimeofday (struct timeval *__restrict __tv,
    void *__restrict __tz) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 86 "/usr/include/aarch64-linux-gnu/sys/time.h" 3 4
extern int settimeofday (const struct timeval *__tv,
    const struct timezone *__tz)
     __attribute__ ((__nothrow__ , __leaf__));





extern int adjtime (const struct timeval *__delta,
      struct timeval *__olddelta) __attribute__ ((__nothrow__ , __leaf__));
# 114 "/usr/include/aarch64-linux-gnu/sys/time.h" 3 4
enum __itimer_which
  {

    ITIMER_REAL = 0,


    ITIMER_VIRTUAL = 1,



    ITIMER_PROF = 2

  };



struct itimerval
  {

    struct timeval it_interval;

    struct timeval it_value;
  };




typedef enum __itimer_which __itimer_which_t;







extern int getitimer (__itimer_which_t __which,
        struct itimerval *__value) __attribute__ ((__nothrow__ , __leaf__));




extern int setitimer (__itimer_which_t __which,
        const struct itimerval *__restrict __new,
        struct itimerval *__restrict __old) __attribute__ ((__nothrow__ , __leaf__));




extern int utimes (const char *__file, const struct timeval __tvp[2])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 189 "/usr/include/aarch64-linux-gnu/sys/time.h" 3 4
extern int lutimes (const char *__file, const struct timeval __tvp[2])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int futimes (int __fd, const struct timeval __tvp[2]) __attribute__ ((__nothrow__ , __leaf__));
# 214 "/usr/include/aarch64-linux-gnu/sys/time.h" 3 4
extern int futimesat (int __fd, const char *__file,
        const struct timeval __tvp[2]) __attribute__ ((__nothrow__ , __leaf__));
# 258 "/usr/include/aarch64-linux-gnu/sys/time.h" 3 4

# 34 "/usr/include/aarch64-linux-gnu/sys/procfs.h" 2 3 4
# 1 "/usr/include/aarch64-linux-gnu/sys/types.h" 1 3 4
# 27 "/usr/include/aarch64-linux-gnu/sys/types.h" 3 4






typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;


typedef __loff_t loff_t;
# 59 "/usr/include/aarch64-linux-gnu/sys/types.h" 3 4
typedef __dev_t dev_t;
# 74 "/usr/include/aarch64-linux-gnu/sys/types.h" 3 4
typedef __nlink_t nlink_t;
# 103 "/usr/include/aarch64-linux-gnu/sys/types.h" 3 4
typedef __id_t id_t;




typedef __ssize_t ssize_t;





typedef __daddr_t daddr_t;
typedef __caddr_t caddr_t;





typedef __key_t key_t;




# 1 "/usr/include/aarch64-linux-gnu/bits/types/clock_t.h" 1 3 4






typedef __clock_t clock_t;
# 127 "/usr/include/aarch64-linux-gnu/sys/types.h" 2 3 4

# 1 "/usr/include/aarch64-linux-gnu/bits/types/clockid_t.h" 1 3 4






typedef __clockid_t clockid_t;
# 129 "/usr/include/aarch64-linux-gnu/sys/types.h" 2 3 4

# 1 "/usr/include/aarch64-linux-gnu/bits/types/timer_t.h" 1 3 4






typedef __timer_t timer_t;
# 131 "/usr/include/aarch64-linux-gnu/sys/types.h" 2 3 4



typedef __useconds_t useconds_t;
# 144 "/usr/include/aarch64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/lib/gcc/aarch64-linux-gnu/11/include/stddef.h" 1 3 4
# 145 "/usr/include/aarch64-linux-gnu/sys/types.h" 2 3 4



typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;







typedef __uint8_t u_int8_t;
typedef __uint16_t u_int16_t;
typedef __uint32_t u_int32_t;
typedef __uint64_t u_int64_t;


typedef int register_t __attribute__ ((__mode__ (__word__)));
# 176 "/usr/include/aarch64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/include/endian.h" 1 3 4
# 35 "/usr/include/endian.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/byteswap.h" 1 3 4
# 33 "/usr/include/aarch64-linux-gnu/bits/byteswap.h" 3 4
static __inline __uint16_t
__bswap_16 (__uint16_t __bsx)
{

  return __builtin_bswap16 (__bsx);



}






static __inline __uint32_t
__bswap_32 (__uint32_t __bsx)
{

  return __builtin_bswap32 (__bsx);



}
# 69 "/usr/include/aarch64-linux-gnu/bits/byteswap.h" 3 4
__extension__ static __inline __uint64_t
__bswap_64 (__uint64_t __bsx)
{

  return __builtin_bswap64 (__bsx);



}
# 36 "/usr/include/endian.h" 2 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/uintn-identity.h" 1 3 4
# 32 "/usr/include/aarch64-linux-gnu/bits/uintn-identity.h" 3 4
static __inline __uint16_t
__uint16_identity (__uint16_t __x)
{
  return __x;
}

static __inline __uint32_t
__uint32_identity (__uint32_t __x)
{
  return __x;
}

static __inline __uint64_t
__uint64_identity (__uint64_t __x)
{
  return __x;
}
# 37 "/usr/include/endian.h" 2 3 4
# 177 "/usr/include/aarch64-linux-gnu/sys/types.h" 2 3 4
# 185 "/usr/include/aarch64-linux-gnu/sys/types.h" 3 4
typedef __blksize_t blksize_t;
# 205 "/usr/include/aarch64-linux-gnu/sys/types.h" 3 4
typedef __blkcnt64_t blkcnt_t;



typedef __fsblkcnt64_t fsblkcnt_t;



typedef __fsfilcnt64_t fsfilcnt_t;





typedef __blkcnt64_t blkcnt64_t;
typedef __fsblkcnt64_t fsblkcnt64_t;
typedef __fsfilcnt64_t fsfilcnt64_t;





# 1 "/usr/include/aarch64-linux-gnu/bits/pthreadtypes.h" 1 3 4
# 23 "/usr/include/aarch64-linux-gnu/bits/pthreadtypes.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/thread-shared-types.h" 1 3 4
# 44 "/usr/include/aarch64-linux-gnu/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/pthreadtypes-arch.h" 1 3 4
# 45 "/usr/include/aarch64-linux-gnu/bits/thread-shared-types.h" 2 3 4

# 1 "/usr/include/aarch64-linux-gnu/bits/atomic_wide_counter.h" 1 3 4
# 25 "/usr/include/aarch64-linux-gnu/bits/atomic_wide_counter.h" 3 4
typedef union
{
  __extension__ unsigned long long int __value64;
  struct
  {
    unsigned int __low;
    unsigned int __high;
  } __value32;
} __atomic_wide_counter;
# 47 "/usr/include/aarch64-linux-gnu/bits/thread-shared-types.h" 2 3 4




typedef struct __pthread_internal_list
{
  struct __pthread_internal_list *__prev;
  struct __pthread_internal_list *__next;
} __pthread_list_t;

typedef struct __pthread_internal_slist
{
  struct __pthread_internal_slist *__next;
} __pthread_slist_t;
# 76 "/usr/include/aarch64-linux-gnu/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/struct_mutex.h" 1 3 4
# 27 "/usr/include/aarch64-linux-gnu/bits/struct_mutex.h" 3 4
struct __pthread_mutex_s
{
  int __lock ;
  unsigned int __count;
  int __owner;

  unsigned int __nusers;
# 58 "/usr/include/aarch64-linux-gnu/bits/struct_mutex.h" 3 4
  int __kind;




  int __spins;
  __pthread_list_t __list;
# 74 "/usr/include/aarch64-linux-gnu/bits/struct_mutex.h" 3 4
};
# 77 "/usr/include/aarch64-linux-gnu/bits/thread-shared-types.h" 2 3 4
# 89 "/usr/include/aarch64-linux-gnu/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/struct_rwlock.h" 1 3 4
# 23 "/usr/include/aarch64-linux-gnu/bits/struct_rwlock.h" 3 4
struct __pthread_rwlock_arch_t
{
  unsigned int __readers;
  unsigned int __writers;
  unsigned int __wrphase_futex;
  unsigned int __writers_futex;
  unsigned int __pad3;
  unsigned int __pad4;
  int __cur_writer;
  int __shared;
  unsigned long int __pad1;
  unsigned long int __pad2;
  unsigned int __flags;
};
# 90 "/usr/include/aarch64-linux-gnu/bits/thread-shared-types.h" 2 3 4




struct __pthread_cond_s
{
  __atomic_wide_counter __wseq;
  __atomic_wide_counter __g1_start;
  unsigned int __g_refs[2] ;
  unsigned int __g_size[2];
  unsigned int __g1_orig_size;
  unsigned int __wrefs;
  unsigned int __g_signals[2];
};

typedef unsigned int __tss_t;
typedef unsigned long int __thrd_t;

typedef struct
{
  int __data ;
} __once_flag;
# 24 "/usr/include/aarch64-linux-gnu/bits/pthreadtypes.h" 2 3 4



typedef unsigned long int pthread_t;




typedef union
{
  char __size[8];
  int __align;
} pthread_mutexattr_t;




typedef union
{
  char __size[8];
  int __align;
} pthread_condattr_t;



typedef unsigned int pthread_key_t;



typedef int pthread_once_t;


union pthread_attr_t
{
  char __size[64];
  long int __align;
};






typedef union
{
  struct __pthread_mutex_s __data;
  char __size[48];
  long int __align;
} pthread_mutex_t;


typedef union
{
  struct __pthread_cond_s __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;





typedef union
{
  struct __pthread_rwlock_arch_t __data;
  char __size[56];
  long int __align;
} pthread_rwlock_t;

typedef union
{
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;





typedef volatile int pthread_spinlock_t;




typedef union
{
  char __size[32];
  long int __align;
} pthread_barrier_t;

typedef union
{
  char __size[8];
  int __align;
} pthread_barrierattr_t;
# 228 "/usr/include/aarch64-linux-gnu/sys/types.h" 2 3 4



# 35 "/usr/include/aarch64-linux-gnu/sys/procfs.h" 2 3 4
# 1 "/usr/include/aarch64-linux-gnu/sys/user.h" 1 3 4
# 22 "/usr/include/aarch64-linux-gnu/sys/user.h" 3 4
struct user_regs_struct
{
  unsigned long long regs[31];
  unsigned long long sp;
  unsigned long long pc;
  unsigned long long pstate;
};

struct user_fpsimd_struct
{
  __uint128_t vregs[32];
  unsigned int fpsr;
  unsigned int fpcr;
};
# 36 "/usr/include/aarch64-linux-gnu/sys/procfs.h" 2 3 4




# 1 "/usr/include/aarch64-linux-gnu/bits/procfs.h" 1 3 4
# 25 "/usr/include/aarch64-linux-gnu/bits/procfs.h" 3 4
typedef __uint64_t elf_greg_t;






typedef elf_greg_t elf_gregset_t[(sizeof (struct user_regs_struct) / sizeof (elf_greg_t))];


typedef struct user_fpsimd_struct elf_fpregset_t;
# 41 "/usr/include/aarch64-linux-gnu/sys/procfs.h" 2 3 4



# 1 "/usr/include/aarch64-linux-gnu/bits/procfs-id.h" 1 3 4
# 24 "/usr/include/aarch64-linux-gnu/bits/procfs-id.h" 3 4
typedef unsigned int __pr_uid_t;
typedef unsigned int __pr_gid_t;
# 45 "/usr/include/aarch64-linux-gnu/sys/procfs.h" 2 3 4




struct elf_siginfo
  {
    int si_signo;
    int si_code;
    int si_errno;
  };
# 63 "/usr/include/aarch64-linux-gnu/sys/procfs.h" 3 4
struct elf_prstatus
  {
    struct elf_siginfo pr_info;
    short int pr_cursig;
    unsigned long int pr_sigpend;
    unsigned long int pr_sighold;
    __pid_t pr_pid;
    __pid_t pr_ppid;
    __pid_t pr_pgrp;
    __pid_t pr_sid;
    struct timeval pr_utime;
    struct timeval pr_stime;
    struct timeval pr_cutime;
    struct timeval pr_cstime;
    elf_gregset_t pr_reg;
    int pr_fpvalid;
  };




struct elf_prpsinfo
  {
    char pr_state;
    char pr_sname;
    char pr_zomb;
    char pr_nice;
    unsigned long int pr_flag;
    __pr_uid_t pr_uid;
    __pr_gid_t pr_gid;
    int pr_pid, pr_ppid, pr_pgrp, pr_sid;

    char pr_fname[16];
    char pr_psargs[(80)];
  };






typedef void *psaddr_t;

# 1 "/usr/include/aarch64-linux-gnu/bits/procfs-prregset.h" 1 3 4
# 24 "/usr/include/aarch64-linux-gnu/bits/procfs-prregset.h" 3 4
typedef elf_gregset_t __prgregset_t;
typedef elf_fpregset_t __prfpregset_t;
# 107 "/usr/include/aarch64-linux-gnu/sys/procfs.h" 2 3 4


typedef __prgregset_t prgregset_t;
typedef __prfpregset_t prfpregset_t;



typedef __pid_t lwpid_t;


typedef struct elf_prstatus prstatus_t;
typedef struct elf_prpsinfo prpsinfo_t;





# 1 "/usr/include/aarch64-linux-gnu/bits/procfs-extra.h" 1 3 4
# 125 "/usr/include/aarch64-linux-gnu/sys/procfs.h" 2 3 4
# 37 "/usr/include/aarch64-linux-gnu/sys/ucontext.h" 2 3 4


typedef elf_greg_t greg_t;


typedef elf_gregset_t gregset_t;


typedef elf_fpregset_t fpregset_t;






typedef struct
  {
    unsigned long long int fault_address;
    unsigned long long int regs[31];
    unsigned long long int sp;
    unsigned long long int pc;
    unsigned long long int pstate;




    unsigned char __reserved[4096] __attribute__ ((__aligned__ (16)));
  } mcontext_t;


typedef struct ucontext_t
  {
    unsigned long uc_flags;
    struct ucontext_t *uc_link;
    stack_t uc_stack;
    sigset_t uc_sigmask;
    mcontext_t uc_mcontext;
  } ucontext_t;
# 317 "/usr/include/signal.h" 2 3 4







extern int siginterrupt (int __sig, int __interrupt) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__deprecated__ ("Use sigaction with SA_RESTART instead")));

# 1 "/usr/include/aarch64-linux-gnu/bits/sigstack.h" 1 3 4
# 328 "/usr/include/signal.h" 2 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/sigstksz.h" 1 3 4
# 24 "/usr/include/aarch64-linux-gnu/bits/sigstksz.h" 3 4
# 1 "/usr/include/unistd.h" 1 3 4
# 27 "/usr/include/unistd.h" 3 4

# 202 "/usr/include/unistd.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/posix_opt.h" 1 3 4
# 203 "/usr/include/unistd.h" 2 3 4



# 1 "/usr/include/aarch64-linux-gnu/bits/environments.h" 1 3 4
# 22 "/usr/include/aarch64-linux-gnu/bits/environments.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/wordsize.h" 1 3 4
# 23 "/usr/include/aarch64-linux-gnu/bits/environments.h" 2 3 4
# 207 "/usr/include/unistd.h" 2 3 4
# 226 "/usr/include/unistd.h" 3 4
# 1 "/usr/lib/gcc/aarch64-linux-gnu/11/include/stddef.h" 1 3 4
# 227 "/usr/include/unistd.h" 2 3 4
# 274 "/usr/include/unistd.h" 3 4
typedef __socklen_t socklen_t;
# 287 "/usr/include/unistd.h" 3 4
extern int access (const char *__name, int __type) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));




extern int euidaccess (const char *__name, int __type)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int eaccess (const char *__name, int __type)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int execveat (int __fd, const char *__path, char *const __argv[],
                     char *const __envp[], int __flags)
    __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));






extern int faccessat (int __fd, const char *__file, int __type, int __flag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2))) __attribute__ ((__warn_unused_result__));
# 342 "/usr/include/unistd.h" 3 4
extern __off64_t lseek (int __fd, __off64_t __offset, int __whence) __asm__ ("" "lseek64") __attribute__ ((__nothrow__ , __leaf__))

             ;





extern __off64_t lseek64 (int __fd, __off64_t __offset, int __whence)
     __attribute__ ((__nothrow__ , __leaf__));






extern int close (int __fd);




extern void closefrom (int __lowfd) __attribute__ ((__nothrow__ , __leaf__));







extern ssize_t read (int __fd, void *__buf, size_t __nbytes) __attribute__ ((__warn_unused_result__))
    __attribute__ ((__access__ (__write_only__, 2, 3)));





extern ssize_t write (int __fd, const void *__buf, size_t __n) __attribute__ ((__warn_unused_result__))
    __attribute__ ((__access__ (__read_only__, 2, 3)));
# 404 "/usr/include/unistd.h" 3 4
extern ssize_t pread (int __fd, void *__buf, size_t __nbytes, __off64_t __offset) __asm__ ("" "pread64")

               __attribute__ ((__warn_unused_result__))
    __attribute__ ((__access__ (__write_only__, 2, 3)));
extern ssize_t pwrite (int __fd, const void *__buf, size_t __nbytes, __off64_t __offset) __asm__ ("" "pwrite64")

                __attribute__ ((__warn_unused_result__))
    __attribute__ ((__access__ (__read_only__, 2, 3)));
# 422 "/usr/include/unistd.h" 3 4
extern ssize_t pread64 (int __fd, void *__buf, size_t __nbytes,
   __off64_t __offset) __attribute__ ((__warn_unused_result__))
    __attribute__ ((__access__ (__write_only__, 2, 3)));


extern ssize_t pwrite64 (int __fd, const void *__buf, size_t __n,
    __off64_t __offset) __attribute__ ((__warn_unused_result__))
    __attribute__ ((__access__ (__read_only__, 2, 3)));







extern int pipe (int __pipedes[2]) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));




extern int pipe2 (int __pipedes[2], int __flags) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));
# 452 "/usr/include/unistd.h" 3 4
extern unsigned int alarm (unsigned int __seconds) __attribute__ ((__nothrow__ , __leaf__));
# 464 "/usr/include/unistd.h" 3 4
extern unsigned int sleep (unsigned int __seconds);







extern __useconds_t ualarm (__useconds_t __value, __useconds_t __interval)
     __attribute__ ((__nothrow__ , __leaf__));






extern int usleep (__useconds_t __useconds);
# 489 "/usr/include/unistd.h" 3 4
extern int pause (void);



extern int chown (const char *__file, __uid_t __owner, __gid_t __group)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));



extern int fchown (int __fd, __uid_t __owner, __gid_t __group) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));




extern int lchown (const char *__file, __uid_t __owner, __gid_t __group)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));






extern int fchownat (int __fd, const char *__file, __uid_t __owner,
       __gid_t __group, int __flag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2))) __attribute__ ((__warn_unused_result__));



extern int chdir (const char *__path) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));



extern int fchdir (int __fd) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));
# 531 "/usr/include/unistd.h" 3 4
extern char *getcwd (char *__buf, size_t __size) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));





extern char *get_current_dir_name (void) __attribute__ ((__nothrow__ , __leaf__));







extern char *getwd (char *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__)) __attribute__ ((__warn_unused_result__))
    __attribute__ ((__access__ (__write_only__, 1)));




extern int dup (int __fd) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));


extern int dup2 (int __fd, int __fd2) __attribute__ ((__nothrow__ , __leaf__));




extern int dup3 (int __fd, int __fd2, int __flags) __attribute__ ((__nothrow__ , __leaf__));



extern char **__environ;

extern char **environ;





extern int execve (const char *__path, char *const __argv[],
     char *const __envp[]) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern int fexecve (int __fd, char *const __argv[], char *const __envp[])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));




extern int execv (const char *__path, char *const __argv[])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern int execle (const char *__path, const char *__arg, ...)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern int execl (const char *__path, const char *__arg, ...)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern int execvp (const char *__file, char *const __argv[])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern int execlp (const char *__file, const char *__arg, ...)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern int execvpe (const char *__file, char *const __argv[],
      char *const __envp[])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));





extern int nice (int __inc) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));




extern void _exit (int __status) __attribute__ ((__noreturn__));





# 1 "/usr/include/aarch64-linux-gnu/bits/confname.h" 1 3 4
# 24 "/usr/include/aarch64-linux-gnu/bits/confname.h" 3 4
enum
  {
    _PC_LINK_MAX,

    _PC_MAX_CANON,

    _PC_MAX_INPUT,

    _PC_NAME_MAX,

    _PC_PATH_MAX,

    _PC_PIPE_BUF,

    _PC_CHOWN_RESTRICTED,

    _PC_NO_TRUNC,

    _PC_VDISABLE,

    _PC_SYNC_IO,

    _PC_ASYNC_IO,

    _PC_PRIO_IO,

    _PC_SOCK_MAXBUF,

    _PC_FILESIZEBITS,

    _PC_REC_INCR_XFER_SIZE,

    _PC_REC_MAX_XFER_SIZE,

    _PC_REC_MIN_XFER_SIZE,

    _PC_REC_XFER_ALIGN,

    _PC_ALLOC_SIZE_MIN,

    _PC_SYMLINK_MAX,

    _PC_2_SYMLINKS

  };


enum
  {
    _SC_ARG_MAX,

    _SC_CHILD_MAX,

    _SC_CLK_TCK,

    _SC_NGROUPS_MAX,

    _SC_OPEN_MAX,

    _SC_STREAM_MAX,

    _SC_TZNAME_MAX,

    _SC_JOB_CONTROL,

    _SC_SAVED_IDS,

    _SC_REALTIME_SIGNALS,

    _SC_PRIORITY_SCHEDULING,

    _SC_TIMERS,

    _SC_ASYNCHRONOUS_IO,

    _SC_PRIORITIZED_IO,

    _SC_SYNCHRONIZED_IO,

    _SC_FSYNC,

    _SC_MAPPED_FILES,

    _SC_MEMLOCK,

    _SC_MEMLOCK_RANGE,

    _SC_MEMORY_PROTECTION,

    _SC_MESSAGE_PASSING,

    _SC_SEMAPHORES,

    _SC_SHARED_MEMORY_OBJECTS,

    _SC_AIO_LISTIO_MAX,

    _SC_AIO_MAX,

    _SC_AIO_PRIO_DELTA_MAX,

    _SC_DELAYTIMER_MAX,

    _SC_MQ_OPEN_MAX,

    _SC_MQ_PRIO_MAX,

    _SC_VERSION,

    _SC_PAGESIZE,


    _SC_RTSIG_MAX,

    _SC_SEM_NSEMS_MAX,

    _SC_SEM_VALUE_MAX,

    _SC_SIGQUEUE_MAX,

    _SC_TIMER_MAX,




    _SC_BC_BASE_MAX,

    _SC_BC_DIM_MAX,

    _SC_BC_SCALE_MAX,

    _SC_BC_STRING_MAX,

    _SC_COLL_WEIGHTS_MAX,

    _SC_EQUIV_CLASS_MAX,

    _SC_EXPR_NEST_MAX,

    _SC_LINE_MAX,

    _SC_RE_DUP_MAX,

    _SC_CHARCLASS_NAME_MAX,


    _SC_2_VERSION,

    _SC_2_C_BIND,

    _SC_2_C_DEV,

    _SC_2_FORT_DEV,

    _SC_2_FORT_RUN,

    _SC_2_SW_DEV,

    _SC_2_LOCALEDEF,


    _SC_PII,

    _SC_PII_XTI,

    _SC_PII_SOCKET,

    _SC_PII_INTERNET,

    _SC_PII_OSI,

    _SC_POLL,

    _SC_SELECT,

    _SC_UIO_MAXIOV,

    _SC_IOV_MAX = _SC_UIO_MAXIOV,

    _SC_PII_INTERNET_STREAM,

    _SC_PII_INTERNET_DGRAM,

    _SC_PII_OSI_COTS,

    _SC_PII_OSI_CLTS,

    _SC_PII_OSI_M,

    _SC_T_IOV_MAX,



    _SC_THREADS,

    _SC_THREAD_SAFE_FUNCTIONS,

    _SC_GETGR_R_SIZE_MAX,

    _SC_GETPW_R_SIZE_MAX,

    _SC_LOGIN_NAME_MAX,

    _SC_TTY_NAME_MAX,

    _SC_THREAD_DESTRUCTOR_ITERATIONS,

    _SC_THREAD_KEYS_MAX,

    _SC_THREAD_STACK_MIN,

    _SC_THREAD_THREADS_MAX,

    _SC_THREAD_ATTR_STACKADDR,

    _SC_THREAD_ATTR_STACKSIZE,

    _SC_THREAD_PRIORITY_SCHEDULING,

    _SC_THREAD_PRIO_INHERIT,

    _SC_THREAD_PRIO_PROTECT,

    _SC_THREAD_PROCESS_SHARED,


    _SC_NPROCESSORS_CONF,

    _SC_NPROCESSORS_ONLN,

    _SC_PHYS_PAGES,

    _SC_AVPHYS_PAGES,

    _SC_ATEXIT_MAX,

    _SC_PASS_MAX,


    _SC_XOPEN_VERSION,

    _SC_XOPEN_XCU_VERSION,

    _SC_XOPEN_UNIX,

    _SC_XOPEN_CRYPT,

    _SC_XOPEN_ENH_I18N,

    _SC_XOPEN_SHM,


    _SC_2_CHAR_TERM,

    _SC_2_C_VERSION,

    _SC_2_UPE,


    _SC_XOPEN_XPG2,

    _SC_XOPEN_XPG3,

    _SC_XOPEN_XPG4,


    _SC_CHAR_BIT,

    _SC_CHAR_MAX,

    _SC_CHAR_MIN,

    _SC_INT_MAX,

    _SC_INT_MIN,

    _SC_LONG_BIT,

    _SC_WORD_BIT,

    _SC_MB_LEN_MAX,

    _SC_NZERO,

    _SC_SSIZE_MAX,

    _SC_SCHAR_MAX,

    _SC_SCHAR_MIN,

    _SC_SHRT_MAX,

    _SC_SHRT_MIN,

    _SC_UCHAR_MAX,

    _SC_UINT_MAX,

    _SC_ULONG_MAX,

    _SC_USHRT_MAX,


    _SC_NL_ARGMAX,

    _SC_NL_LANGMAX,

    _SC_NL_MSGMAX,

    _SC_NL_NMAX,

    _SC_NL_SETMAX,

    _SC_NL_TEXTMAX,


    _SC_XBS5_ILP32_OFF32,

    _SC_XBS5_ILP32_OFFBIG,

    _SC_XBS5_LP64_OFF64,

    _SC_XBS5_LPBIG_OFFBIG,


    _SC_XOPEN_LEGACY,

    _SC_XOPEN_REALTIME,

    _SC_XOPEN_REALTIME_THREADS,


    _SC_ADVISORY_INFO,

    _SC_BARRIERS,

    _SC_BASE,

    _SC_C_LANG_SUPPORT,

    _SC_C_LANG_SUPPORT_R,

    _SC_CLOCK_SELECTION,

    _SC_CPUTIME,

    _SC_THREAD_CPUTIME,

    _SC_DEVICE_IO,

    _SC_DEVICE_SPECIFIC,

    _SC_DEVICE_SPECIFIC_R,

    _SC_FD_MGMT,

    _SC_FIFO,

    _SC_PIPE,

    _SC_FILE_ATTRIBUTES,

    _SC_FILE_LOCKING,

    _SC_FILE_SYSTEM,

    _SC_MONOTONIC_CLOCK,

    _SC_MULTI_PROCESS,

    _SC_SINGLE_PROCESS,

    _SC_NETWORKING,

    _SC_READER_WRITER_LOCKS,

    _SC_SPIN_LOCKS,

    _SC_REGEXP,

    _SC_REGEX_VERSION,

    _SC_SHELL,

    _SC_SIGNALS,

    _SC_SPAWN,

    _SC_SPORADIC_SERVER,

    _SC_THREAD_SPORADIC_SERVER,

    _SC_SYSTEM_DATABASE,

    _SC_SYSTEM_DATABASE_R,

    _SC_TIMEOUTS,

    _SC_TYPED_MEMORY_OBJECTS,

    _SC_USER_GROUPS,

    _SC_USER_GROUPS_R,

    _SC_2_PBS,

    _SC_2_PBS_ACCOUNTING,

    _SC_2_PBS_LOCATE,

    _SC_2_PBS_MESSAGE,

    _SC_2_PBS_TRACK,

    _SC_SYMLOOP_MAX,

    _SC_STREAMS,

    _SC_2_PBS_CHECKPOINT,


    _SC_V6_ILP32_OFF32,

    _SC_V6_ILP32_OFFBIG,

    _SC_V6_LP64_OFF64,

    _SC_V6_LPBIG_OFFBIG,


    _SC_HOST_NAME_MAX,

    _SC_TRACE,

    _SC_TRACE_EVENT_FILTER,

    _SC_TRACE_INHERIT,

    _SC_TRACE_LOG,


    _SC_LEVEL1_ICACHE_SIZE,

    _SC_LEVEL1_ICACHE_ASSOC,

    _SC_LEVEL1_ICACHE_LINESIZE,

    _SC_LEVEL1_DCACHE_SIZE,

    _SC_LEVEL1_DCACHE_ASSOC,

    _SC_LEVEL1_DCACHE_LINESIZE,

    _SC_LEVEL2_CACHE_SIZE,

    _SC_LEVEL2_CACHE_ASSOC,

    _SC_LEVEL2_CACHE_LINESIZE,

    _SC_LEVEL3_CACHE_SIZE,

    _SC_LEVEL3_CACHE_ASSOC,

    _SC_LEVEL3_CACHE_LINESIZE,

    _SC_LEVEL4_CACHE_SIZE,

    _SC_LEVEL4_CACHE_ASSOC,

    _SC_LEVEL4_CACHE_LINESIZE,



    _SC_IPV6 = _SC_LEVEL1_ICACHE_SIZE + 50,

    _SC_RAW_SOCKETS,


    _SC_V7_ILP32_OFF32,

    _SC_V7_ILP32_OFFBIG,

    _SC_V7_LP64_OFF64,

    _SC_V7_LPBIG_OFFBIG,


    _SC_SS_REPL_MAX,


    _SC_TRACE_EVENT_NAME_MAX,

    _SC_TRACE_NAME_MAX,

    _SC_TRACE_SYS_MAX,

    _SC_TRACE_USER_EVENT_MAX,


    _SC_XOPEN_STREAMS,


    _SC_THREAD_ROBUST_PRIO_INHERIT,

    _SC_THREAD_ROBUST_PRIO_PROTECT,


    _SC_MINSIGSTKSZ,


    _SC_SIGSTKSZ

  };


enum
  {
    _CS_PATH,


    _CS_V6_WIDTH_RESTRICTED_ENVS,



    _CS_GNU_LIBC_VERSION,

    _CS_GNU_LIBPTHREAD_VERSION,


    _CS_V5_WIDTH_RESTRICTED_ENVS,



    _CS_V7_WIDTH_RESTRICTED_ENVS,



    _CS_LFS_CFLAGS = 1000,

    _CS_LFS_LDFLAGS,

    _CS_LFS_LIBS,

    _CS_LFS_LINTFLAGS,

    _CS_LFS64_CFLAGS,

    _CS_LFS64_LDFLAGS,

    _CS_LFS64_LIBS,

    _CS_LFS64_LINTFLAGS,


    _CS_XBS5_ILP32_OFF32_CFLAGS = 1100,

    _CS_XBS5_ILP32_OFF32_LDFLAGS,

    _CS_XBS5_ILP32_OFF32_LIBS,

    _CS_XBS5_ILP32_OFF32_LINTFLAGS,

    _CS_XBS5_ILP32_OFFBIG_CFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LDFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LIBS,

    _CS_XBS5_ILP32_OFFBIG_LINTFLAGS,

    _CS_XBS5_LP64_OFF64_CFLAGS,

    _CS_XBS5_LP64_OFF64_LDFLAGS,

    _CS_XBS5_LP64_OFF64_LIBS,

    _CS_XBS5_LP64_OFF64_LINTFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_CFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LDFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LIBS,

    _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V6_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LIBS,

    _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V6_LP64_OFF64_CFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LIBS,

    _CS_POSIX_V6_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V7_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V7_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V7_ILP32_OFF32_LIBS,

    _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V7_LP64_OFF64_CFLAGS,

    _CS_POSIX_V7_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V7_LP64_OFF64_LIBS,

    _CS_POSIX_V7_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS,


    _CS_V6_ENV,

    _CS_V7_ENV

  };
# 631 "/usr/include/unistd.h" 2 3 4


extern long int pathconf (const char *__path, int __name)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern long int fpathconf (int __fd, int __name) __attribute__ ((__nothrow__ , __leaf__));


extern long int sysconf (int __name) __attribute__ ((__nothrow__ , __leaf__));



extern size_t confstr (int __name, char *__buf, size_t __len) __attribute__ ((__nothrow__ , __leaf__))
    __attribute__ ((__access__ (__write_only__, 2, 3)));




extern __pid_t getpid (void) __attribute__ ((__nothrow__ , __leaf__));


extern __pid_t getppid (void) __attribute__ ((__nothrow__ , __leaf__));


extern __pid_t getpgrp (void) __attribute__ ((__nothrow__ , __leaf__));


extern __pid_t __getpgid (__pid_t __pid) __attribute__ ((__nothrow__ , __leaf__));

extern __pid_t getpgid (__pid_t __pid) __attribute__ ((__nothrow__ , __leaf__));






extern int setpgid (__pid_t __pid, __pid_t __pgid) __attribute__ ((__nothrow__ , __leaf__));
# 682 "/usr/include/unistd.h" 3 4
extern int setpgrp (void) __attribute__ ((__nothrow__ , __leaf__));






extern __pid_t setsid (void) __attribute__ ((__nothrow__ , __leaf__));



extern __pid_t getsid (__pid_t __pid) __attribute__ ((__nothrow__ , __leaf__));



extern __uid_t getuid (void) __attribute__ ((__nothrow__ , __leaf__));


extern __uid_t geteuid (void) __attribute__ ((__nothrow__ , __leaf__));


extern __gid_t getgid (void) __attribute__ ((__nothrow__ , __leaf__));


extern __gid_t getegid (void) __attribute__ ((__nothrow__ , __leaf__));




extern int getgroups (int __size, __gid_t __list[]) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__))
    __attribute__ ((__access__ (__write_only__, 2, 1)));


extern int group_member (__gid_t __gid) __attribute__ ((__nothrow__ , __leaf__));






extern int setuid (__uid_t __uid) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));




extern int setreuid (__uid_t __ruid, __uid_t __euid) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));




extern int seteuid (__uid_t __uid) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));






extern int setgid (__gid_t __gid) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));




extern int setregid (__gid_t __rgid, __gid_t __egid) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));




extern int setegid (__gid_t __gid) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));





extern int getresuid (__uid_t *__ruid, __uid_t *__euid, __uid_t *__suid)
     __attribute__ ((__nothrow__ , __leaf__));



extern int getresgid (__gid_t *__rgid, __gid_t *__egid, __gid_t *__sgid)
     __attribute__ ((__nothrow__ , __leaf__));



extern int setresuid (__uid_t __ruid, __uid_t __euid, __uid_t __suid)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));



extern int setresgid (__gid_t __rgid, __gid_t __egid, __gid_t __sgid)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));






extern __pid_t fork (void) __attribute__ ((__nothrow__));







extern __pid_t vfork (void) __attribute__ ((__nothrow__ , __leaf__));






extern __pid_t _Fork (void) __attribute__ ((__nothrow__ , __leaf__));





extern char *ttyname (int __fd) __attribute__ ((__nothrow__ , __leaf__));



extern int ttyname_r (int __fd, char *__buf, size_t __buflen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2))) __attribute__ ((__warn_unused_result__))
     __attribute__ ((__access__ (__write_only__, 2, 3)));



extern int isatty (int __fd) __attribute__ ((__nothrow__ , __leaf__));




extern int ttyslot (void) __attribute__ ((__nothrow__ , __leaf__));




extern int link (const char *__from, const char *__to)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__warn_unused_result__));




extern int linkat (int __fromfd, const char *__from, int __tofd,
     const char *__to, int __flags)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4))) __attribute__ ((__warn_unused_result__));




extern int symlink (const char *__from, const char *__to)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__warn_unused_result__));




extern ssize_t readlink (const char *__restrict __path,
    char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__warn_unused_result__))
     __attribute__ ((__access__ (__write_only__, 2, 3)));





extern int symlinkat (const char *__from, int __tofd,
        const char *__to) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3))) __attribute__ ((__warn_unused_result__));


extern ssize_t readlinkat (int __fd, const char *__restrict __path,
      char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3))) __attribute__ ((__warn_unused_result__))
     __attribute__ ((__access__ (__write_only__, 3, 4)));



extern int unlink (const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int unlinkat (int __fd, const char *__name, int __flag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



extern int rmdir (const char *__path) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern __pid_t tcgetpgrp (int __fd) __attribute__ ((__nothrow__ , __leaf__));


extern int tcsetpgrp (int __fd, __pid_t __pgrp_id) __attribute__ ((__nothrow__ , __leaf__));






extern char *getlogin (void);







extern int getlogin_r (char *__name, size_t __name_len) __attribute__ ((__nonnull__ (1)))
    __attribute__ ((__access__ (__write_only__, 1, 2)));




extern int setlogin (const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));







# 1 "/usr/include/aarch64-linux-gnu/bits/getopt_posix.h" 1 3 4
# 29 "/usr/include/aarch64-linux-gnu/bits/getopt_posix.h" 3 4

# 49 "/usr/include/aarch64-linux-gnu/bits/getopt_posix.h" 3 4

# 904 "/usr/include/unistd.h" 2 3 4







extern int gethostname (char *__name, size_t __len) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)))
    __attribute__ ((__access__ (__write_only__, 1, 2)));






extern int sethostname (const char *__name, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__)) __attribute__ ((__access__ (__read_only__, 1, 2)));



extern int sethostid (long int __id) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));





extern int getdomainname (char *__name, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__))
     __attribute__ ((__access__ (__write_only__, 1, 2)));
extern int setdomainname (const char *__name, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__)) __attribute__ ((__access__ (__read_only__, 1, 2)));




extern int vhangup (void) __attribute__ ((__nothrow__ , __leaf__));


extern int revoke (const char *__file) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));







extern int profil (unsigned short int *__sample_buffer, size_t __size,
     size_t __offset, unsigned int __scale)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int acct (const char *__name) __attribute__ ((__nothrow__ , __leaf__));



extern char *getusershell (void) __attribute__ ((__nothrow__ , __leaf__));
extern void endusershell (void) __attribute__ ((__nothrow__ , __leaf__));
extern void setusershell (void) __attribute__ ((__nothrow__ , __leaf__));





extern int daemon (int __nochdir, int __noclose) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));






extern int chroot (const char *__path) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));



extern char *getpass (const char *__prompt) __attribute__ ((__nonnull__ (1)));







extern int fsync (int __fd);





extern int syncfs (int __fd) __attribute__ ((__nothrow__ , __leaf__));






extern long int gethostid (void);


extern void sync (void) __attribute__ ((__nothrow__ , __leaf__));





extern int getpagesize (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern int getdtablesize (void) __attribute__ ((__nothrow__ , __leaf__));
# 1030 "/usr/include/unistd.h" 3 4
extern int truncate (const char *__file, __off64_t __length) __asm__ ("" "truncate64") __attribute__ ((__nothrow__ , __leaf__))

                  __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));





extern int truncate64 (const char *__file, __off64_t __length)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 1052 "/usr/include/unistd.h" 3 4
extern int ftruncate (int __fd, __off64_t __length) __asm__ ("" "ftruncate64") __attribute__ ((__nothrow__ , __leaf__))
                   __attribute__ ((__warn_unused_result__));





extern int ftruncate64 (int __fd, __off64_t __length) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));
# 1070 "/usr/include/unistd.h" 3 4
extern int brk (void *__addr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));





extern void *sbrk (intptr_t __delta) __attribute__ ((__nothrow__ , __leaf__));
# 1091 "/usr/include/unistd.h" 3 4
extern long int syscall (long int __sysno, ...) __attribute__ ((__nothrow__ , __leaf__));
# 1142 "/usr/include/unistd.h" 3 4
ssize_t copy_file_range (int __infd, __off64_t *__pinoff,
    int __outfd, __off64_t *__poutoff,
    size_t __length, unsigned int __flags);





extern int fdatasync (int __fildes);
# 1159 "/usr/include/unistd.h" 3 4
extern char *crypt (const char *__key, const char *__salt)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));







extern void swab (const void *__restrict __from, void *__restrict __to,
    ssize_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)))
    __attribute__ ((__access__ (__read_only__, 1, 3)))
    __attribute__ ((__access__ (__write_only__, 2, 3)));
# 1198 "/usr/include/unistd.h" 3 4
int getentropy (void *__buffer, size_t __length) __attribute__ ((__warn_unused_result__))
    __attribute__ ((__access__ (__write_only__, 1, 2)));
# 1208 "/usr/include/unistd.h" 3 4
extern int close_range (unsigned int __fd, unsigned int __max_fd,
   int __flags) __attribute__ ((__nothrow__ , __leaf__));




# 1 "/usr/include/aarch64-linux-gnu/bits/unistd.h" 1 3 4
# 23 "/usr/include/aarch64-linux-gnu/bits/unistd.h" 3 4
extern ssize_t __read_chk (int __fd, void *__buf, size_t __nbytes,
      size_t __buflen)
  __attribute__ ((__warn_unused_result__)) __attribute__ ((__access__ (__write_only__, 2, 3)));
extern ssize_t __read_alias (int __fd, void *__buf, size_t __nbytes) __asm__ ("" "read")

  __attribute__ ((__warn_unused_result__)) __attribute__ ((__access__ (__write_only__, 2, 3)));
extern ssize_t __read_chk_warn (int __fd, void *__buf, size_t __nbytes, size_t __buflen) __asm__ ("" "__read_chk")


     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("read called with bigger length than size of " "the destination buffer")))
                                  ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) ssize_t
read (int __fd, void *__buf, size_t __nbytes)
{
  return ((((__typeof (__nbytes)) 0 < (__typeof (__nbytes)) -1 || (__builtin_constant_p (__nbytes) && (__nbytes) > 0)) && __builtin_constant_p ((((long unsigned int) (__nbytes)) <= (__builtin_object_size (__buf, 0)) / (sizeof (char)))) && (((long unsigned int) (__nbytes)) <= (__builtin_object_size (__buf, 0)) / (sizeof (char)))) ? __read_alias (__fd, __buf, __nbytes) : ((((__typeof (__nbytes)) 0 < (__typeof (__nbytes)) -1 || (__builtin_constant_p (__nbytes) && (__nbytes) > 0)) && __builtin_constant_p ((((long unsigned int) (__nbytes)) <= (__builtin_object_size (__buf, 0)) / (sizeof (char)))) && !(((long unsigned int) (__nbytes)) <= (__builtin_object_size (__buf, 0)) / (sizeof (char)))) ? __read_chk_warn (__fd, __buf, __nbytes, __builtin_object_size (__buf, 0)) : __read_chk (__fd, __buf, __nbytes, __builtin_object_size (__buf, 0))))

                           ;
}


extern ssize_t __pread_chk (int __fd, void *__buf, size_t __nbytes,
       __off_t __offset, size_t __bufsize)
  __attribute__ ((__warn_unused_result__)) __attribute__ ((__access__ (__write_only__, 2, 3)));
extern ssize_t __pread64_chk (int __fd, void *__buf, size_t __nbytes,
         __off64_t __offset, size_t __bufsize)
  __attribute__ ((__warn_unused_result__)) __attribute__ ((__access__ (__write_only__, 2, 3)));
extern ssize_t __pread_alias (int __fd, void *__buf, size_t __nbytes, __off_t __offset) __asm__ ("" "pread")


  __attribute__ ((__warn_unused_result__)) __attribute__ ((__access__ (__write_only__, 2, 3)));
extern ssize_t __pread64_alias (int __fd, void *__buf, size_t __nbytes, __off64_t __offset) __asm__ ("" "pread64")


  __attribute__ ((__warn_unused_result__)) __attribute__ ((__access__ (__write_only__, 2, 3)));
extern ssize_t __pread_chk_warn (int __fd, void *__buf, size_t __nbytes, __off_t __offset, size_t __bufsize) __asm__ ("" "__pread_chk")


     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("pread called with bigger length than size of " "the destination buffer")))
                                  ;
extern ssize_t __pread64_chk_warn (int __fd, void *__buf, size_t __nbytes, __off64_t __offset, size_t __bufsize) __asm__ ("" "__pread64_chk")



     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("pread64 called with bigger length than size of " "the destination buffer")))
                                  ;
# 79 "/usr/include/aarch64-linux-gnu/bits/unistd.h" 3 4
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) ssize_t
pread (int __fd, void *__buf, size_t __nbytes, __off64_t __offset)
{
  return ((((__typeof (__nbytes)) 0 < (__typeof (__nbytes)) -1 || (__builtin_constant_p (__nbytes) && (__nbytes) > 0)) && __builtin_constant_p ((((long unsigned int) (__nbytes)) <= (__builtin_object_size (__buf, 0)) / (sizeof (char)))) && (((long unsigned int) (__nbytes)) <= (__builtin_object_size (__buf, 0)) / (sizeof (char)))) ? __pread64_alias (__fd, __buf, __nbytes, __offset) : ((((__typeof (__nbytes)) 0 < (__typeof (__nbytes)) -1 || (__builtin_constant_p (__nbytes) && (__nbytes) > 0)) && __builtin_constant_p ((((long unsigned int) (__nbytes)) <= (__builtin_object_size (__buf, 0)) / (sizeof (char)))) && !(((long unsigned int) (__nbytes)) <= (__builtin_object_size (__buf, 0)) / (sizeof (char)))) ? __pread64_chk_warn (__fd, __buf, __nbytes, __offset, __builtin_object_size (__buf, 0)) : __pread64_chk (__fd, __buf, __nbytes, __offset, __builtin_object_size (__buf, 0))))

                                     ;
}



extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) ssize_t
pread64 (int __fd, void *__buf, size_t __nbytes, __off64_t __offset)
{
  return ((((__typeof (__nbytes)) 0 < (__typeof (__nbytes)) -1 || (__builtin_constant_p (__nbytes) && (__nbytes) > 0)) && __builtin_constant_p ((((long unsigned int) (__nbytes)) <= (__builtin_object_size (__buf, 0)) / (sizeof (char)))) && (((long unsigned int) (__nbytes)) <= (__builtin_object_size (__buf, 0)) / (sizeof (char)))) ? __pread64_alias (__fd, __buf, __nbytes, __offset) : ((((__typeof (__nbytes)) 0 < (__typeof (__nbytes)) -1 || (__builtin_constant_p (__nbytes) && (__nbytes) > 0)) && __builtin_constant_p ((((long unsigned int) (__nbytes)) <= (__builtin_object_size (__buf, 0)) / (sizeof (char)))) && !(((long unsigned int) (__nbytes)) <= (__builtin_object_size (__buf, 0)) / (sizeof (char)))) ? __pread64_chk_warn (__fd, __buf, __nbytes, __offset, __builtin_object_size (__buf, 0)) : __pread64_chk (__fd, __buf, __nbytes, __offset, __builtin_object_size (__buf, 0))))

                                     ;
}




extern ssize_t __readlink_chk (const char *__restrict __path,
          char *__restrict __buf, size_t __len,
          size_t __buflen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__warn_unused_result__)) __attribute__ ((__access__ (__write_only__, 2, 3)));
extern ssize_t __readlink_alias (const char *__restrict __path, char *__restrict __buf, size_t __len) __asm__ ("" "readlink") __attribute__ ((__nothrow__ , __leaf__))


     __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__warn_unused_result__)) __attribute__ ((__access__ (__write_only__, 2, 3)));
extern ssize_t __readlink_chk_warn (const char *__restrict __path, char *__restrict __buf, size_t __len, size_t __buflen) __asm__ ("" "__readlink_chk") __attribute__ ((__nothrow__ , __leaf__))



     __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("readlink called with bigger length " "than size of destination buffer")))
                                         ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__warn_unused_result__)) ssize_t
__attribute__ ((__nothrow__ , __leaf__)) readlink (const char *__restrict __path, char *__restrict __buf, size_t __len)

{
  return ((((__typeof (__len)) 0 < (__typeof (__len)) -1 || (__builtin_constant_p (__len) && (__len) > 0)) && __builtin_constant_p ((((long unsigned int) (__len)) <= (__builtin_object_size (__buf, 2 > 1)) / (sizeof (char)))) && (((long unsigned int) (__len)) <= (__builtin_object_size (__buf, 2 > 1)) / (sizeof (char)))) ? __readlink_alias (__path, __buf, __len) : ((((__typeof (__len)) 0 < (__typeof (__len)) -1 || (__builtin_constant_p (__len) && (__len) > 0)) && __builtin_constant_p ((((long unsigned int) (__len)) <= (__builtin_object_size (__buf, 2 > 1)) / (sizeof (char)))) && !(((long unsigned int) (__len)) <= (__builtin_object_size (__buf, 2 > 1)) / (sizeof (char)))) ? __readlink_chk_warn (__path, __buf, __len, __builtin_object_size (__buf, 2 > 1)) : __readlink_chk (__path, __buf, __len, __builtin_object_size (__buf, 2 > 1))))

                          ;
}



extern ssize_t __readlinkat_chk (int __fd, const char *__restrict __path,
     char *__restrict __buf, size_t __len,
     size_t __buflen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3))) __attribute__ ((__warn_unused_result__)) __attribute__ ((__access__ (__write_only__, 3, 4)));
extern ssize_t __readlinkat_alias (int __fd, const char *__restrict __path, char *__restrict __buf, size_t __len) __asm__ ("" "readlinkat") __attribute__ ((__nothrow__ , __leaf__))



     __attribute__ ((__nonnull__ (2, 3))) __attribute__ ((__warn_unused_result__)) __attribute__ ((__access__ (__write_only__, 3, 4)));
extern ssize_t __readlinkat_chk_warn (int __fd, const char *__restrict __path, char *__restrict __buf, size_t __len, size_t __buflen) __asm__ ("" "__readlinkat_chk") __attribute__ ((__nothrow__ , __leaf__))



     __attribute__ ((__nonnull__ (2, 3))) __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("readlinkat called with bigger " "length than size of destination " "buffer")))

                ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__nonnull__ (2, 3))) __attribute__ ((__warn_unused_result__)) ssize_t
__attribute__ ((__nothrow__ , __leaf__)) readlinkat (int __fd, const char *__restrict __path, char *__restrict __buf, size_t __len)

{
  return ((((__typeof (__len)) 0 < (__typeof (__len)) -1 || (__builtin_constant_p (__len) && (__len) > 0)) && __builtin_constant_p ((((long unsigned int) (__len)) <= (__builtin_object_size (__buf, 2 > 1)) / (sizeof (char)))) && (((long unsigned int) (__len)) <= (__builtin_object_size (__buf, 2 > 1)) / (sizeof (char)))) ? __readlinkat_alias (__fd, __path, __buf, __len) : ((((__typeof (__len)) 0 < (__typeof (__len)) -1 || (__builtin_constant_p (__len) && (__len) > 0)) && __builtin_constant_p ((((long unsigned int) (__len)) <= (__builtin_object_size (__buf, 2 > 1)) / (sizeof (char)))) && !(((long unsigned int) (__len)) <= (__builtin_object_size (__buf, 2 > 1)) / (sizeof (char)))) ? __readlinkat_chk_warn (__fd, __path, __buf, __len, __builtin_object_size (__buf, 2 > 1)) : __readlinkat_chk (__fd, __path, __buf, __len, __builtin_object_size (__buf, 2 > 1))))

                                ;
}


extern char *__getcwd_chk (char *__buf, size_t __size, size_t __buflen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));
extern char *__getcwd_alias (char *__buf, size_t __size) __asm__ ("" "getcwd") __attribute__ ((__nothrow__ , __leaf__))
                                              __attribute__ ((__warn_unused_result__));
extern char *__getcwd_chk_warn (char *__buf, size_t __size, size_t __buflen) __asm__ ("" "__getcwd_chk") __attribute__ ((__nothrow__ , __leaf__))


     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("getcwd caller with bigger length than size of " "destination buffer")))
                              ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) char *
__attribute__ ((__nothrow__ , __leaf__)) getcwd (char *__buf, size_t __size)
{
  return ((((__typeof (__size)) 0 < (__typeof (__size)) -1 || (__builtin_constant_p (__size) && (__size) > 0)) && __builtin_constant_p ((((long unsigned int) (__size)) <= (__builtin_object_size (__buf, 2 > 1)) / (sizeof (char)))) && (((long unsigned int) (__size)) <= (__builtin_object_size (__buf, 2 > 1)) / (sizeof (char)))) ? __getcwd_alias (__buf, __size) : ((((__typeof (__size)) 0 < (__typeof (__size)) -1 || (__builtin_constant_p (__size) && (__size) > 0)) && __builtin_constant_p ((((long unsigned int) (__size)) <= (__builtin_object_size (__buf, 2 > 1)) / (sizeof (char)))) && !(((long unsigned int) (__size)) <= (__builtin_object_size (__buf, 2 > 1)) / (sizeof (char)))) ? __getcwd_chk_warn (__buf, __size, __builtin_object_size (__buf, 2 > 1)) : __getcwd_chk (__buf, __size, __builtin_object_size (__buf, 2 > 1))))

                   ;
}


extern char *__getwd_chk (char *__buf, size_t buflen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__)) __attribute__ ((__access__ (__write_only__, 1, 2)));
extern char *__getwd_warn (char *__buf) __asm__ ("" "getwd") __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("please use getcwd instead, as getwd " "doesn't specify buffer size")))
                                         ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__)) __attribute__ ((__warn_unused_result__)) char *
__attribute__ ((__nothrow__ , __leaf__)) getwd (char *__buf)
{
  if (__builtin_object_size (__buf, 2 > 1) != (size_t) -1)
    return __getwd_chk (__buf, __builtin_object_size (__buf, 2 > 1));
  return __getwd_warn (__buf);
}


extern size_t __confstr_chk (int __name, char *__buf, size_t __len,
        size_t __buflen) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__access__ (__write_only__, 2, 3)));
extern size_t __confstr_alias (int __name, char *__buf, size_t __len) __asm__ ("" "confstr") __attribute__ ((__nothrow__ , __leaf__))

   __attribute__ ((__access__ (__write_only__, 2, 3)));
extern size_t __confstr_chk_warn (int __name, char *__buf, size_t __len, size_t __buflen) __asm__ ("" "__confstr_chk") __attribute__ ((__nothrow__ , __leaf__))


     __attribute__((__warning__ ("confstr called with bigger length than size of destination " "buffer")))
            ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) size_t
__attribute__ ((__nothrow__ , __leaf__)) confstr (int __name, char *__buf, size_t __len)
{
  return ((((__typeof (__len)) 0 < (__typeof (__len)) -1 || (__builtin_constant_p (__len) && (__len) > 0)) && __builtin_constant_p ((((long unsigned int) (__len)) <= (__builtin_object_size (__buf, 2 > 1)) / (sizeof (char)))) && (((long unsigned int) (__len)) <= (__builtin_object_size (__buf, 2 > 1)) / (sizeof (char)))) ? __confstr_alias (__name, __buf, __len) : ((((__typeof (__len)) 0 < (__typeof (__len)) -1 || (__builtin_constant_p (__len) && (__len) > 0)) && __builtin_constant_p ((((long unsigned int) (__len)) <= (__builtin_object_size (__buf, 2 > 1)) / (sizeof (char)))) && !(((long unsigned int) (__len)) <= (__builtin_object_size (__buf, 2 > 1)) / (sizeof (char)))) ? __confstr_chk_warn (__name, __buf, __len, __builtin_object_size (__buf, 2 > 1)) : __confstr_chk (__name, __buf, __len, __builtin_object_size (__buf, 2 > 1))))

                          ;
}


extern int __getgroups_chk (int __size, __gid_t __list[], size_t __listlen)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__)) __attribute__ ((__access__ (__write_only__, 2, 1)));
extern int __getgroups_alias (int __size, __gid_t __list[]) __asm__ ("" "getgroups") __attribute__ ((__nothrow__ , __leaf__))
                 __attribute__ ((__warn_unused_result__)) __attribute__ ((__access__ (__write_only__, 2, 1)));
extern int __getgroups_chk_warn (int __size, __gid_t __list[], size_t __listlen) __asm__ ("" "__getgroups_chk") __attribute__ ((__nothrow__ , __leaf__))


     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("getgroups called with bigger group count than what " "can fit into destination buffer")))
                                           ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__nothrow__ , __leaf__)) getgroups (int __size, __gid_t __list[])
{
  return ((((__typeof (__size)) 0 < (__typeof (__size)) -1 || (__builtin_constant_p (__size) && (__size) > 0)) && __builtin_constant_p ((((long unsigned int) (__size)) <= (__builtin_object_size (__list, 2 > 1)) / (sizeof (__gid_t)))) && (((long unsigned int) (__size)) <= (__builtin_object_size (__list, 2 > 1)) / (sizeof (__gid_t)))) ? __getgroups_alias (__size, __list) : ((((__typeof (__size)) 0 < (__typeof (__size)) -1 || (__builtin_constant_p (__size) && (__size) > 0)) && __builtin_constant_p ((((long unsigned int) (__size)) <= (__builtin_object_size (__list, 2 > 1)) / (sizeof (__gid_t)))) && !(((long unsigned int) (__size)) <= (__builtin_object_size (__list, 2 > 1)) / (sizeof (__gid_t)))) ? __getgroups_chk_warn (__size, __list, __builtin_object_size (__list, 2 > 1)) : __getgroups_chk (__size, __list, __builtin_object_size (__list, 2 > 1))))

                    ;
}


extern int __ttyname_r_chk (int __fd, char *__buf, size_t __buflen,
       size_t __nreal) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)))
   __attribute__ ((__access__ (__write_only__, 2, 3)));
extern int __ttyname_r_alias (int __fd, char *__buf, size_t __buflen) __asm__ ("" "ttyname_r") __attribute__ ((__nothrow__ , __leaf__))

     __attribute__ ((__nonnull__ (2)));
extern int __ttyname_r_chk_warn (int __fd, char *__buf, size_t __buflen, size_t __nreal) __asm__ ("" "__ttyname_r_chk") __attribute__ ((__nothrow__ , __leaf__))


     __attribute__ ((__nonnull__ (2))) __attribute__((__warning__ ("ttyname_r called with bigger buflen than " "size of destination buffer")))
                                  ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__nothrow__ , __leaf__)) ttyname_r (int __fd, char *__buf, size_t __buflen)
{
  return ((((__typeof (__buflen)) 0 < (__typeof (__buflen)) -1 || (__builtin_constant_p (__buflen) && (__buflen) > 0)) && __builtin_constant_p ((((long unsigned int) (__buflen)) <= (__builtin_object_size (__buf, 2 > 1)) / (sizeof (char)))) && (((long unsigned int) (__buflen)) <= (__builtin_object_size (__buf, 2 > 1)) / (sizeof (char)))) ? __ttyname_r_alias (__fd, __buf, __buflen) : ((((__typeof (__buflen)) 0 < (__typeof (__buflen)) -1 || (__builtin_constant_p (__buflen) && (__buflen) > 0)) && __builtin_constant_p ((((long unsigned int) (__buflen)) <= (__builtin_object_size (__buf, 2 > 1)) / (sizeof (char)))) && !(((long unsigned int) (__buflen)) <= (__builtin_object_size (__buf, 2 > 1)) / (sizeof (char)))) ? __ttyname_r_chk_warn (__fd, __buf, __buflen, __builtin_object_size (__buf, 2 > 1)) : __ttyname_r_chk (__fd, __buf, __buflen, __builtin_object_size (__buf, 2 > 1))))

                           ;
}



extern int __getlogin_r_chk (char *__buf, size_t __buflen, size_t __nreal)
     __attribute__ ((__nonnull__ (1))) __attribute__ ((__access__ (__write_only__, 1, 2)));
extern int __getlogin_r_alias (char *__buf, size_t __buflen) __asm__ ("" "getlogin_r")
                     __attribute__ ((__nonnull__ (1)));
extern int __getlogin_r_chk_warn (char *__buf, size_t __buflen, size_t __nreal) __asm__ ("" "__getlogin_r_chk")


     __attribute__ ((__nonnull__ (1))) __attribute__((__warning__ ("getlogin_r called with bigger buflen than " "size of destination buffer")))
                                  ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
getlogin_r (char *__buf, size_t __buflen)
{
  return ((((__typeof (__buflen)) 0 < (__typeof (__buflen)) -1 || (__builtin_constant_p (__buflen) && (__buflen) > 0)) && __builtin_constant_p ((((long unsigned int) (__buflen)) <= (__builtin_object_size (__buf, 2 > 1)) / (sizeof (char)))) && (((long unsigned int) (__buflen)) <= (__builtin_object_size (__buf, 2 > 1)) / (sizeof (char)))) ? __getlogin_r_alias (__buf, __buflen) : ((((__typeof (__buflen)) 0 < (__typeof (__buflen)) -1 || (__builtin_constant_p (__buflen) && (__buflen) > 0)) && __builtin_constant_p ((((long unsigned int) (__buflen)) <= (__builtin_object_size (__buf, 2 > 1)) / (sizeof (char)))) && !(((long unsigned int) (__buflen)) <= (__builtin_object_size (__buf, 2 > 1)) / (sizeof (char)))) ? __getlogin_r_chk_warn (__buf, __buflen, __builtin_object_size (__buf, 2 > 1)) : __getlogin_r_chk (__buf, __buflen, __builtin_object_size (__buf, 2 > 1))))

                     ;
}




extern int __gethostname_chk (char *__buf, size_t __buflen, size_t __nreal)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__access__ (__write_only__, 1, 2)));
extern int __gethostname_alias (char *__buf, size_t __buflen) __asm__ ("" "gethostname") __attribute__ ((__nothrow__ , __leaf__))

  __attribute__ ((__nonnull__ (1))) __attribute__ ((__access__ (__write_only__, 1, 2)));
extern int __gethostname_chk_warn (char *__buf, size_t __buflen, size_t __nreal) __asm__ ("" "__gethostname_chk") __attribute__ ((__nothrow__ , __leaf__))


     __attribute__ ((__nonnull__ (1))) __attribute__((__warning__ ("gethostname called with bigger buflen than " "size of destination buffer")))
                                  ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__nothrow__ , __leaf__)) gethostname (char *__buf, size_t __buflen)
{
  return ((((__typeof (__buflen)) 0 < (__typeof (__buflen)) -1 || (__builtin_constant_p (__buflen) && (__buflen) > 0)) && __builtin_constant_p ((((long unsigned int) (__buflen)) <= (__builtin_object_size (__buf, 2 > 1)) / (sizeof (char)))) && (((long unsigned int) (__buflen)) <= (__builtin_object_size (__buf, 2 > 1)) / (sizeof (char)))) ? __gethostname_alias (__buf, __buflen) : ((((__typeof (__buflen)) 0 < (__typeof (__buflen)) -1 || (__builtin_constant_p (__buflen) && (__buflen) > 0)) && __builtin_constant_p ((((long unsigned int) (__buflen)) <= (__builtin_object_size (__buf, 2 > 1)) / (sizeof (char)))) && !(((long unsigned int) (__buflen)) <= (__builtin_object_size (__buf, 2 > 1)) / (sizeof (char)))) ? __gethostname_chk_warn (__buf, __buflen, __builtin_object_size (__buf, 2 > 1)) : __gethostname_chk (__buf, __buflen, __builtin_object_size (__buf, 2 > 1))))

                     ;
}




extern int __getdomainname_chk (char *__buf, size_t __buflen, size_t __nreal)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__)) __attribute__ ((__access__ (__write_only__, 1, 2)));
extern int __getdomainname_alias (char *__buf, size_t __buflen) __asm__ ("" "getdomainname") __attribute__ ((__nothrow__ , __leaf__))

                     __attribute__ ((__nonnull__ (1)))
  __attribute__ ((__warn_unused_result__)) __attribute__ ((__access__ (__write_only__, 1, 2)));
extern int __getdomainname_chk_warn (char *__buf, size_t __buflen, size_t __nreal) __asm__ ("" "__getdomainname_chk") __attribute__ ((__nothrow__ , __leaf__))


     __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("getdomainname called with bigger " "buflen than size of destination " "buffer")))

                    ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__nothrow__ , __leaf__)) getdomainname (char *__buf, size_t __buflen)
{
  return ((((__typeof (__buflen)) 0 < (__typeof (__buflen)) -1 || (__builtin_constant_p (__buflen) && (__buflen) > 0)) && __builtin_constant_p ((((long unsigned int) (__buflen)) <= (__builtin_object_size (__buf, 2 > 1)) / (sizeof (char)))) && (((long unsigned int) (__buflen)) <= (__builtin_object_size (__buf, 2 > 1)) / (sizeof (char)))) ? __getdomainname_alias (__buf, __buflen) : ((((__typeof (__buflen)) 0 < (__typeof (__buflen)) -1 || (__builtin_constant_p (__buflen) && (__buflen) > 0)) && __builtin_constant_p ((((long unsigned int) (__buflen)) <= (__builtin_object_size (__buf, 2 > 1)) / (sizeof (char)))) && !(((long unsigned int) (__buflen)) <= (__builtin_object_size (__buf, 2 > 1)) / (sizeof (char)))) ? __getdomainname_chk_warn (__buf, __buflen, __builtin_object_size (__buf, 2 > 1)) : __getdomainname_chk (__buf, __buflen, __builtin_object_size (__buf, 2 > 1))))

                     ;
}
# 1215 "/usr/include/unistd.h" 2 3 4



# 1 "/usr/include/aarch64-linux-gnu/bits/unistd_ext.h" 1 3 4
# 34 "/usr/include/aarch64-linux-gnu/bits/unistd_ext.h" 3 4
extern __pid_t gettid (void) __attribute__ ((__nothrow__ , __leaf__));



# 1 "/usr/include/linux/close_range.h" 1 3 4
# 39 "/usr/include/aarch64-linux-gnu/bits/unistd_ext.h" 2 3 4
# 1219 "/usr/include/unistd.h" 2 3 4


# 25 "/usr/include/aarch64-linux-gnu/bits/sigstksz.h" 2 3 4
# 329 "/usr/include/signal.h" 2 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/ss_flags.h" 1 3 4
# 27 "/usr/include/aarch64-linux-gnu/bits/ss_flags.h" 3 4
enum
{
  SS_ONSTACK = 1,

  SS_DISABLE

};
# 330 "/usr/include/signal.h" 2 3 4



extern int sigaltstack (const stack_t *__restrict __ss,
   stack_t *__restrict __oss) __attribute__ ((__nothrow__ , __leaf__));




# 1 "/usr/include/aarch64-linux-gnu/bits/types/struct_sigstack.h" 1 3 4
# 23 "/usr/include/aarch64-linux-gnu/bits/types/struct_sigstack.h" 3 4
struct sigstack
  {
    void *ss_sp;
    int ss_onstack;
  };
# 340 "/usr/include/signal.h" 2 3 4







extern int sigstack (struct sigstack *__ss, struct sigstack *__oss)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__deprecated__));






extern int sighold (int __sig) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__deprecated__ ("Use the sigprocmask function instead")));


extern int sigrelse (int __sig) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__deprecated__ ("Use the sigprocmask function instead")));


extern int sigignore (int __sig) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__deprecated__ ("Use the signal function instead")));


extern __sighandler_t sigset (int __sig, __sighandler_t __disp) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__deprecated__ ("Use the signal and sigprocmask functions instead")))
                                                        ;






# 1 "/usr/include/aarch64-linux-gnu/bits/sigthread.h" 1 3 4
# 31 "/usr/include/aarch64-linux-gnu/bits/sigthread.h" 3 4
extern int pthread_sigmask (int __how,
       const __sigset_t *__restrict __newmask,
       __sigset_t *__restrict __oldmask)__attribute__ ((__nothrow__ , __leaf__));


extern int pthread_kill (pthread_t __threadid, int __signo) __attribute__ ((__nothrow__ , __leaf__));



extern int pthread_sigqueue (pthread_t __threadid, int __signo,
        const union sigval __value) __attribute__ ((__nothrow__ , __leaf__));
# 377 "/usr/include/signal.h" 2 3 4






extern int __libc_current_sigrtmin (void) __attribute__ ((__nothrow__ , __leaf__));

extern int __libc_current_sigrtmax (void) __attribute__ ((__nothrow__ , __leaf__));





# 1 "/usr/include/aarch64-linux-gnu/bits/signal_ext.h" 1 3 4
# 29 "/usr/include/aarch64-linux-gnu/bits/signal_ext.h" 3 4
extern int tgkill (__pid_t __tgid, __pid_t __tid, int __signal);
# 392 "/usr/include/signal.h" 2 3 4


# 63 "stress-ng.h" 2
# 1 "/usr/lib/gcc/aarch64-linux-gnu/11/include/stdarg.h" 1 3 4
# 40 "/usr/lib/gcc/aarch64-linux-gnu/11/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 99 "/usr/lib/gcc/aarch64-linux-gnu/11/include/stdarg.h" 3 4
typedef __gnuc_va_list va_list;
# 64 "stress-ng.h" 2
# 1 "/usr/lib/gcc/aarch64-linux-gnu/11/include/stdbool.h" 1 3 4
# 65 "stress-ng.h" 2
# 1 "/usr/lib/gcc/aarch64-linux-gnu/11/include/stddef.h" 1 3 4
# 143 "/usr/lib/gcc/aarch64-linux-gnu/11/include/stddef.h" 3 4
typedef long int ptrdiff_t;
# 321 "/usr/lib/gcc/aarch64-linux-gnu/11/include/stddef.h" 3 4
typedef unsigned int wchar_t;
# 66 "stress-ng.h" 2

# 1 "/usr/include/stdio.h" 1 3 4
# 27 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 28 "/usr/include/stdio.h" 2 3 4





# 1 "/usr/lib/gcc/aarch64-linux-gnu/11/include/stddef.h" 1 3 4
# 34 "/usr/include/stdio.h" 2 3 4





# 1 "/usr/include/aarch64-linux-gnu/bits/types/__fpos_t.h" 1 3 4




# 1 "/usr/include/aarch64-linux-gnu/bits/types/__mbstate_t.h" 1 3 4
# 13 "/usr/include/aarch64-linux-gnu/bits/types/__mbstate_t.h" 3 4
typedef struct
{
  int __count;
  union
  {
    unsigned int __wch;
    char __wchb[4];
  } __value;
} __mbstate_t;
# 6 "/usr/include/aarch64-linux-gnu/bits/types/__fpos_t.h" 2 3 4




typedef struct _G_fpos_t
{
  __off_t __pos;
  __mbstate_t __state;
} __fpos_t;
# 40 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/types/__fpos64_t.h" 1 3 4
# 10 "/usr/include/aarch64-linux-gnu/bits/types/__fpos64_t.h" 3 4
typedef struct _G_fpos64_t
{
  __off64_t __pos;
  __mbstate_t __state;
} __fpos64_t;
# 41 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/types/__FILE.h" 1 3 4



struct _IO_FILE;
typedef struct _IO_FILE __FILE;
# 42 "/usr/include/stdio.h" 2 3 4

# 1 "/usr/include/aarch64-linux-gnu/bits/types/struct_FILE.h" 1 3 4
# 35 "/usr/include/aarch64-linux-gnu/bits/types/struct_FILE.h" 3 4
struct _IO_FILE;
struct _IO_marker;
struct _IO_codecvt;
struct _IO_wide_data;




typedef void _IO_lock_t;





struct _IO_FILE
{
  int _flags;


  char *_IO_read_ptr;
  char *_IO_read_end;
  char *_IO_read_base;
  char *_IO_write_base;
  char *_IO_write_ptr;
  char *_IO_write_end;
  char *_IO_buf_base;
  char *_IO_buf_end;


  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;

  struct _IO_marker *_markers;

  struct _IO_FILE *_chain;

  int _fileno;
  int _flags2;
  __off_t _old_offset;


  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];

  _IO_lock_t *_lock;







  __off64_t _offset;

  struct _IO_codecvt *_codecvt;
  struct _IO_wide_data *_wide_data;
  struct _IO_FILE *_freeres_list;
  void *_freeres_buf;
  size_t __pad5;
  int _mode;

  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];
};
# 44 "/usr/include/stdio.h" 2 3 4


# 1 "/usr/include/aarch64-linux-gnu/bits/types/cookie_io_functions_t.h" 1 3 4
# 27 "/usr/include/aarch64-linux-gnu/bits/types/cookie_io_functions_t.h" 3 4
typedef __ssize_t cookie_read_function_t (void *__cookie, char *__buf,
                                          size_t __nbytes);







typedef __ssize_t cookie_write_function_t (void *__cookie, const char *__buf,
                                           size_t __nbytes);







typedef int cookie_seek_function_t (void *__cookie, __off64_t *__pos, int __w);


typedef int cookie_close_function_t (void *__cookie);






typedef struct _IO_cookie_io_functions_t
{
  cookie_read_function_t *read;
  cookie_write_function_t *write;
  cookie_seek_function_t *seek;
  cookie_close_function_t *close;
} cookie_io_functions_t;
# 47 "/usr/include/stdio.h" 2 3 4
# 86 "/usr/include/stdio.h" 3 4
typedef __fpos64_t fpos_t;


typedef __fpos64_t fpos64_t;
# 133 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/stdio_lim.h" 1 3 4
# 134 "/usr/include/stdio.h" 2 3 4
# 143 "/usr/include/stdio.h" 3 4
extern FILE *stdin;
extern FILE *stdout;
extern FILE *stderr;






extern int remove (const char *__filename) __attribute__ ((__nothrow__ , __leaf__));

extern int rename (const char *__old, const char *__new) __attribute__ ((__nothrow__ , __leaf__));



extern int renameat (int __oldfd, const char *__old, int __newfd,
       const char *__new) __attribute__ ((__nothrow__ , __leaf__));
# 170 "/usr/include/stdio.h" 3 4
extern int renameat2 (int __oldfd, const char *__old, int __newfd,
        const char *__new, unsigned int __flags) __attribute__ ((__nothrow__ , __leaf__));






extern int fclose (FILE *__stream);
# 192 "/usr/include/stdio.h" 3 4
extern FILE *tmpfile (void) __asm__ ("" "tmpfile64")
  __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (fclose, 1))) __attribute__ ((__warn_unused_result__));






extern FILE *tmpfile64 (void)
   __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (fclose, 1))) __attribute__ ((__warn_unused_result__));



extern char *tmpnam (char[20]) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));




extern char *tmpnam_r (char __s[20]) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));
# 222 "/usr/include/stdio.h" 3 4
extern char *tempnam (const char *__dir, const char *__pfx)
   __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__warn_unused_result__)) __attribute__ ((__malloc__ (__builtin_free, 1)));






extern int fflush (FILE *__stream);
# 239 "/usr/include/stdio.h" 3 4
extern int fflush_unlocked (FILE *__stream);
# 249 "/usr/include/stdio.h" 3 4
extern int fcloseall (void);
# 270 "/usr/include/stdio.h" 3 4
extern FILE *fopen (const char *__restrict __filename, const char *__restrict __modes) __asm__ ("" "fopen64")

  __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (fclose, 1))) __attribute__ ((__warn_unused_result__));
extern FILE *freopen (const char *__restrict __filename, const char *__restrict __modes, FILE *__restrict __stream) __asm__ ("" "freopen64")


  __attribute__ ((__warn_unused_result__));






extern FILE *fopen64 (const char *__restrict __filename,
        const char *__restrict __modes)
  __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (fclose, 1))) __attribute__ ((__warn_unused_result__));
extern FILE *freopen64 (const char *__restrict __filename,
   const char *__restrict __modes,
   FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));




extern FILE *fdopen (int __fd, const char *__modes) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (fclose, 1))) __attribute__ ((__warn_unused_result__));





extern FILE *fopencookie (void *__restrict __magic_cookie,
     const char *__restrict __modes,
     cookie_io_functions_t __io_funcs) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (fclose, 1))) __attribute__ ((__warn_unused_result__));




extern FILE *fmemopen (void *__s, size_t __len, const char *__modes)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (fclose, 1))) __attribute__ ((__warn_unused_result__));




extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (fclose, 1))) __attribute__ ((__warn_unused_result__));
# 328 "/usr/include/stdio.h" 3 4
extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__));



extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
      int __modes, size_t __n) __attribute__ ((__nothrow__ , __leaf__));




extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,
         size_t __size) __attribute__ ((__nothrow__ , __leaf__));


extern void setlinebuf (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));







extern int fprintf (FILE *__restrict __stream,
      const char *__restrict __format, ...);




extern int printf (const char *__restrict __format, ...);

extern int sprintf (char *__restrict __s,
      const char *__restrict __format, ...) __attribute__ ((__nothrow__));





extern int vfprintf (FILE *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg);




extern int vprintf (const char *__restrict __format, __gnuc_va_list __arg);

extern int vsprintf (char *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg) __attribute__ ((__nothrow__));



extern int snprintf (char *__restrict __s, size_t __maxlen,
       const char *__restrict __format, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 3, 4)));

extern int vsnprintf (char *__restrict __s, size_t __maxlen,
        const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 3, 0)));





extern int vasprintf (char **__restrict __ptr, const char *__restrict __f,
        __gnuc_va_list __arg)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 2, 0))) __attribute__ ((__warn_unused_result__));
extern int __asprintf (char **__restrict __ptr,
         const char *__restrict __fmt, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 2, 3))) __attribute__ ((__warn_unused_result__));
extern int asprintf (char **__restrict __ptr,
       const char *__restrict __fmt, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 2, 3))) __attribute__ ((__warn_unused_result__));




extern int vdprintf (int __fd, const char *__restrict __fmt,
       __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 2, 0)));
extern int dprintf (int __fd, const char *__restrict __fmt, ...)
     __attribute__ ((__format__ (__printf__, 2, 3)));







extern int fscanf (FILE *__restrict __stream,
     const char *__restrict __format, ...) __attribute__ ((__warn_unused_result__));




extern int scanf (const char *__restrict __format, ...) __attribute__ ((__warn_unused_result__));

extern int sscanf (const char *__restrict __s,
     const char *__restrict __format, ...) __attribute__ ((__nothrow__ , __leaf__));
# 434 "/usr/include/stdio.h" 3 4
extern int fscanf (FILE *__restrict __stream, const char *__restrict __format, ...) __asm__ ("" "__isoc99_fscanf")

                          __attribute__ ((__warn_unused_result__));
extern int scanf (const char *__restrict __format, ...) __asm__ ("" "__isoc99_scanf")
                         __attribute__ ((__warn_unused_result__));
extern int sscanf (const char *__restrict __s, const char *__restrict __format, ...) __asm__ ("" "__isoc99_sscanf") __attribute__ ((__nothrow__ , __leaf__))

                      ;
# 459 "/usr/include/stdio.h" 3 4
extern int vfscanf (FILE *__restrict __s, const char *__restrict __format,
      __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 2, 0))) __attribute__ ((__warn_unused_result__));





extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 1, 0))) __attribute__ ((__warn_unused_result__));


extern int vsscanf (const char *__restrict __s,
      const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__format__ (__scanf__, 2, 0)));





extern int vfscanf (FILE *__restrict __s, const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vfscanf")



     __attribute__ ((__format__ (__scanf__, 2, 0))) __attribute__ ((__warn_unused_result__));
extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vscanf")

     __attribute__ ((__format__ (__scanf__, 1, 0))) __attribute__ ((__warn_unused_result__));
extern int vsscanf (const char *__restrict __s, const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vsscanf") __attribute__ ((__nothrow__ , __leaf__))



     __attribute__ ((__format__ (__scanf__, 2, 0)));
# 513 "/usr/include/stdio.h" 3 4
extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);





extern int getchar (void);






extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);
# 538 "/usr/include/stdio.h" 3 4
extern int fgetc_unlocked (FILE *__stream);
# 549 "/usr/include/stdio.h" 3 4
extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);





extern int putchar (int __c);
# 565 "/usr/include/stdio.h" 3 4
extern int fputc_unlocked (int __c, FILE *__stream);







extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);






extern int getw (FILE *__stream);


extern int putw (int __w, FILE *__stream);







extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
     __attribute__ ((__warn_unused_result__)) __attribute__ ((__access__ (__write_only__, 1, 2)));
# 615 "/usr/include/stdio.h" 3 4
extern char *fgets_unlocked (char *__restrict __s, int __n,
        FILE *__restrict __stream) __attribute__ ((__warn_unused_result__))
    __attribute__ ((__access__ (__write_only__, 1, 2)));
# 632 "/usr/include/stdio.h" 3 4
extern __ssize_t __getdelim (char **__restrict __lineptr,
                             size_t *__restrict __n, int __delimiter,
                             FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
extern __ssize_t getdelim (char **__restrict __lineptr,
                           size_t *__restrict __n, int __delimiter,
                           FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));







extern __ssize_t getline (char **__restrict __lineptr,
                          size_t *__restrict __n,
                          FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));







extern int fputs (const char *__restrict __s, FILE *__restrict __stream);





extern int puts (const char *__s);






extern int ungetc (int __c, FILE *__stream);






extern size_t fread (void *__restrict __ptr, size_t __size,
       size_t __n, FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));




extern size_t fwrite (const void *__restrict __ptr, size_t __size,
        size_t __n, FILE *__restrict __s);
# 691 "/usr/include/stdio.h" 3 4
extern int fputs_unlocked (const char *__restrict __s,
      FILE *__restrict __stream);
# 702 "/usr/include/stdio.h" 3 4
extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,
         size_t __n, FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
extern size_t fwrite_unlocked (const void *__restrict __ptr, size_t __size,
          size_t __n, FILE *__restrict __stream);







extern int fseek (FILE *__stream, long int __off, int __whence);




extern long int ftell (FILE *__stream) __attribute__ ((__warn_unused_result__));




extern void rewind (FILE *__stream);
# 744 "/usr/include/stdio.h" 3 4
extern int fseeko (FILE *__stream, __off64_t __off, int __whence) __asm__ ("" "fseeko64")

                  ;
extern __off64_t ftello (FILE *__stream) __asm__ ("" "ftello64");
# 768 "/usr/include/stdio.h" 3 4
extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos) __asm__ ("" "fgetpos64")
                                          ;
extern int fsetpos (FILE *__stream, const fpos_t *__pos) __asm__ ("" "fsetpos64")
                                                          ;







extern int fseeko64 (FILE *__stream, __off64_t __off, int __whence);
extern __off64_t ftello64 (FILE *__stream) __attribute__ ((__warn_unused_result__));
extern int fgetpos64 (FILE *__restrict __stream, fpos64_t *__restrict __pos);
extern int fsetpos64 (FILE *__stream, const fpos64_t *__pos);



extern void clearerr (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));

extern int feof (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));

extern int ferror (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));



extern void clearerr_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));
extern int feof_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));
extern int ferror_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));







extern void perror (const char *__s);




extern int fileno (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));




extern int fileno_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));
# 823 "/usr/include/stdio.h" 3 4
extern int pclose (FILE *__stream);





extern FILE *popen (const char *__command, const char *__modes)
  __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (pclose, 1))) __attribute__ ((__warn_unused_result__));






extern char *ctermid (char *__s) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__access__ (__write_only__, 1)));





extern char *cuserid (char *__s)
  __attribute__ ((__access__ (__write_only__, 1)));




struct obstack;


extern int obstack_printf (struct obstack *__restrict __obstack,
      const char *__restrict __format, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 2, 3)));
extern int obstack_vprintf (struct obstack *__restrict __obstack,
       const char *__restrict __format,
       __gnuc_va_list __args)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 2, 0)));







extern void flockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));



extern int ftrylockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));


extern void funlockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));
# 885 "/usr/include/stdio.h" 3 4
extern int __uflow (FILE *);
extern int __overflow (FILE *, int);




# 1 "/usr/include/aarch64-linux-gnu/bits/stdio.h" 1 3 4
# 46 "/usr/include/aarch64-linux-gnu/bits/stdio.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) int
getchar (void)
{
  return getc (stdin);
}




extern __inline __attribute__ ((__gnu_inline__)) int
fgetc_unlocked (FILE *__fp)
{
  return (__builtin_expect (((__fp)->_IO_read_ptr >= (__fp)->_IO_read_end), 0) ? __uflow (__fp) : *(unsigned char *) (__fp)->_IO_read_ptr++);
}





extern __inline __attribute__ ((__gnu_inline__)) int
getc_unlocked (FILE *__fp)
{
  return (__builtin_expect (((__fp)->_IO_read_ptr >= (__fp)->_IO_read_end), 0) ? __uflow (__fp) : *(unsigned char *) (__fp)->_IO_read_ptr++);
}


extern __inline __attribute__ ((__gnu_inline__)) int
getchar_unlocked (void)
{
  return (__builtin_expect (((stdin)->_IO_read_ptr >= (stdin)->_IO_read_end), 0) ? __uflow (stdin) : *(unsigned char *) (stdin)->_IO_read_ptr++);
}




extern __inline __attribute__ ((__gnu_inline__)) int
putchar (int __c)
{
  return putc (__c, stdout);
}




extern __inline __attribute__ ((__gnu_inline__)) int
fputc_unlocked (int __c, FILE *__stream)
{
  return (__builtin_expect (((__stream)->_IO_write_ptr >= (__stream)->_IO_write_end), 0) ? __overflow (__stream, (unsigned char) (__c)) : (unsigned char) (*(__stream)->_IO_write_ptr++ = (__c)));
}





extern __inline __attribute__ ((__gnu_inline__)) int
putc_unlocked (int __c, FILE *__stream)
{
  return (__builtin_expect (((__stream)->_IO_write_ptr >= (__stream)->_IO_write_end), 0) ? __overflow (__stream, (unsigned char) (__c)) : (unsigned char) (*(__stream)->_IO_write_ptr++ = (__c)));
}


extern __inline __attribute__ ((__gnu_inline__)) int
putchar_unlocked (int __c)
{
  return (__builtin_expect (((stdout)->_IO_write_ptr >= (stdout)->_IO_write_end), 0) ? __overflow (stdout, (unsigned char) (__c)) : (unsigned char) (*(stdout)->_IO_write_ptr++ = (__c)));
}





extern __inline __attribute__ ((__gnu_inline__)) __ssize_t
getline (char **__lineptr, size_t *__n, FILE *__stream)
{
  return __getdelim (__lineptr, __n, '\n', __stream);
}





extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__nothrow__ , __leaf__)) feof_unlocked (FILE *__stream)
{
  return (((__stream)->_flags & 0x0010) != 0);
}


extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__nothrow__ , __leaf__)) ferror_unlocked (FILE *__stream)
{
  return (((__stream)->_flags & 0x0020) != 0);
}
# 892 "/usr/include/stdio.h" 2 3 4


# 1 "/usr/include/aarch64-linux-gnu/bits/stdio2.h" 1 3 4
# 26 "/usr/include/aarch64-linux-gnu/bits/stdio2.h" 3 4
extern int __sprintf_chk (char *__restrict __s, int __flag, size_t __slen,
     const char *__restrict __format, ...) __attribute__ ((__nothrow__ , __leaf__))
    __attribute__ ((__access__ (__write_only__, 1, 3)));
extern int __vsprintf_chk (char *__restrict __s, int __flag, size_t __slen,
      const char *__restrict __format,
      __gnuc_va_list __ap) __attribute__ ((__nothrow__ , __leaf__))
    __attribute__ ((__access__ (__write_only__, 1, 3)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__nothrow__ , __leaf__)) sprintf (char *__restrict __s, const char *__restrict __fmt, ...)
{
  return __builtin___sprintf_chk (__s, 2 - 1,
      __builtin_object_size (__s, 2 > 1), __fmt,
      __builtin_va_arg_pack ());
}






extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__nothrow__ , __leaf__)) vsprintf (char *__restrict __s, const char *__restrict __fmt, __gnuc_va_list __ap)

{
  return __builtin___vsprintf_chk (__s, 2 - 1,
       __builtin_object_size (__s, 2 > 1), __fmt, __ap);
}



extern int __snprintf_chk (char *__restrict __s, size_t __n, int __flag,
      size_t __slen, const char *__restrict __format,
      ...) __attribute__ ((__nothrow__ , __leaf__))
    __attribute__ ((__access__ (__write_only__, 1, 2)));
extern int __vsnprintf_chk (char *__restrict __s, size_t __n, int __flag,
       size_t __slen, const char *__restrict __format,
       __gnuc_va_list __ap) __attribute__ ((__nothrow__ , __leaf__));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__nothrow__ , __leaf__)) snprintf (char *__restrict __s, size_t __n, const char *__restrict __fmt, ...)

{
  return __builtin___snprintf_chk (__s, __n, 2 - 1,
       __builtin_object_size (__s, 2 > 1), __fmt,
       __builtin_va_arg_pack ());
}






extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__nothrow__ , __leaf__)) vsnprintf (char *__restrict __s, size_t __n, const char *__restrict __fmt, __gnuc_va_list __ap)

{
  return __builtin___vsnprintf_chk (__s, __n, 2 - 1,
        __builtin_object_size (__s, 2 > 1), __fmt, __ap);
}





extern int __fprintf_chk (FILE *__restrict __stream, int __flag,
     const char *__restrict __format, ...);
extern int __printf_chk (int __flag, const char *__restrict __format, ...);
extern int __vfprintf_chk (FILE *__restrict __stream, int __flag,
      const char *__restrict __format, __gnuc_va_list __ap);
extern int __vprintf_chk (int __flag, const char *__restrict __format,
     __gnuc_va_list __ap);


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
fprintf (FILE *__restrict __stream, const char *__restrict __fmt, ...)
{
  return __fprintf_chk (__stream, 2 - 1, __fmt,
   __builtin_va_arg_pack ());
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
printf (const char *__restrict __fmt, ...)
{
  return __printf_chk (2 - 1, __fmt, __builtin_va_arg_pack ());
}







extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
vprintf (const char *__restrict __fmt, __gnuc_va_list __ap)
{

  return __vfprintf_chk (stdout, 2 - 1, __fmt, __ap);



}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
vfprintf (FILE *__restrict __stream,
   const char *__restrict __fmt, __gnuc_va_list __ap)
{
  return __vfprintf_chk (__stream, 2 - 1, __fmt, __ap);
}


extern int __dprintf_chk (int __fd, int __flag, const char *__restrict __fmt,
     ...) __attribute__ ((__format__ (__printf__, 3, 4)));
extern int __vdprintf_chk (int __fd, int __flag,
      const char *__restrict __fmt, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 3, 0)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
dprintf (int __fd, const char *__restrict __fmt, ...)
{
  return __dprintf_chk (__fd, 2 - 1, __fmt,
   __builtin_va_arg_pack ());
}





extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
vdprintf (int __fd, const char *__restrict __fmt, __gnuc_va_list __ap)
{
  return __vdprintf_chk (__fd, 2 - 1, __fmt, __ap);
}




extern int __asprintf_chk (char **__restrict __ptr, int __flag,
      const char *__restrict __fmt, ...)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__format__ (__printf__, 3, 4))) __attribute__ ((__warn_unused_result__));
extern int __vasprintf_chk (char **__restrict __ptr, int __flag,
       const char *__restrict __fmt, __gnuc_va_list __arg)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__format__ (__printf__, 3, 0))) __attribute__ ((__warn_unused_result__));
extern int __obstack_printf_chk (struct obstack *__restrict __obstack,
     int __flag, const char *__restrict __format,
     ...)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__format__ (__printf__, 3, 4)));
extern int __obstack_vprintf_chk (struct obstack *__restrict __obstack,
      int __flag,
      const char *__restrict __format,
      __gnuc_va_list __args)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__format__ (__printf__, 3, 0)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__nothrow__ , __leaf__)) asprintf (char **__restrict __ptr, const char *__restrict __fmt, ...)
{
  return __asprintf_chk (__ptr, 2 - 1, __fmt,
    __builtin_va_arg_pack ());
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__nothrow__ , __leaf__)) __asprintf (char **__restrict __ptr, const char *__restrict __fmt, ...)

{
  return __asprintf_chk (__ptr, 2 - 1, __fmt,
    __builtin_va_arg_pack ());
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__nothrow__ , __leaf__)) obstack_printf (struct obstack *__restrict __obstack, const char *__restrict __fmt, ...)

{
  return __obstack_printf_chk (__obstack, 2 - 1, __fmt,
          __builtin_va_arg_pack ());
}
# 214 "/usr/include/aarch64-linux-gnu/bits/stdio2.h" 3 4
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__nothrow__ , __leaf__)) vasprintf (char **__restrict __ptr, const char *__restrict __fmt, __gnuc_va_list __ap)

{
  return __vasprintf_chk (__ptr, 2 - 1, __fmt, __ap);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__nothrow__ , __leaf__)) obstack_vprintf (struct obstack *__restrict __obstack, const char *__restrict __fmt, __gnuc_va_list __ap)

{
  return __obstack_vprintf_chk (__obstack, 2 - 1, __fmt,
    __ap);
}
# 248 "/usr/include/aarch64-linux-gnu/bits/stdio2.h" 3 4
extern char *__fgets_chk (char *__restrict __s, size_t __size, int __n,
     FILE *__restrict __stream)
    __attribute__ ((__warn_unused_result__)) __attribute__ ((__access__ (__write_only__, 1, 3)));
extern char *__fgets_alias (char *__restrict __s, int __n, FILE *__restrict __stream) __asm__ ("" "fgets")


    __attribute__ ((__warn_unused_result__)) __attribute__ ((__access__ (__write_only__, 1, 2)));
extern char *__fgets_chk_warn (char *__restrict __s, size_t __size, int __n, FILE *__restrict __stream) __asm__ ("" "__fgets_chk")


     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("fgets called with bigger size than length " "of destination buffer")))
                                 ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) __attribute__ ((__access__ (__write_only__, 1, 2))) char *
fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
{
  size_t sz = __builtin_object_size (__s, 2 > 1);
  if ((((__typeof (__n)) 0 < (__typeof (__n)) -1 || (__builtin_constant_p (__n) && (__n) > 0)) && __builtin_constant_p ((((long unsigned int) (__n)) <= (sz) / (sizeof (char)))) && (((long unsigned int) (__n)) <= (sz) / (sizeof (char)))))
    return __fgets_alias (__s, __n, __stream);
  if ((((__typeof (__n)) 0 < (__typeof (__n)) -1 || (__builtin_constant_p (__n) && (__n) > 0)) && __builtin_constant_p ((((long unsigned int) (__n)) <= (sz) / (sizeof (char)))) && !(((long unsigned int) (__n)) <= (sz) / (sizeof (char)))))
    return __fgets_chk_warn (__s, sz, __n, __stream);
  return __fgets_chk (__s, sz, __n, __stream);
}

extern size_t __fread_chk (void *__restrict __ptr, size_t __ptrlen,
      size_t __size, size_t __n,
      FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
extern size_t __fread_alias (void *__restrict __ptr, size_t __size, size_t __n, FILE *__restrict __stream) __asm__ ("" "fread")


            __attribute__ ((__warn_unused_result__));
extern size_t __fread_chk_warn (void *__restrict __ptr, size_t __ptrlen, size_t __size, size_t __n, FILE *__restrict __stream) __asm__ ("" "__fread_chk")




     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("fread called with bigger size * nmemb than length " "of destination buffer")))
                                 ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) size_t
fread (void *__restrict __ptr, size_t __size, size_t __n,
       FILE *__restrict __stream)
{
  size_t sz = __builtin_object_size (__ptr, 0);
  if ((((__typeof (__n)) 0 < (__typeof (__n)) -1 || (__builtin_constant_p (__n) && (__n) > 0)) && __builtin_constant_p ((((long unsigned int) (__n)) <= (sz) / (__size))) && (((long unsigned int) (__n)) <= (sz) / (__size))))
    return __fread_alias (__ptr, __size, __n, __stream);
  if ((((__typeof (__n)) 0 < (__typeof (__n)) -1 || (__builtin_constant_p (__n) && (__n) > 0)) && __builtin_constant_p ((((long unsigned int) (__n)) <= (sz) / (__size))) && !(((long unsigned int) (__n)) <= (sz) / (__size))))
    return __fread_chk_warn (__ptr, sz, __size, __n, __stream);
  return __fread_chk (__ptr, sz, __size, __n, __stream);
}


extern char *__fgets_unlocked_chk (char *__restrict __s, size_t __size,
       int __n, FILE *__restrict __stream)
    __attribute__ ((__warn_unused_result__)) __attribute__ ((__access__ (__write_only__, 1, 3)));
extern char *__fgets_unlocked_alias (char *__restrict __s, int __n, FILE *__restrict __stream) __asm__ ("" "fgets_unlocked")


    __attribute__ ((__warn_unused_result__)) __attribute__ ((__access__ (__write_only__, 1, 2)));
extern char *__fgets_unlocked_chk_warn (char *__restrict __s, size_t __size, int __n, FILE *__restrict __stream) __asm__ ("" "__fgets_unlocked_chk")


     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("fgets_unlocked called with bigger size than length " "of destination buffer")))
                                 ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) __attribute__ ((__access__ (__write_only__, 1, 2))) char *
fgets_unlocked (char *__restrict __s, int __n, FILE *__restrict __stream)
{
  size_t sz = __builtin_object_size (__s, 2 > 1);
  if ((((__typeof (__n)) 0 < (__typeof (__n)) -1 || (__builtin_constant_p (__n) && (__n) > 0)) && __builtin_constant_p ((((long unsigned int) (__n)) <= (sz) / (sizeof (char)))) && (((long unsigned int) (__n)) <= (sz) / (sizeof (char)))))
    return __fgets_unlocked_alias (__s, __n, __stream);
  if ((((__typeof (__n)) 0 < (__typeof (__n)) -1 || (__builtin_constant_p (__n) && (__n) > 0)) && __builtin_constant_p ((((long unsigned int) (__n)) <= (sz) / (sizeof (char)))) && !(((long unsigned int) (__n)) <= (sz) / (sizeof (char)))))
    return __fgets_unlocked_chk_warn (__s, sz, __n, __stream);
  return __fgets_unlocked_chk (__s, sz, __n, __stream);
}




extern size_t __fread_unlocked_chk (void *__restrict __ptr, size_t __ptrlen,
        size_t __size, size_t __n,
        FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
extern size_t __fread_unlocked_alias (void *__restrict __ptr, size_t __size, size_t __n, FILE *__restrict __stream) __asm__ ("" "fread_unlocked")


                     __attribute__ ((__warn_unused_result__));
extern size_t __fread_unlocked_chk_warn (void *__restrict __ptr, size_t __ptrlen, size_t __size, size_t __n, FILE *__restrict __stream) __asm__ ("" "__fread_unlocked_chk")




     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("fread_unlocked called with bigger size * nmemb than " "length of destination buffer")))
                                        ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) size_t
fread_unlocked (void *__restrict __ptr, size_t __size, size_t __n,
  FILE *__restrict __stream)
{
  size_t sz = __builtin_object_size (__ptr, 0);
  if ((((__typeof (__n)) 0 < (__typeof (__n)) -1 || (__builtin_constant_p (__n) && (__n) > 0)) && __builtin_constant_p ((((long unsigned int) (__n)) <= (sz) / (__size))) && (((long unsigned int) (__n)) <= (sz) / (__size))))
    {

      if (__builtin_constant_p (__size)
   && __builtin_constant_p (__n)
   && (__size | __n) < (((size_t) 1) << (8 * sizeof (size_t) / 2))
   && __size * __n <= 8)
 {
   size_t __cnt = __size * __n;
   char *__cptr = (char *) __ptr;
   if (__cnt == 0)
     return 0;

   for (; __cnt > 0; --__cnt)
     {
       int __c = getc_unlocked (__stream);
       if (__c == (-1))
  break;
       *__cptr++ = __c;
     }
   return (__cptr - (char *) __ptr) / __size;
 }

      return __fread_unlocked_alias (__ptr, __size, __n, __stream);
    }
  if ((((__typeof (__n)) 0 < (__typeof (__n)) -1 || (__builtin_constant_p (__n) && (__n) > 0)) && __builtin_constant_p ((((long unsigned int) (__n)) <= (sz) / (__size))) && !(((long unsigned int) (__n)) <= (sz) / (__size))))
    return __fread_unlocked_chk_warn (__ptr, sz, __size, __n, __stream);
  return __fread_unlocked_chk (__ptr, sz, __size, __n, __stream);

}
# 895 "/usr/include/stdio.h" 2 3 4








# 68 "stress-ng.h" 2
# 1 "/usr/include/stdlib.h" 1 3 4
# 26 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/stdlib.h" 2 3 4





# 1 "/usr/lib/gcc/aarch64-linux-gnu/11/include/stddef.h" 1 3 4
# 33 "/usr/include/stdlib.h" 2 3 4







# 1 "/usr/include/aarch64-linux-gnu/bits/waitflags.h" 1 3 4
# 41 "/usr/include/stdlib.h" 2 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/waitstatus.h" 1 3 4
# 42 "/usr/include/stdlib.h" 2 3 4
# 59 "/usr/include/stdlib.h" 3 4
typedef struct
  {
    int quot;
    int rem;
  } div_t;



typedef struct
  {
    long int quot;
    long int rem;
  } ldiv_t;





__extension__ typedef struct
  {
    long long int quot;
    long long int rem;
  } lldiv_t;
# 98 "/usr/include/stdlib.h" 3 4
extern size_t __ctype_get_mb_cur_max (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));



extern double atof (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));

extern int atoi (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));

extern long int atol (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));



__extension__ extern long long int atoll (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));



extern double strtod (const char *__restrict __nptr,
        char **__restrict __endptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern float strtof (const char *__restrict __nptr,
       char **__restrict __endptr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

extern long double strtold (const char *__restrict __nptr,
       char **__restrict __endptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 141 "/usr/include/stdlib.h" 3 4
extern _Float32 strtof32 (const char *__restrict __nptr,
     char **__restrict __endptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern _Float64 strtof64 (const char *__restrict __nptr,
     char **__restrict __endptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern _Float128 strtof128 (const char *__restrict __nptr,
       char **__restrict __endptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern _Float32x strtof32x (const char *__restrict __nptr,
       char **__restrict __endptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern _Float64x strtof64x (const char *__restrict __nptr,
       char **__restrict __endptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 177 "/usr/include/stdlib.h" 3 4
extern long int strtol (const char *__restrict __nptr,
   char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

extern unsigned long int strtoul (const char *__restrict __nptr,
      char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



__extension__
extern long long int strtoq (const char *__restrict __nptr,
        char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtouq (const char *__restrict __nptr,
           char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));




__extension__
extern long long int strtoll (const char *__restrict __nptr,
         char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtoull (const char *__restrict __nptr,
     char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));




extern int strfromd (char *__dest, size_t __size, const char *__format,
       double __f)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3)));

extern int strfromf (char *__dest, size_t __size, const char *__format,
       float __f)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3)));

extern int strfroml (char *__dest, size_t __size, const char *__format,
       long double __f)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3)));
# 233 "/usr/include/stdlib.h" 3 4
extern int strfromf32 (char *__dest, size_t __size, const char * __format,
         _Float32 __f)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3)));



extern int strfromf64 (char *__dest, size_t __size, const char * __format,
         _Float64 __f)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3)));



extern int strfromf128 (char *__dest, size_t __size, const char * __format,
   _Float128 __f)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3)));



extern int strfromf32x (char *__dest, size_t __size, const char * __format,
   _Float32x __f)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3)));



extern int strfromf64x (char *__dest, size_t __size, const char * __format,
   _Float64x __f)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3)));
# 275 "/usr/include/stdlib.h" 3 4
extern long int strtol_l (const char *__restrict __nptr,
     char **__restrict __endptr, int __base,
     locale_t __loc) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 4)));

extern unsigned long int strtoul_l (const char *__restrict __nptr,
        char **__restrict __endptr,
        int __base, locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 4)));

__extension__
extern long long int strtoll_l (const char *__restrict __nptr,
    char **__restrict __endptr, int __base,
    locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 4)));

__extension__
extern unsigned long long int strtoull_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       int __base, locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 4)));

extern double strtod_l (const char *__restrict __nptr,
   char **__restrict __endptr, locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3)));

extern float strtof_l (const char *__restrict __nptr,
         char **__restrict __endptr, locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3)));

extern long double strtold_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3)));
# 317 "/usr/include/stdlib.h" 3 4
extern _Float32 strtof32_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3)));



extern _Float64 strtof64_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3)));



extern _Float128 strtof128_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3)));



extern _Float32x strtof32x_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3)));



extern _Float64x strtof64x_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3)));
# 361 "/usr/include/stdlib.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__nothrow__ , __leaf__)) atoi (const char *__nptr)
{
  return (int) strtol (__nptr, (char **) ((void *)0), 10);
}
extern __inline __attribute__ ((__gnu_inline__)) long int
__attribute__ ((__nothrow__ , __leaf__)) atol (const char *__nptr)
{
  return strtol (__nptr, (char **) ((void *)0), 10);
}


__extension__ extern __inline __attribute__ ((__gnu_inline__)) long long int
__attribute__ ((__nothrow__ , __leaf__)) atoll (const char *__nptr)
{
  return strtoll (__nptr, (char **) ((void *)0), 10);
}
# 386 "/usr/include/stdlib.h" 3 4
extern char *l64a (long int __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));


extern long int a64l (const char *__s)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 402 "/usr/include/stdlib.h" 3 4
extern long int random (void) __attribute__ ((__nothrow__ , __leaf__));


extern void srandom (unsigned int __seed) __attribute__ ((__nothrow__ , __leaf__));





extern char *initstate (unsigned int __seed, char *__statebuf,
   size_t __statelen) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



extern char *setstate (char *__statebuf) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));







struct random_data
  {
    int32_t *fptr;
    int32_t *rptr;
    int32_t *state;
    int rand_type;
    int rand_deg;
    int rand_sep;
    int32_t *end_ptr;
  };

extern int random_r (struct random_data *__restrict __buf,
       int32_t *__restrict __result) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern int srandom_r (unsigned int __seed, struct random_data *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));

extern int initstate_r (unsigned int __seed, char *__restrict __statebuf,
   size_t __statelen,
   struct random_data *__restrict __buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4)));

extern int setstate_r (char *__restrict __statebuf,
         struct random_data *__restrict __buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));





extern int rand (void) __attribute__ ((__nothrow__ , __leaf__));

extern void srand (unsigned int __seed) __attribute__ ((__nothrow__ , __leaf__));



extern int rand_r (unsigned int *__seed) __attribute__ ((__nothrow__ , __leaf__));







extern double drand48 (void) __attribute__ ((__nothrow__ , __leaf__));
extern double erand48 (unsigned short int __xsubi[3]) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern long int lrand48 (void) __attribute__ ((__nothrow__ , __leaf__));
extern long int nrand48 (unsigned short int __xsubi[3])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern long int mrand48 (void) __attribute__ ((__nothrow__ , __leaf__));
extern long int jrand48 (unsigned short int __xsubi[3])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern void srand48 (long int __seedval) __attribute__ ((__nothrow__ , __leaf__));
extern unsigned short int *seed48 (unsigned short int __seed16v[3])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern void lcong48 (unsigned short int __param[7]) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





struct drand48_data
  {
    unsigned short int __x[3];
    unsigned short int __old_x[3];
    unsigned short int __c;
    unsigned short int __init;
    __extension__ unsigned long long int __a;

  };


extern int drand48_r (struct drand48_data *__restrict __buffer,
        double *__restrict __result) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int erand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        double *__restrict __result) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int lrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int nrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int mrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int jrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int srand48_r (long int __seedval, struct drand48_data *__buffer)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));

extern int seed48_r (unsigned short int __seed16v[3],
       struct drand48_data *__buffer) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern int lcong48_r (unsigned short int __param[7],
        struct drand48_data *__buffer)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern void *malloc (size_t __size) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__))
     __attribute__ ((__alloc_size__ (1))) __attribute__ ((__warn_unused_result__));

extern void *calloc (size_t __nmemb, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__alloc_size__ (1, 2))) __attribute__ ((__warn_unused_result__));






extern void *realloc (void *__ptr, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__)) __attribute__ ((__alloc_size__ (2)));


extern void free (void *__ptr) __attribute__ ((__nothrow__ , __leaf__));







extern void *reallocarray (void *__ptr, size_t __nmemb, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__))
     __attribute__ ((__alloc_size__ (2, 3)))
    __attribute__ ((__malloc__ (__builtin_free, 1)));


extern void *reallocarray (void *__ptr, size_t __nmemb, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__ (reallocarray, 1)));



# 1 "/usr/include/alloca.h" 1 3 4
# 24 "/usr/include/alloca.h" 3 4
# 1 "/usr/lib/gcc/aarch64-linux-gnu/11/include/stddef.h" 1 3 4
# 25 "/usr/include/alloca.h" 2 3 4







extern void *alloca (size_t __size) __attribute__ ((__nothrow__ , __leaf__));






# 575 "/usr/include/stdlib.h" 2 3 4





extern void *valloc (size_t __size) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__))
     __attribute__ ((__alloc_size__ (1))) __attribute__ ((__warn_unused_result__));




extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));




extern void *aligned_alloc (size_t __alignment, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__alloc_align__ (1)))
     __attribute__ ((__alloc_size__ (2))) __attribute__ ((__warn_unused_result__));



extern void abort (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));



extern int atexit (void (*__func) (void)) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));







extern int at_quick_exit (void (*__func) (void)) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));






extern int on_exit (void (*__func) (int __status, void *__arg), void *__arg)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern void exit (int __status) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));





extern void quick_exit (int __status) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));





extern void _Exit (int __status) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));




extern char *getenv (const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));




extern char *secure_getenv (const char *__name)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));






extern int putenv (char *__string) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int setenv (const char *__name, const char *__value, int __replace)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));


extern int unsetenv (const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));






extern int clearenv (void) __attribute__ ((__nothrow__ , __leaf__));
# 682 "/usr/include/stdlib.h" 3 4
extern char *mktemp (char *__template) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 698 "/usr/include/stdlib.h" 3 4
extern int mkstemp (char *__template) __asm__ ("" "mkstemp64")
     __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));





extern int mkstemp64 (char *__template) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 720 "/usr/include/stdlib.h" 3 4
extern int mkstemps (char *__template, int __suffixlen) __asm__ ("" "mkstemps64")
                     __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));





extern int mkstemps64 (char *__template, int __suffixlen)
     __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 738 "/usr/include/stdlib.h" 3 4
extern char *mkdtemp (char *__template) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 752 "/usr/include/stdlib.h" 3 4
extern int mkostemp (char *__template, int __flags) __asm__ ("" "mkostemp64")
     __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));





extern int mkostemp64 (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 773 "/usr/include/stdlib.h" 3 4
extern int mkostemps (char *__template, int __suffixlen, int __flags) __asm__ ("" "mkostemps64")

     __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));





extern int mkostemps64 (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 791 "/usr/include/stdlib.h" 3 4
extern int system (const char *__command) __attribute__ ((__warn_unused_result__));





extern char *canonicalize_file_name (const char *__name)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__malloc__))
     __attribute__ ((__malloc__ (__builtin_free, 1))) __attribute__ ((__warn_unused_result__));
# 808 "/usr/include/stdlib.h" 3 4
extern char *realpath (const char *__restrict __name,
         char *__restrict __resolved) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));
# 823 "/usr/include/stdlib.h" 3 4
typedef int (*__compar_d_fn_t) (const void *, const void *, void *);




extern void *bsearch (const void *__key, const void *__base,
        size_t __nmemb, size_t __size, __compar_fn_t __compar)
     __attribute__ ((__nonnull__ (1, 2, 5))) __attribute__ ((__warn_unused_result__));


# 1 "/usr/include/aarch64-linux-gnu/bits/stdlib-bsearch.h" 1 3 4
# 19 "/usr/include/aarch64-linux-gnu/bits/stdlib-bsearch.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) void *
bsearch (const void *__key, const void *__base, size_t __nmemb, size_t __size,
  __compar_fn_t __compar)
{
  size_t __l, __u, __idx;
  const void *__p;
  int __comparison;

  __l = 0;
  __u = __nmemb;
  while (__l < __u)
    {
      __idx = (__l + __u) / 2;
      __p = (const void *) (((const char *) __base) + (__idx * __size));
      __comparison = (*__compar) (__key, __p);
      if (__comparison < 0)
 __u = __idx;
      else if (__comparison > 0)
 __l = __idx + 1;
      else
 {

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wcast-qual"

   return (void *) __p;

#pragma GCC diagnostic pop

 }
    }

  return ((void *)0);
}
# 834 "/usr/include/stdlib.h" 2 3 4




extern void qsort (void *__base, size_t __nmemb, size_t __size,
     __compar_fn_t __compar) __attribute__ ((__nonnull__ (1, 4)));

extern void qsort_r (void *__base, size_t __nmemb, size_t __size,
       __compar_d_fn_t __compar, void *__arg)
  __attribute__ ((__nonnull__ (1, 4)));




extern int abs (int __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) __attribute__ ((__warn_unused_result__));
extern long int labs (long int __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) __attribute__ ((__warn_unused_result__));


__extension__ extern long long int llabs (long long int __x)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) __attribute__ ((__warn_unused_result__));






extern div_t div (int __numer, int __denom)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) __attribute__ ((__warn_unused_result__));
extern ldiv_t ldiv (long int __numer, long int __denom)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) __attribute__ ((__warn_unused_result__));


__extension__ extern lldiv_t lldiv (long long int __numer,
        long long int __denom)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) __attribute__ ((__warn_unused_result__));
# 880 "/usr/include/stdlib.h" 3 4
extern char *ecvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) __attribute__ ((__warn_unused_result__));




extern char *fcvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) __attribute__ ((__warn_unused_result__));




extern char *gcvt (double __value, int __ndigit, char *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3))) __attribute__ ((__warn_unused_result__));




extern char *qecvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) __attribute__ ((__warn_unused_result__));
extern char *qfcvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) __attribute__ ((__warn_unused_result__));
extern char *qgcvt (long double __value, int __ndigit, char *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3))) __attribute__ ((__warn_unused_result__));




extern int ecvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));
extern int fcvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));

extern int qecvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));
extern int qfcvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));





extern int mblen (const char *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__));


extern int mbtowc (wchar_t *__restrict __pwc,
     const char *__restrict __s, size_t __n) __attribute__ ((__nothrow__ , __leaf__));


extern int wctomb (char *__s, wchar_t __wchar) __attribute__ ((__nothrow__ , __leaf__));



extern size_t mbstowcs (wchar_t *__restrict __pwcs,
   const char *__restrict __s, size_t __n) __attribute__ ((__nothrow__ , __leaf__))
    __attribute__ ((__access__ (__read_only__, 2)));

extern size_t wcstombs (char *__restrict __s,
   const wchar_t *__restrict __pwcs, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__access__ (__write_only__, 1, 3)))
  __attribute__ ((__access__ (__read_only__, 2)));






extern int rpmatch (const char *__response) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 967 "/usr/include/stdlib.h" 3 4
extern int getsubopt (char **__restrict __optionp,
        char *const *__restrict __tokens,
        char **__restrict __valuep)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2, 3))) __attribute__ ((__warn_unused_result__));







extern int posix_openpt (int __oflag) __attribute__ ((__warn_unused_result__));







extern int grantpt (int __fd) __attribute__ ((__nothrow__ , __leaf__));



extern int unlockpt (int __fd) __attribute__ ((__nothrow__ , __leaf__));




extern char *ptsname (int __fd) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));






extern int ptsname_r (int __fd, char *__buf, size_t __buflen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2))) __attribute__ ((__access__ (__write_only__, 2, 3)));


extern int getpt (void);






extern int getloadavg (double __loadavg[], int __nelem)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 1023 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/stdlib-float.h" 1 3 4
# 24 "/usr/include/aarch64-linux-gnu/bits/stdlib-float.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) double
__attribute__ ((__nothrow__ , __leaf__)) atof (const char *__nptr)
{
  return strtod (__nptr, (char **) ((void *)0));
}
# 1024 "/usr/include/stdlib.h" 2 3 4



# 1 "/usr/include/aarch64-linux-gnu/bits/stdlib.h" 1 3 4
# 23 "/usr/include/aarch64-linux-gnu/bits/stdlib.h" 3 4
extern char *__realpath_chk (const char *__restrict __name,
        char *__restrict __resolved,
        size_t __resolvedlen) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));
extern char *__realpath_alias (const char *__restrict __name, char *__restrict __resolved) __asm__ ("" "realpath") __attribute__ ((__nothrow__ , __leaf__))

                                                 __attribute__ ((__warn_unused_result__));
extern char *__realpath_chk_warn (const char *__restrict __name, char *__restrict __resolved, size_t __resolvedlen) __asm__ ("" "__realpath_chk") __attribute__ ((__nothrow__ , __leaf__))


                                                __attribute__ ((__warn_unused_result__))
     __attribute__((__warning__ ("second argument of realpath must be either NULL or at " "least PATH_MAX bytes long buffer")))
                                      ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) char *
__attribute__ ((__nothrow__ , __leaf__)) realpath (const char *__restrict __name, char *__restrict __resolved)
{
  size_t sz = __builtin_object_size (__resolved, 2 > 1);

  if (sz == (size_t) -1)
    return __realpath_alias (__name, __resolved);


  if ((((__typeof (4096)) 0 < (__typeof (4096)) -1 || (__builtin_constant_p (4096) && (4096) > 0)) && __builtin_constant_p ((((long unsigned int) (4096)) <= (sz) / (sizeof (char)))) && !(((long unsigned int) (4096)) <= (sz) / (sizeof (char)))))
    return __realpath_chk_warn (__name, __resolved, sz);

  return __realpath_chk (__name, __resolved, sz);
}


extern int __ptsname_r_chk (int __fd, char *__buf, size_t __buflen,
       size_t __nreal) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)))
    __attribute__ ((__access__ (__write_only__, 2, 3)));
extern int __ptsname_r_alias (int __fd, char *__buf, size_t __buflen) __asm__ ("" "ptsname_r") __attribute__ ((__nothrow__ , __leaf__))

     __attribute__ ((__nonnull__ (2))) __attribute__ ((__access__ (__write_only__, 2, 3)));
extern int __ptsname_r_chk_warn (int __fd, char *__buf, size_t __buflen, size_t __nreal) __asm__ ("" "__ptsname_r_chk") __attribute__ ((__nothrow__ , __leaf__))


     __attribute__ ((__nonnull__ (2))) __attribute__((__warning__ ("ptsname_r called with buflen bigger than " "size of buf")))
                   ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__nothrow__ , __leaf__)) ptsname_r (int __fd, char *__buf, size_t __buflen)
{
  return ((((__typeof (__buflen)) 0 < (__typeof (__buflen)) -1 || (__builtin_constant_p (__buflen) && (__buflen) > 0)) && __builtin_constant_p ((((long unsigned int) (__buflen)) <= (__builtin_object_size (__buf, 2 > 1)) / (sizeof (char)))) && (((long unsigned int) (__buflen)) <= (__builtin_object_size (__buf, 2 > 1)) / (sizeof (char)))) ? __ptsname_r_alias (__fd, __buf, __buflen) : ((((__typeof (__buflen)) 0 < (__typeof (__buflen)) -1 || (__builtin_constant_p (__buflen) && (__buflen) > 0)) && __builtin_constant_p ((((long unsigned int) (__buflen)) <= (__builtin_object_size (__buf, 2 > 1)) / (sizeof (char)))) && !(((long unsigned int) (__buflen)) <= (__builtin_object_size (__buf, 2 > 1)) / (sizeof (char)))) ? __ptsname_r_chk_warn (__fd, __buf, __buflen, __builtin_object_size (__buf, 2 > 1)) : __ptsname_r_chk (__fd, __buf, __buflen, __builtin_object_size (__buf, 2 > 1))))

                           ;
}


extern int __wctomb_chk (char *__s, wchar_t __wchar, size_t __buflen)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));
extern int __wctomb_alias (char *__s, wchar_t __wchar) __asm__ ("" "wctomb") __attribute__ ((__nothrow__ , __leaf__))
              __attribute__ ((__warn_unused_result__));

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) int
__attribute__ ((__nothrow__ , __leaf__)) wctomb (char *__s, wchar_t __wchar)
{







  if (__builtin_object_size (__s, 2 > 1) != (size_t) -1
      && 16 > __builtin_object_size (__s, 2 > 1))
    return __wctomb_chk (__s, __wchar, __builtin_object_size (__s, 2 > 1));
  return __wctomb_alias (__s, __wchar);
}


extern size_t __mbstowcs_chk (wchar_t *__restrict __dst,
         const char *__restrict __src,
         size_t __len, size_t __dstlen) __attribute__ ((__nothrow__ , __leaf__))
    __attribute__ ((__access__ (__write_only__, 1, 3))) __attribute__ ((__access__ (__read_only__, 2)));
extern size_t __mbstowcs_alias (wchar_t *__restrict __dst, const char *__restrict __src, size_t __len) __asm__ ("" "mbstowcs") __attribute__ ((__nothrow__ , __leaf__))



    __attribute__ ((__access__ (__write_only__, 1, 3))) __attribute__ ((__access__ (__read_only__, 2)));
extern size_t __mbstowcs_chk_warn (wchar_t *__restrict __dst, const char *__restrict __src, size_t __len, size_t __dstlen) __asm__ ("" "__mbstowcs_chk") __attribute__ ((__nothrow__ , __leaf__))



     __attribute__((__warning__ ("mbstowcs called with dst buffer smaller than len " "* sizeof (wchar_t)")))
                        ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) size_t
__attribute__ ((__nothrow__ , __leaf__)) mbstowcs (wchar_t *__restrict __dst, const char *__restrict __src, size_t __len)

{
  return ((((__typeof (__len)) 0 < (__typeof (__len)) -1 || (__builtin_constant_p (__len) && (__len) > 0)) && __builtin_constant_p ((((long unsigned int) (__len)) <= (__builtin_object_size (__dst, 2 > 1)) / (sizeof (wchar_t)))) && (((long unsigned int) (__len)) <= (__builtin_object_size (__dst, 2 > 1)) / (sizeof (wchar_t)))) ? __mbstowcs_alias (__dst, __src, __len) : ((((__typeof (__len)) 0 < (__typeof (__len)) -1 || (__builtin_constant_p (__len) && (__len) > 0)) && __builtin_constant_p ((((long unsigned int) (__len)) <= (__builtin_object_size (__dst, 2 > 1)) / (sizeof (wchar_t)))) && !(((long unsigned int) (__len)) <= (__builtin_object_size (__dst, 2 > 1)) / (sizeof (wchar_t)))) ? __mbstowcs_chk_warn (__dst, __src, __len, (__builtin_object_size (__dst, 2 > 1)) / (sizeof (wchar_t))) : __mbstowcs_chk (__dst, __src, __len, (__builtin_object_size (__dst, 2 > 1)) / (sizeof (wchar_t)))))

                           ;
}


extern size_t __wcstombs_chk (char *__restrict __dst,
         const wchar_t *__restrict __src,
         size_t __len, size_t __dstlen) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__access__ (__write_only__, 1, 3))) __attribute__ ((__access__ (__read_only__, 2)));
extern size_t __wcstombs_alias (char *__restrict __dst, const wchar_t *__restrict __src, size_t __len) __asm__ ("" "wcstombs") __attribute__ ((__nothrow__ , __leaf__))



  __attribute__ ((__access__ (__write_only__, 1, 3))) __attribute__ ((__access__ (__read_only__, 2)));
extern size_t __wcstombs_chk_warn (char *__restrict __dst, const wchar_t *__restrict __src, size_t __len, size_t __dstlen) __asm__ ("" "__wcstombs_chk") __attribute__ ((__nothrow__ , __leaf__))



     __attribute__((__warning__ ("wcstombs called with dst buffer smaller than len")));

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) size_t
__attribute__ ((__nothrow__ , __leaf__)) wcstombs (char *__restrict __dst, const wchar_t *__restrict __src, size_t __len)

{
  return ((((__typeof (__len)) 0 < (__typeof (__len)) -1 || (__builtin_constant_p (__len) && (__len) > 0)) && __builtin_constant_p ((((long unsigned int) (__len)) <= (__builtin_object_size (__dst, 2 > 1)) / (sizeof (char)))) && (((long unsigned int) (__len)) <= (__builtin_object_size (__dst, 2 > 1)) / (sizeof (char)))) ? __wcstombs_alias (__dst, __src, __len) : ((((__typeof (__len)) 0 < (__typeof (__len)) -1 || (__builtin_constant_p (__len) && (__len) > 0)) && __builtin_constant_p ((((long unsigned int) (__len)) <= (__builtin_object_size (__dst, 2 > 1)) / (sizeof (char)))) && !(((long unsigned int) (__len)) <= (__builtin_object_size (__dst, 2 > 1)) / (sizeof (char)))) ? __wcstombs_chk_warn (__dst, __src, __len, __builtin_object_size (__dst, 2 > 1)) : __wcstombs_chk (__dst, __src, __len, __builtin_object_size (__dst, 2 > 1))))

                         ;
}
# 1028 "/usr/include/stdlib.h" 2 3 4








# 69 "stress-ng.h" 2
# 1 "/usr/include/string.h" 1 3 4
# 26 "/usr/include/string.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/string.h" 2 3 4






# 1 "/usr/lib/gcc/aarch64-linux-gnu/11/include/stddef.h" 1 3 4
# 34 "/usr/include/string.h" 2 3 4
# 43 "/usr/include/string.h" 3 4
extern void *memcpy (void *__restrict __dest, const void *__restrict __src,
       size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern void *memmove (void *__dest, const void *__src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));





extern void *memccpy (void *__restrict __dest, const void *__restrict __src,
        int __c, size_t __n)
    __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__access__ (__write_only__, 1, 4)));




extern void *memset (void *__s, int __c, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int memcmp (const void *__s1, const void *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 80 "/usr/include/string.h" 3 4
extern int __memcmpeq (const void *__s1, const void *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 107 "/usr/include/string.h" 3 4
extern void *memchr (const void *__s, int __c, size_t __n)
      __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 120 "/usr/include/string.h" 3 4
extern void *rawmemchr (const void *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 133 "/usr/include/string.h" 3 4
extern void *memrchr (const void *__s, int __c, size_t __n)
      __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)))
      __attribute__ ((__access__ (__read_only__, 1, 3)));





extern char *strcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern char *strncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *strcat (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern char *strncat (char *__restrict __dest, const char *__restrict __src,
        size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcmp (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int strncmp (const char *__s1, const char *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcoll (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern size_t strxfrm (char *__restrict __dest,
         const char *__restrict __src, size_t __n)
    __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2))) __attribute__ ((__access__ (__write_only__, 1, 3)));






extern int strcoll_l (const char *__s1, const char *__s2, locale_t __l)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));


extern size_t strxfrm_l (char *__dest, const char *__src, size_t __n,
    locale_t __l) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4)))
     __attribute__ ((__access__ (__write_only__, 1, 3)));





extern char *strdup (const char *__s)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));






extern char *strndup (const char *__string, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));
# 246 "/usr/include/string.h" 3 4
extern char *strchr (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 273 "/usr/include/string.h" 3 4
extern char *strrchr (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 286 "/usr/include/string.h" 3 4
extern char *strchrnul (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern size_t strcspn (const char *__s, const char *__reject)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern size_t strspn (const char *__s, const char *__accept)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 323 "/usr/include/string.h" 3 4
extern char *strpbrk (const char *__s, const char *__accept)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 350 "/usr/include/string.h" 3 4
extern char *strstr (const char *__haystack, const char *__needle)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));




extern char *strtok (char *__restrict __s, const char *__restrict __delim)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



extern char *__strtok_r (char *__restrict __s,
    const char *__restrict __delim,
    char **__restrict __save_ptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));

extern char *strtok_r (char *__restrict __s, const char *__restrict __delim,
         char **__restrict __save_ptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));
# 380 "/usr/include/string.h" 3 4
extern char *strcasestr (const char *__haystack, const char *__needle)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));







extern void *memmem (const void *__haystack, size_t __haystacklen,
       const void *__needle, size_t __needlelen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 3)))
    __attribute__ ((__access__ (__read_only__, 1, 2)))
    __attribute__ ((__access__ (__read_only__, 3, 4)));



extern void *__mempcpy (void *__restrict __dest,
   const void *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern void *mempcpy (void *__restrict __dest,
        const void *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern size_t strlen (const char *__s)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));




extern size_t strnlen (const char *__string, size_t __maxlen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));




extern char *strerror (int __errnum) __attribute__ ((__nothrow__ , __leaf__));
# 444 "/usr/include/string.h" 3 4
extern char *strerror_r (int __errnum, char *__buf, size_t __buflen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2))) __attribute__ ((__warn_unused_result__)) __attribute__ ((__access__ (__write_only__, 2, 3)));




extern const char *strerrordesc_np (int __err) __attribute__ ((__nothrow__ , __leaf__));

extern const char *strerrorname_np (int __err) __attribute__ ((__nothrow__ , __leaf__));





extern char *strerror_l (int __errnum, locale_t __l) __attribute__ ((__nothrow__ , __leaf__));



# 1 "/usr/include/strings.h" 1 3 4
# 23 "/usr/include/strings.h" 3 4
# 1 "/usr/lib/gcc/aarch64-linux-gnu/11/include/stddef.h" 1 3 4
# 24 "/usr/include/strings.h" 2 3 4










extern int bcmp (const void *__s1, const void *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern void bcopy (const void *__src, void *__dest, size_t __n)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern void bzero (void *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 68 "/usr/include/strings.h" 3 4
extern char *index (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 96 "/usr/include/strings.h" 3 4
extern char *rindex (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));






extern int ffs (int __i) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));





extern int ffsl (long int __l) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
__extension__ extern int ffsll (long long int __ll)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern int strcasecmp (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strncasecmp (const char *__s1, const char *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));






extern int strcasecmp_l (const char *__s1, const char *__s2, locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));



extern int strncasecmp_l (const char *__s1, const char *__s2,
     size_t __n, locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 4)));








# 1 "/usr/include/aarch64-linux-gnu/bits/strings_fortified.h" 1 3 4
# 22 "/usr/include/aarch64-linux-gnu/bits/strings_fortified.h" 3 4
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void
__attribute__ ((__nothrow__ , __leaf__)) bcopy (const void *__src, void *__dest, size_t __len)
{
  (void) __builtin___memmove_chk (__dest, __src, __len,
      __builtin_object_size (__dest, 0));
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void
__attribute__ ((__nothrow__ , __leaf__)) bzero (void *__dest, size_t __len)
{
  (void) __builtin___memset_chk (__dest, '\0', __len,
     __builtin_object_size (__dest, 0));
}
# 145 "/usr/include/strings.h" 2 3 4
# 463 "/usr/include/string.h" 2 3 4



extern void explicit_bzero (void *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)))
    __attribute__ ((__access__ (__write_only__, 1, 2)));



extern char *strsep (char **__restrict __stringp,
       const char *__restrict __delim)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern char *strsignal (int __sig) __attribute__ ((__nothrow__ , __leaf__));



extern const char *sigabbrev_np (int __sig) __attribute__ ((__nothrow__ , __leaf__));


extern const char *sigdescr_np (int __sig) __attribute__ ((__nothrow__ , __leaf__));



extern char *__stpcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern char *stpcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern char *__stpncpy (char *__restrict __dest,
   const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern char *stpncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern int strverscmp (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *strfry (char *__string) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern void *memfrob (void *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)))
    __attribute__ ((__access__ (__read_write__, 1, 2)));
# 527 "/usr/include/string.h" 3 4
extern char *basename (const char *__filename) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));







# 1 "/usr/include/aarch64-linux-gnu/bits/string_fortified.h" 1 3 4
# 25 "/usr/include/aarch64-linux-gnu/bits/string_fortified.h" 3 4
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void *
__attribute__ ((__nothrow__ , __leaf__)) memcpy (void *__restrict __dest, const void *__restrict __src, size_t __len)

{
  return __builtin___memcpy_chk (__dest, __src, __len,
     __builtin_object_size (__dest, 0));
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void *
__attribute__ ((__nothrow__ , __leaf__)) memmove (void *__dest, const void *__src, size_t __len)
{
  return __builtin___memmove_chk (__dest, __src, __len,
      __builtin_object_size (__dest, 0));
}


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void *
__attribute__ ((__nothrow__ , __leaf__)) mempcpy (void *__restrict __dest, const void *__restrict __src, size_t __len)

{
  return __builtin___mempcpy_chk (__dest, __src, __len,
      __builtin_object_size (__dest, 0));
}
# 56 "/usr/include/aarch64-linux-gnu/bits/string_fortified.h" 3 4
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void *
__attribute__ ((__nothrow__ , __leaf__)) memset (void *__dest, int __ch, size_t __len)
{
  return __builtin___memset_chk (__dest, __ch, __len,
     __builtin_object_size (__dest, 0));
}




void __explicit_bzero_chk (void *__dest, size_t __len, size_t __destlen)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__access__ (__write_only__, 1, 2)));

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void
__attribute__ ((__nothrow__ , __leaf__)) explicit_bzero (void *__dest, size_t __len)
{
  __explicit_bzero_chk (__dest, __len, __builtin_object_size (__dest, 0));
}


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) char *
__attribute__ ((__nothrow__ , __leaf__)) strcpy (char *__restrict __dest, const char *__restrict __src)
{
  return __builtin___strcpy_chk (__dest, __src, __builtin_object_size (__dest, 2 > 1));
}


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) char *
__attribute__ ((__nothrow__ , __leaf__)) stpcpy (char *__restrict __dest, const char *__restrict __src)
{
  return __builtin___stpcpy_chk (__dest, __src, __builtin_object_size (__dest, 2 > 1));
}



extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) char *
__attribute__ ((__nothrow__ , __leaf__)) strncpy (char *__restrict __dest, const char *__restrict __src, size_t __len)

{
  return __builtin___strncpy_chk (__dest, __src, __len,
      __builtin_object_size (__dest, 2 > 1));
}



extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) char *
__attribute__ ((__nothrow__ , __leaf__)) stpncpy (char *__dest, const char *__src, size_t __n)
{
  return __builtin___stpncpy_chk (__dest, __src, __n,
      __builtin_object_size (__dest, 2 > 1));
}
# 127 "/usr/include/aarch64-linux-gnu/bits/string_fortified.h" 3 4
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) char *
__attribute__ ((__nothrow__ , __leaf__)) strcat (char *__restrict __dest, const char *__restrict __src)
{
  return __builtin___strcat_chk (__dest, __src, __builtin_object_size (__dest, 2 > 1));
}


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) char *
__attribute__ ((__nothrow__ , __leaf__)) strncat (char *__restrict __dest, const char *__restrict __src, size_t __len)

{
  return __builtin___strncat_chk (__dest, __src, __len,
      __builtin_object_size (__dest, 2 > 1));
}
# 536 "/usr/include/string.h" 2 3 4




# 70 "stress-ng.h" 2
# 1 "/usr/include/time.h" 1 3 4
# 29 "/usr/include/time.h" 3 4
# 1 "/usr/lib/gcc/aarch64-linux-gnu/11/include/stddef.h" 1 3 4
# 30 "/usr/include/time.h" 2 3 4



# 1 "/usr/include/aarch64-linux-gnu/bits/time.h" 1 3 4
# 73 "/usr/include/aarch64-linux-gnu/bits/time.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/timex.h" 1 3 4
# 26 "/usr/include/aarch64-linux-gnu/bits/timex.h" 3 4
struct timex
{
# 58 "/usr/include/aarch64-linux-gnu/bits/timex.h" 3 4
  unsigned int modes;
  __syscall_slong_t offset;
  __syscall_slong_t freq;
  __syscall_slong_t maxerror;
  __syscall_slong_t esterror;
  int status;
  __syscall_slong_t constant;
  __syscall_slong_t precision;
  __syscall_slong_t tolerance;
  struct timeval time;
  __syscall_slong_t tick;
  __syscall_slong_t ppsfreq;
  __syscall_slong_t jitter;
  int shift;
  __syscall_slong_t stabil;
  __syscall_slong_t jitcnt;
  __syscall_slong_t calcnt;
  __syscall_slong_t errcnt;
  __syscall_slong_t stbcnt;

  int tai;


  int :32; int :32; int :32; int :32;
  int :32; int :32; int :32; int :32;
  int :32; int :32; int :32;

};
# 74 "/usr/include/aarch64-linux-gnu/bits/time.h" 2 3 4




extern int clock_adjtime (__clockid_t __clock_id, struct timex *__utx) __attribute__ ((__nothrow__ , __leaf__));
# 90 "/usr/include/aarch64-linux-gnu/bits/time.h" 3 4

# 34 "/usr/include/time.h" 2 3 4





# 1 "/usr/include/aarch64-linux-gnu/bits/types/struct_tm.h" 1 3 4






struct tm
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;


  long int tm_gmtoff;
  const char *tm_zone;




};
# 40 "/usr/include/time.h" 2 3 4
# 48 "/usr/include/time.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/types/struct_itimerspec.h" 1 3 4







struct itimerspec
  {
    struct timespec it_interval;
    struct timespec it_value;
  };
# 49 "/usr/include/time.h" 2 3 4
struct sigevent;
# 68 "/usr/include/time.h" 3 4




extern clock_t clock (void) __attribute__ ((__nothrow__ , __leaf__));



extern time_t time (time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));


extern double difftime (time_t __time1, time_t __time0)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern time_t mktime (struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));
# 100 "/usr/include/time.h" 3 4
extern size_t strftime (char *__restrict __s, size_t __maxsize,
   const char *__restrict __format,
   const struct tm *__restrict __tp) __attribute__ ((__nothrow__ , __leaf__));




extern char *strptime (const char *__restrict __s,
         const char *__restrict __fmt, struct tm *__tp)
     __attribute__ ((__nothrow__ , __leaf__));






extern size_t strftime_l (char *__restrict __s, size_t __maxsize,
     const char *__restrict __format,
     const struct tm *__restrict __tp,
     locale_t __loc) __attribute__ ((__nothrow__ , __leaf__));



extern char *strptime_l (const char *__restrict __s,
    const char *__restrict __fmt, struct tm *__tp,
    locale_t __loc) __attribute__ ((__nothrow__ , __leaf__));






extern struct tm *gmtime (const time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));



extern struct tm *localtime (const time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));
# 154 "/usr/include/time.h" 3 4
extern struct tm *gmtime_r (const time_t *__restrict __timer,
       struct tm *__restrict __tp) __attribute__ ((__nothrow__ , __leaf__));



extern struct tm *localtime_r (const time_t *__restrict __timer,
          struct tm *__restrict __tp) __attribute__ ((__nothrow__ , __leaf__));
# 179 "/usr/include/time.h" 3 4
extern char *asctime (const struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));



extern char *ctime (const time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));
# 197 "/usr/include/time.h" 3 4
extern char *asctime_r (const struct tm *__restrict __tp,
   char *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__));



extern char *ctime_r (const time_t *__restrict __timer,
        char *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__));
# 217 "/usr/include/time.h" 3 4
extern char *__tzname[2];
extern int __daylight;
extern long int __timezone;




extern char *tzname[2];



extern void tzset (void) __attribute__ ((__nothrow__ , __leaf__));



extern int daylight;
extern long int timezone;
# 249 "/usr/include/time.h" 3 4
extern time_t timegm (struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));

extern time_t timelocal (struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));
# 262 "/usr/include/time.h" 3 4
extern int dysize (int __year) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
# 272 "/usr/include/time.h" 3 4
extern int nanosleep (const struct timespec *__requested_time,
        struct timespec *__remaining);


extern int clock_getres (clockid_t __clock_id, struct timespec *__res) __attribute__ ((__nothrow__ , __leaf__));


extern int clock_gettime (clockid_t __clock_id, struct timespec *__tp) __attribute__ ((__nothrow__ , __leaf__));


extern int clock_settime (clockid_t __clock_id, const struct timespec *__tp)
     __attribute__ ((__nothrow__ , __leaf__));
# 311 "/usr/include/time.h" 3 4
extern int clock_nanosleep (clockid_t __clock_id, int __flags,
       const struct timespec *__req,
       struct timespec *__rem);
# 326 "/usr/include/time.h" 3 4
extern int clock_getcpuclockid (pid_t __pid, clockid_t *__clock_id) __attribute__ ((__nothrow__ , __leaf__));




extern int timer_create (clockid_t __clock_id,
    struct sigevent *__restrict __evp,
    timer_t *__restrict __timerid) __attribute__ ((__nothrow__ , __leaf__));


extern int timer_delete (timer_t __timerid) __attribute__ ((__nothrow__ , __leaf__));



extern int timer_settime (timer_t __timerid, int __flags,
     const struct itimerspec *__restrict __value,
     struct itimerspec *__restrict __ovalue) __attribute__ ((__nothrow__ , __leaf__));


extern int timer_gettime (timer_t __timerid, struct itimerspec *__value)
     __attribute__ ((__nothrow__ , __leaf__));
# 364 "/usr/include/time.h" 3 4
extern int timer_getoverrun (timer_t __timerid) __attribute__ ((__nothrow__ , __leaf__));






extern int timespec_get (struct timespec *__ts, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 387 "/usr/include/time.h" 3 4
extern int timespec_getres (struct timespec *__ts, int __base)
     __attribute__ ((__nothrow__ , __leaf__));
# 413 "/usr/include/time.h" 3 4
extern int getdate_err;
# 422 "/usr/include/time.h" 3 4
extern struct tm *getdate (const char *__string);
# 436 "/usr/include/time.h" 3 4
extern int getdate_r (const char *__restrict __string,
        struct tm *__restrict __resbufp);



# 71 "stress-ng.h" 2


# 1 "config.h" 1
# 74 "stress-ng.h" 2
# 94 "stress-ng.h"
# 1 "/usr/include/arpa/inet.h" 1 3 4
# 22 "/usr/include/arpa/inet.h" 3 4
# 1 "/usr/include/netinet/in.h" 1 3 4
# 23 "/usr/include/netinet/in.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/sys/socket.h" 1 3 4
# 24 "/usr/include/aarch64-linux-gnu/sys/socket.h" 3 4




# 1 "/usr/lib/gcc/aarch64-linux-gnu/11/include/stddef.h" 1 3 4
# 29 "/usr/include/aarch64-linux-gnu/sys/socket.h" 2 3 4




# 1 "/usr/include/aarch64-linux-gnu/bits/socket.h" 1 3 4
# 27 "/usr/include/aarch64-linux-gnu/bits/socket.h" 3 4
# 1 "/usr/lib/gcc/aarch64-linux-gnu/11/include/stddef.h" 1 3 4
# 28 "/usr/include/aarch64-linux-gnu/bits/socket.h" 2 3 4
# 38 "/usr/include/aarch64-linux-gnu/bits/socket.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/socket_type.h" 1 3 4
# 24 "/usr/include/aarch64-linux-gnu/bits/socket_type.h" 3 4
enum __socket_type
{
  SOCK_STREAM = 1,


  SOCK_DGRAM = 2,


  SOCK_RAW = 3,

  SOCK_RDM = 4,

  SOCK_SEQPACKET = 5,


  SOCK_DCCP = 6,

  SOCK_PACKET = 10,







  SOCK_CLOEXEC = 02000000,


  SOCK_NONBLOCK = 00004000


};
# 39 "/usr/include/aarch64-linux-gnu/bits/socket.h" 2 3 4
# 177 "/usr/include/aarch64-linux-gnu/bits/socket.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/sockaddr.h" 1 3 4
# 28 "/usr/include/aarch64-linux-gnu/bits/sockaddr.h" 3 4
typedef unsigned short int sa_family_t;
# 178 "/usr/include/aarch64-linux-gnu/bits/socket.h" 2 3 4


struct sockaddr
  {
    sa_family_t sa_family;
    char sa_data[14];
  };
# 193 "/usr/include/aarch64-linux-gnu/bits/socket.h" 3 4
struct sockaddr_storage
  {
    sa_family_t ss_family;
    char __ss_padding[(128 - (sizeof (unsigned short int)) - sizeof (unsigned long int))];
    unsigned long int __ss_align;
  };



enum
  {
    MSG_OOB = 0x01,

    MSG_PEEK = 0x02,

    MSG_DONTROUTE = 0x04,



    MSG_TRYHARD = MSG_DONTROUTE,


    MSG_CTRUNC = 0x08,

    MSG_PROXY = 0x10,

    MSG_TRUNC = 0x20,

    MSG_DONTWAIT = 0x40,

    MSG_EOR = 0x80,

    MSG_WAITALL = 0x100,

    MSG_FIN = 0x200,

    MSG_SYN = 0x400,

    MSG_CONFIRM = 0x800,

    MSG_RST = 0x1000,

    MSG_ERRQUEUE = 0x2000,

    MSG_NOSIGNAL = 0x4000,

    MSG_MORE = 0x8000,

    MSG_WAITFORONE = 0x10000,

    MSG_BATCH = 0x40000,

    MSG_ZEROCOPY = 0x4000000,

    MSG_FASTOPEN = 0x20000000,


    MSG_CMSG_CLOEXEC = 0x40000000



  };




struct msghdr
  {
    void *msg_name;
    socklen_t msg_namelen;

    struct iovec *msg_iov;
    size_t msg_iovlen;

    void *msg_control;
    size_t msg_controllen;




    int msg_flags;
  };


struct cmsghdr
  {
    size_t cmsg_len;




    int cmsg_level;
    int cmsg_type;

    __extension__ unsigned char __cmsg_data [];

  };
# 307 "/usr/include/aarch64-linux-gnu/bits/socket.h" 3 4
extern struct cmsghdr *__cmsg_nxthdr (struct msghdr *__mhdr,
          struct cmsghdr *__cmsg) __attribute__ ((__nothrow__ , __leaf__));




extern __inline __attribute__ ((__gnu_inline__)) struct cmsghdr *
__attribute__ ((__nothrow__ , __leaf__)) __cmsg_nxthdr (struct msghdr *__mhdr, struct cmsghdr *__cmsg)
{
  if ((size_t) __cmsg->cmsg_len < sizeof (struct cmsghdr))

    return (struct cmsghdr *) 0;

  __cmsg = (struct cmsghdr *) ((unsigned char *) __cmsg
          + (((__cmsg->cmsg_len) + sizeof (size_t) - 1) & (size_t) ~(sizeof (size_t) - 1)));
  if ((unsigned char *) (__cmsg + 1) > ((unsigned char *) __mhdr->msg_control
     + __mhdr->msg_controllen)
      || ((unsigned char *) __cmsg + (((__cmsg->cmsg_len) + sizeof (size_t) - 1) & (size_t) ~(sizeof (size_t) - 1))
   > ((unsigned char *) __mhdr->msg_control + __mhdr->msg_controllen)))

    return (struct cmsghdr *) 0;
  return __cmsg;
}




enum
  {
    SCM_RIGHTS = 0x01


    , SCM_CREDENTIALS = 0x02


  };



struct ucred
{
  pid_t pid;
  uid_t uid;
  gid_t gid;
};




# 1 "/usr/include/aarch64-linux-gnu/asm/socket.h" 1 3 4
# 1 "/usr/include/asm-generic/socket.h" 1 3 4





# 1 "/usr/include/aarch64-linux-gnu/asm/sockios.h" 1 3 4
# 1 "/usr/include/asm-generic/sockios.h" 1 3 4
# 2 "/usr/include/aarch64-linux-gnu/asm/sockios.h" 2 3 4
# 7 "/usr/include/asm-generic/socket.h" 2 3 4
# 2 "/usr/include/aarch64-linux-gnu/asm/socket.h" 2 3 4
# 357 "/usr/include/aarch64-linux-gnu/bits/socket.h" 2 3 4






struct linger
  {
    int l_onoff;
    int l_linger;
  };
# 34 "/usr/include/aarch64-linux-gnu/sys/socket.h" 2 3 4


# 1 "/usr/include/aarch64-linux-gnu/bits/types/struct_osockaddr.h" 1 3 4





struct osockaddr
{
  unsigned short int sa_family;
  unsigned char sa_data[14];
};
# 37 "/usr/include/aarch64-linux-gnu/sys/socket.h" 2 3 4




enum
{
  SHUT_RD = 0,

  SHUT_WR,

  SHUT_RDWR

};
# 79 "/usr/include/aarch64-linux-gnu/sys/socket.h" 3 4
typedef union { struct sockaddr *__restrict __sockaddr__; struct sockaddr_at *__restrict __sockaddr_at__; struct sockaddr_ax25 *__restrict __sockaddr_ax25__; struct sockaddr_dl *__restrict __sockaddr_dl__; struct sockaddr_eon *__restrict __sockaddr_eon__; struct sockaddr_in *__restrict __sockaddr_in__; struct sockaddr_in6 *__restrict __sockaddr_in6__; struct sockaddr_inarp *__restrict __sockaddr_inarp__; struct sockaddr_ipx *__restrict __sockaddr_ipx__; struct sockaddr_iso *__restrict __sockaddr_iso__; struct sockaddr_ns *__restrict __sockaddr_ns__; struct sockaddr_un *__restrict __sockaddr_un__; struct sockaddr_x25 *__restrict __sockaddr_x25__;
       } __SOCKADDR_ARG __attribute__ ((__transparent_union__));


typedef union { const struct sockaddr *__restrict __sockaddr__; const struct sockaddr_at *__restrict __sockaddr_at__; const struct sockaddr_ax25 *__restrict __sockaddr_ax25__; const struct sockaddr_dl *__restrict __sockaddr_dl__; const struct sockaddr_eon *__restrict __sockaddr_eon__; const struct sockaddr_in *__restrict __sockaddr_in__; const struct sockaddr_in6 *__restrict __sockaddr_in6__; const struct sockaddr_inarp *__restrict __sockaddr_inarp__; const struct sockaddr_ipx *__restrict __sockaddr_ipx__; const struct sockaddr_iso *__restrict __sockaddr_iso__; const struct sockaddr_ns *__restrict __sockaddr_ns__; const struct sockaddr_un *__restrict __sockaddr_un__; const struct sockaddr_x25 *__restrict __sockaddr_x25__;
       } __CONST_SOCKADDR_ARG __attribute__ ((__transparent_union__));





struct mmsghdr
  {
    struct msghdr msg_hdr;
    unsigned int msg_len;

  };






extern int socket (int __domain, int __type, int __protocol) __attribute__ ((__nothrow__ , __leaf__));





extern int socketpair (int __domain, int __type, int __protocol,
         int __fds[2]) __attribute__ ((__nothrow__ , __leaf__));


extern int bind (int __fd, __CONST_SOCKADDR_ARG __addr, socklen_t __len)
     __attribute__ ((__nothrow__ , __leaf__));


extern int getsockname (int __fd, __SOCKADDR_ARG __addr,
   socklen_t *__restrict __len) __attribute__ ((__nothrow__ , __leaf__));
# 126 "/usr/include/aarch64-linux-gnu/sys/socket.h" 3 4
extern int connect (int __fd, __CONST_SOCKADDR_ARG __addr, socklen_t __len);



extern int getpeername (int __fd, __SOCKADDR_ARG __addr,
   socklen_t *__restrict __len) __attribute__ ((__nothrow__ , __leaf__));






extern ssize_t send (int __fd, const void *__buf, size_t __n, int __flags);






extern ssize_t recv (int __fd, void *__buf, size_t __n, int __flags);






extern ssize_t sendto (int __fd, const void *__buf, size_t __n,
         int __flags, __CONST_SOCKADDR_ARG __addr,
         socklen_t __addr_len);
# 163 "/usr/include/aarch64-linux-gnu/sys/socket.h" 3 4
extern ssize_t recvfrom (int __fd, void *__restrict __buf, size_t __n,
    int __flags, __SOCKADDR_ARG __addr,
    socklen_t *__restrict __addr_len);
# 174 "/usr/include/aarch64-linux-gnu/sys/socket.h" 3 4
extern ssize_t sendmsg (int __fd, const struct msghdr *__message,
   int __flags);
# 195 "/usr/include/aarch64-linux-gnu/sys/socket.h" 3 4
extern int sendmmsg (int __fd, struct mmsghdr *__vmessages,
       unsigned int __vlen, int __flags);
# 216 "/usr/include/aarch64-linux-gnu/sys/socket.h" 3 4
extern ssize_t recvmsg (int __fd, struct msghdr *__message, int __flags);
# 235 "/usr/include/aarch64-linux-gnu/sys/socket.h" 3 4
extern int recvmmsg (int __fd, struct mmsghdr *__vmessages,
       unsigned int __vlen, int __flags,
       struct timespec *__tmo);
# 255 "/usr/include/aarch64-linux-gnu/sys/socket.h" 3 4
extern int getsockopt (int __fd, int __level, int __optname,
         void *__restrict __optval,
         socklen_t *__restrict __optlen) __attribute__ ((__nothrow__ , __leaf__));
# 277 "/usr/include/aarch64-linux-gnu/sys/socket.h" 3 4
extern int setsockopt (int __fd, int __level, int __optname,
         const void *__optval, socklen_t __optlen) __attribute__ ((__nothrow__ , __leaf__));
# 296 "/usr/include/aarch64-linux-gnu/sys/socket.h" 3 4
extern int listen (int __fd, int __n) __attribute__ ((__nothrow__ , __leaf__));
# 306 "/usr/include/aarch64-linux-gnu/sys/socket.h" 3 4
extern int accept (int __fd, __SOCKADDR_ARG __addr,
     socklen_t *__restrict __addr_len);






extern int accept4 (int __fd, __SOCKADDR_ARG __addr,
      socklen_t *__restrict __addr_len, int __flags);
# 324 "/usr/include/aarch64-linux-gnu/sys/socket.h" 3 4
extern int shutdown (int __fd, int __how) __attribute__ ((__nothrow__ , __leaf__));




extern int sockatmark (int __fd) __attribute__ ((__nothrow__ , __leaf__));







extern int isfdtype (int __fd, int __fdtype) __attribute__ ((__nothrow__ , __leaf__));





# 1 "/usr/include/aarch64-linux-gnu/bits/socket2.h" 1 3 4
# 23 "/usr/include/aarch64-linux-gnu/bits/socket2.h" 3 4
extern ssize_t __recv_chk (int __fd, void *__buf, size_t __n, size_t __buflen,
      int __flags);
extern ssize_t __recv_alias (int __fd, void *__buf, size_t __n, int __flags) __asm__ ("" "recv")
                          ;
extern ssize_t __recv_chk_warn (int __fd, void *__buf, size_t __n, size_t __buflen, int __flags) __asm__ ("" "__recv_chk")


     __attribute__((__warning__ ("recv called with bigger length than size of destination " "buffer")))
            ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) ssize_t
recv (int __fd, void *__buf, size_t __n, int __flags)
{
  size_t sz = __builtin_object_size (__buf, 0);
  if ((((__typeof (__n)) 0 < (__typeof (__n)) -1 || (__builtin_constant_p (__n) && (__n) > 0)) && __builtin_constant_p ((((long unsigned int) (__n)) <= (sz) / (sizeof (char)))) && (((long unsigned int) (__n)) <= (sz) / (sizeof (char)))))
    return __recv_alias (__fd, __buf, __n, __flags);
  if ((((__typeof (__n)) 0 < (__typeof (__n)) -1 || (__builtin_constant_p (__n) && (__n) > 0)) && __builtin_constant_p ((((long unsigned int) (__n)) <= (sz) / (sizeof (char)))) && !(((long unsigned int) (__n)) <= (sz) / (sizeof (char)))))
    return __recv_chk_warn (__fd, __buf, __n, sz, __flags);
  return __recv_chk (__fd, __buf, __n, sz, __flags);
}

extern ssize_t __recvfrom_chk (int __fd, void *__restrict __buf, size_t __n,
          size_t __buflen, int __flags,
          __SOCKADDR_ARG __addr,
          socklen_t *__restrict __addr_len);
extern ssize_t __recvfrom_alias (int __fd, void *__restrict __buf, size_t __n, int __flags, __SOCKADDR_ARG __addr, socklen_t *__restrict __addr_len) __asm__ ("" "recvfrom")


                                                   ;
extern ssize_t __recvfrom_chk_warn (int __fd, void *__restrict __buf, size_t __n, size_t __buflen, int __flags, __SOCKADDR_ARG __addr, socklen_t *__restrict __addr_len) __asm__ ("" "__recvfrom_chk")




     __attribute__((__warning__ ("recvfrom called with bigger length than size of " "destination buffer")))
                        ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) ssize_t
recvfrom (int __fd, void *__restrict __buf, size_t __n, int __flags,
   __SOCKADDR_ARG __addr, socklen_t *__restrict __addr_len)
{
  size_t sz = __builtin_object_size (__buf, 0);
  if ((((__typeof (__n)) 0 < (__typeof (__n)) -1 || (__builtin_constant_p (__n) && (__n) > 0)) && __builtin_constant_p ((((long unsigned int) (__n)) <= (sz) / (sizeof (char)))) && (((long unsigned int) (__n)) <= (sz) / (sizeof (char)))))
    return __recvfrom_alias (__fd, __buf, __n, __flags, __addr, __addr_len);
  if ((((__typeof (__n)) 0 < (__typeof (__n)) -1 || (__builtin_constant_p (__n) && (__n) > 0)) && __builtin_constant_p ((((long unsigned int) (__n)) <= (sz) / (sizeof (char)))) && !(((long unsigned int) (__n)) <= (sz) / (sizeof (char)))))
    return __recvfrom_chk_warn (__fd, __buf, __n, sz, __flags, __addr,
    __addr_len);
  return __recvfrom_chk (__fd, __buf, __n, sz, __flags, __addr, __addr_len);
}
# 344 "/usr/include/aarch64-linux-gnu/sys/socket.h" 2 3 4



# 24 "/usr/include/netinet/in.h" 2 3 4






typedef uint32_t in_addr_t;
struct in_addr
  {
    in_addr_t s_addr;
  };


# 1 "/usr/include/aarch64-linux-gnu/bits/in.h" 1 3 4
# 143 "/usr/include/aarch64-linux-gnu/bits/in.h" 3 4
struct ip_opts
  {
    struct in_addr ip_dst;
    char ip_opts[40];
  };


struct ip_mreqn
  {
    struct in_addr imr_multiaddr;
    struct in_addr imr_address;
    int imr_ifindex;
  };


struct in_pktinfo
  {
    int ipi_ifindex;
    struct in_addr ipi_spec_dst;
    struct in_addr ipi_addr;
  };
# 38 "/usr/include/netinet/in.h" 2 3 4


enum
  {
    IPPROTO_IP = 0,

    IPPROTO_ICMP = 1,

    IPPROTO_IGMP = 2,

    IPPROTO_IPIP = 4,

    IPPROTO_TCP = 6,

    IPPROTO_EGP = 8,

    IPPROTO_PUP = 12,

    IPPROTO_UDP = 17,

    IPPROTO_IDP = 22,

    IPPROTO_TP = 29,

    IPPROTO_DCCP = 33,

    IPPROTO_IPV6 = 41,

    IPPROTO_RSVP = 46,

    IPPROTO_GRE = 47,

    IPPROTO_ESP = 50,

    IPPROTO_AH = 51,

    IPPROTO_MTP = 92,

    IPPROTO_BEETPH = 94,

    IPPROTO_ENCAP = 98,

    IPPROTO_PIM = 103,

    IPPROTO_COMP = 108,

    IPPROTO_SCTP = 132,

    IPPROTO_UDPLITE = 136,

    IPPROTO_MPLS = 137,

    IPPROTO_ETHERNET = 143,

    IPPROTO_RAW = 255,

    IPPROTO_MPTCP = 262,

    IPPROTO_MAX
  };





enum
  {
    IPPROTO_HOPOPTS = 0,

    IPPROTO_ROUTING = 43,

    IPPROTO_FRAGMENT = 44,

    IPPROTO_ICMPV6 = 58,

    IPPROTO_NONE = 59,

    IPPROTO_DSTOPTS = 60,

    IPPROTO_MH = 135

  };



typedef uint16_t in_port_t;


enum
  {
    IPPORT_ECHO = 7,
    IPPORT_DISCARD = 9,
    IPPORT_SYSTAT = 11,
    IPPORT_DAYTIME = 13,
    IPPORT_NETSTAT = 15,
    IPPORT_FTP = 21,
    IPPORT_TELNET = 23,
    IPPORT_SMTP = 25,
    IPPORT_TIMESERVER = 37,
    IPPORT_NAMESERVER = 42,
    IPPORT_WHOIS = 43,
    IPPORT_MTP = 57,

    IPPORT_TFTP = 69,
    IPPORT_RJE = 77,
    IPPORT_FINGER = 79,
    IPPORT_TTYLINK = 87,
    IPPORT_SUPDUP = 95,


    IPPORT_EXECSERVER = 512,
    IPPORT_LOGINSERVER = 513,
    IPPORT_CMDSERVER = 514,
    IPPORT_EFSSERVER = 520,


    IPPORT_BIFFUDP = 512,
    IPPORT_WHOSERVER = 513,
    IPPORT_ROUTESERVER = 520,


    IPPORT_RESERVED = 1024,


    IPPORT_USERRESERVED = 5000
  };
# 219 "/usr/include/netinet/in.h" 3 4
struct in6_addr
  {
    union
      {
 uint8_t __u6_addr8[16];
 uint16_t __u6_addr16[8];
 uint32_t __u6_addr32[4];
      } __in6_u;





  };


extern const struct in6_addr in6addr_any;
extern const struct in6_addr in6addr_loopback;
# 245 "/usr/include/netinet/in.h" 3 4
struct sockaddr_in
  {
    sa_family_t sin_family;
    in_port_t sin_port;
    struct in_addr sin_addr;


    unsigned char sin_zero[sizeof (struct sockaddr)
      - (sizeof (unsigned short int))
      - sizeof (in_port_t)
      - sizeof (struct in_addr)];
  };



struct sockaddr_in6
  {
    sa_family_t sin6_family;
    in_port_t sin6_port;
    uint32_t sin6_flowinfo;
    struct in6_addr sin6_addr;
    uint32_t sin6_scope_id;
  };




struct ip_mreq
  {

    struct in_addr imr_multiaddr;


    struct in_addr imr_interface;
  };

struct ip_mreq_source
  {

    struct in_addr imr_multiaddr;


    struct in_addr imr_interface;


    struct in_addr imr_sourceaddr;
  };




struct ipv6_mreq
  {

    struct in6_addr ipv6mr_multiaddr;


    unsigned int ipv6mr_interface;
  };




struct group_req
  {

    uint32_t gr_interface;


    struct sockaddr_storage gr_group;
  };

struct group_source_req
  {

    uint32_t gsr_interface;


    struct sockaddr_storage gsr_group;


    struct sockaddr_storage gsr_source;
  };



struct ip_msfilter
  {

    struct in_addr imsf_multiaddr;


    struct in_addr imsf_interface;


    uint32_t imsf_fmode;


    uint32_t imsf_numsrc;

    struct in_addr imsf_slist[1];
  };





struct group_filter
  {

    uint32_t gf_interface;


    struct sockaddr_storage gf_group;


    uint32_t gf_fmode;


    uint32_t gf_numsrc;

    struct sockaddr_storage gf_slist[1];
};
# 382 "/usr/include/netinet/in.h" 3 4
extern uint32_t ntohl (uint32_t __netlong) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
extern uint16_t ntohs (uint16_t __netshort)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
extern uint32_t htonl (uint32_t __hostlong)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
extern uint16_t htons (uint16_t __hostshort)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




# 1 "/usr/include/aarch64-linux-gnu/bits/byteswap.h" 1 3 4
# 394 "/usr/include/netinet/in.h" 2 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/uintn-identity.h" 1 3 4
# 395 "/usr/include/netinet/in.h" 2 3 4
# 510 "/usr/include/netinet/in.h" 3 4
extern int bindresvport (int __sockfd, struct sockaddr_in *__sock_in) __attribute__ ((__nothrow__ , __leaf__));


extern int bindresvport6 (int __sockfd, struct sockaddr_in6 *__sock_in)
     __attribute__ ((__nothrow__ , __leaf__));
# 540 "/usr/include/netinet/in.h" 3 4
struct cmsghdr;



struct in6_pktinfo
  {
    struct in6_addr ipi6_addr;
    unsigned int ipi6_ifindex;
  };


struct ip6_mtuinfo
  {
    struct sockaddr_in6 ip6m_addr;
    uint32_t ip6m_mtu;
  };



extern int inet6_option_space (int __nbytes)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__deprecated__));
extern int inet6_option_init (void *__bp, struct cmsghdr **__cmsgp,
         int __type) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__deprecated__));
extern int inet6_option_append (struct cmsghdr *__cmsg,
    const uint8_t *__typep, int __multx,
    int __plusy) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__deprecated__));
extern uint8_t *inet6_option_alloc (struct cmsghdr *__cmsg, int __datalen,
        int __multx, int __plusy)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__deprecated__));
extern int inet6_option_next (const struct cmsghdr *__cmsg,
         uint8_t **__tptrp)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__deprecated__));
extern int inet6_option_find (const struct cmsghdr *__cmsg,
         uint8_t **__tptrp, int __type)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__deprecated__));



extern int inet6_opt_init (void *__extbuf, socklen_t __extlen) __attribute__ ((__nothrow__ , __leaf__));
extern int inet6_opt_append (void *__extbuf, socklen_t __extlen, int __offset,
        uint8_t __type, socklen_t __len, uint8_t __align,
        void **__databufp) __attribute__ ((__nothrow__ , __leaf__));
extern int inet6_opt_finish (void *__extbuf, socklen_t __extlen, int __offset)
     __attribute__ ((__nothrow__ , __leaf__));
extern int inet6_opt_set_val (void *__databuf, int __offset, void *__val,
         socklen_t __vallen) __attribute__ ((__nothrow__ , __leaf__));
extern int inet6_opt_next (void *__extbuf, socklen_t __extlen, int __offset,
      uint8_t *__typep, socklen_t *__lenp,
      void **__databufp) __attribute__ ((__nothrow__ , __leaf__));
extern int inet6_opt_find (void *__extbuf, socklen_t __extlen, int __offset,
      uint8_t __type, socklen_t *__lenp,
      void **__databufp) __attribute__ ((__nothrow__ , __leaf__));
extern int inet6_opt_get_val (void *__databuf, int __offset, void *__val,
         socklen_t __vallen) __attribute__ ((__nothrow__ , __leaf__));



extern socklen_t inet6_rth_space (int __type, int __segments) __attribute__ ((__nothrow__ , __leaf__));
extern void *inet6_rth_init (void *__bp, socklen_t __bp_len, int __type,
        int __segments) __attribute__ ((__nothrow__ , __leaf__));
extern int inet6_rth_add (void *__bp, const struct in6_addr *__addr) __attribute__ ((__nothrow__ , __leaf__));
extern int inet6_rth_reverse (const void *__in, void *__out) __attribute__ ((__nothrow__ , __leaf__));
extern int inet6_rth_segments (const void *__bp) __attribute__ ((__nothrow__ , __leaf__));
extern struct in6_addr *inet6_rth_getaddr (const void *__bp, int __index)
     __attribute__ ((__nothrow__ , __leaf__));





extern int getipv4sourcefilter (int __s, struct in_addr __interface_addr,
    struct in_addr __group, uint32_t *__fmode,
    uint32_t *__numsrc, struct in_addr *__slist)
     __attribute__ ((__nothrow__ , __leaf__));


extern int setipv4sourcefilter (int __s, struct in_addr __interface_addr,
    struct in_addr __group, uint32_t __fmode,
    uint32_t __numsrc,
    const struct in_addr *__slist)
     __attribute__ ((__nothrow__ , __leaf__));



extern int getsourcefilter (int __s, uint32_t __interface_addr,
       const struct sockaddr *__group,
       socklen_t __grouplen, uint32_t *__fmode,
       uint32_t *__numsrc,
       struct sockaddr_storage *__slist) __attribute__ ((__nothrow__ , __leaf__));


extern int setsourcefilter (int __s, uint32_t __interface_addr,
       const struct sockaddr *__group,
       socklen_t __grouplen, uint32_t __fmode,
       uint32_t __numsrc,
       const struct sockaddr_storage *__slist) __attribute__ ((__nothrow__ , __leaf__));



# 23 "/usr/include/arpa/inet.h" 2 3 4











extern in_addr_t inet_addr (const char *__cp) __attribute__ ((__nothrow__ , __leaf__));


extern in_addr_t inet_lnaof (struct in_addr __in) __attribute__ ((__nothrow__ , __leaf__));



extern struct in_addr inet_makeaddr (in_addr_t __net, in_addr_t __host)
     __attribute__ ((__nothrow__ , __leaf__));


extern in_addr_t inet_netof (struct in_addr __in) __attribute__ ((__nothrow__ , __leaf__));



extern in_addr_t inet_network (const char *__cp) __attribute__ ((__nothrow__ , __leaf__));



extern char *inet_ntoa (struct in_addr __in) __attribute__ ((__nothrow__ , __leaf__));




extern int inet_pton (int __af, const char *__restrict __cp,
        void *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__));




extern const char *inet_ntop (int __af, const void *__restrict __cp,
         char *__restrict __buf, socklen_t __len)
     __attribute__ ((__nothrow__ , __leaf__));






extern int inet_aton (const char *__cp, struct in_addr *__inp) __attribute__ ((__nothrow__ , __leaf__));



extern char *inet_neta (in_addr_t __net, char *__buf, size_t __len) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__deprecated__ ("Use inet_ntop instead")));




extern char *inet_net_ntop (int __af, const void *__cp, int __bits,
       char *__buf, size_t __len) __attribute__ ((__nothrow__ , __leaf__));




extern int inet_net_pton (int __af, const char *__cp,
     void *__buf, size_t __len) __attribute__ ((__nothrow__ , __leaf__));




extern unsigned int inet_nsap_addr (const char *__cp,
        unsigned char *__buf, int __len) __attribute__ ((__nothrow__ , __leaf__));



extern char *inet_nsap_ntoa (int __len, const unsigned char *__cp,
        char *__buf) __attribute__ ((__nothrow__ , __leaf__));



# 95 "stress-ng.h" 2


# 1 "/usr/include/net/if.h" 1 3 4
# 33 "/usr/include/net/if.h" 3 4
struct if_nameindex
  {
    unsigned int if_index;
    char *if_name;
  };




enum
  {
    IFF_UP = 0x1,

    IFF_BROADCAST = 0x2,

    IFF_DEBUG = 0x4,

    IFF_LOOPBACK = 0x8,

    IFF_POINTOPOINT = 0x10,

    IFF_NOTRAILERS = 0x20,

    IFF_RUNNING = 0x40,

    IFF_NOARP = 0x80,

    IFF_PROMISC = 0x100,



    IFF_ALLMULTI = 0x200,


    IFF_MASTER = 0x400,

    IFF_SLAVE = 0x800,


    IFF_MULTICAST = 0x1000,


    IFF_PORTSEL = 0x2000,

    IFF_AUTOMEDIA = 0x4000,

    IFF_DYNAMIC = 0x8000

  };






struct ifaddr
  {
    struct sockaddr ifa_addr;
    union
      {
 struct sockaddr ifu_broadaddr;
 struct sockaddr ifu_dstaddr;
      } ifa_ifu;
    struct iface *ifa_ifp;
    struct ifaddr *ifa_next;
  };
# 111 "/usr/include/net/if.h" 3 4
struct ifmap
  {
    unsigned long int mem_start;
    unsigned long int mem_end;
    unsigned short int base_addr;
    unsigned char irq;
    unsigned char dma;
    unsigned char port;

  };





struct ifreq
  {


    union
      {
 char ifrn_name[16];
      } ifr_ifrn;

    union
      {
 struct sockaddr ifru_addr;
 struct sockaddr ifru_dstaddr;
 struct sockaddr ifru_broadaddr;
 struct sockaddr ifru_netmask;
 struct sockaddr ifru_hwaddr;
 short int ifru_flags;
 int ifru_ivalue;
 int ifru_mtu;
 struct ifmap ifru_map;
 char ifru_slave[16];
 char ifru_newname[16];
 __caddr_t ifru_data;
      } ifr_ifru;
  };
# 176 "/usr/include/net/if.h" 3 4
struct ifconf
  {
    int ifc_len;
    union
      {
 __caddr_t ifcu_buf;
 struct ifreq *ifcu_req;
      } ifc_ifcu;
  };








extern unsigned int if_nametoindex (const char *__ifname) __attribute__ ((__nothrow__ , __leaf__));
extern char *if_indextoname (unsigned int __ifindex,
        char __ifname[16]) __attribute__ ((__nothrow__ , __leaf__))
    __attribute__ ((__access__ (__write_only__, 2)));


extern struct if_nameindex *if_nameindex (void) __attribute__ ((__nothrow__ , __leaf__));


extern void if_freenameindex (struct if_nameindex *__ptr) __attribute__ ((__nothrow__ , __leaf__));


# 98 "stress-ng.h" 2


# 1 "/usr/include/netinet/ip.h" 1 3 4
# 26 "/usr/include/netinet/ip.h" 3 4


struct timestamp
  {
    uint8_t len;
    uint8_t ptr;

    unsigned int flags:4;
    unsigned int overflow:4;






    uint32_t data[9];
  };

struct iphdr
  {

    unsigned int ihl:4;
    unsigned int version:4;






    uint8_t tos;
    uint16_t tot_len;
    uint16_t id;
    uint16_t frag_off;
    uint8_t ttl;
    uint8_t protocol;
    uint16_t check;
    uint32_t saddr;
    uint32_t daddr;

  };
# 107 "/usr/include/netinet/ip.h" 3 4
struct ip
  {

    unsigned int ip_hl:4;
    unsigned int ip_v:4;





    uint8_t ip_tos;
    unsigned short ip_len;
    unsigned short ip_id;
    unsigned short ip_off;




    uint8_t ip_ttl;
    uint8_t ip_p;
    unsigned short ip_sum;
    struct in_addr ip_src, ip_dst;
  };




struct ip_timestamp
  {
    uint8_t ipt_code;
    uint8_t ipt_len;
    uint8_t ipt_ptr;

    unsigned int ipt_flg:4;
    unsigned int ipt_oflw:4;





    uint32_t data[9];
  };
# 300 "/usr/include/netinet/ip.h" 3 4

# 101 "stress-ng.h" 2


# 1 "/usr/include/netinet/ip_icmp.h" 1 3 4
# 24 "/usr/include/netinet/ip_icmp.h" 3 4


struct icmphdr
{
  uint8_t type;
  uint8_t code;
  uint16_t checksum;
  union
  {
    struct
    {
      uint16_t id;
      uint16_t sequence;
    } echo;
    uint32_t gateway;
    struct
    {
      uint16_t __glibc_reserved;
      uint16_t mtu;
    } frag;
  } un;
};
# 149 "/usr/include/netinet/ip_icmp.h" 3 4
struct icmp_ra_addr
{
  uint32_t ira_addr;
  uint32_t ira_preference;
};

struct icmp
{
  uint8_t icmp_type;
  uint8_t icmp_code;
  uint16_t icmp_cksum;
  union
  {
    unsigned char ih_pptr;
    struct in_addr ih_gwaddr;
    struct ih_idseq
    {
      uint16_t icd_id;
      uint16_t icd_seq;
    } ih_idseq;
    uint32_t ih_void;


    struct ih_pmtu
    {
      uint16_t ipm_void;
      uint16_t ipm_nextmtu;
    } ih_pmtu;

    struct ih_rtradv
    {
      uint8_t irt_num_addrs;
      uint8_t irt_wpa;
      uint16_t irt_lifetime;
    } ih_rtradv;
  } icmp_hun;
# 195 "/usr/include/netinet/ip_icmp.h" 3 4
  union
  {
    struct
    {
      uint32_t its_otime;
      uint32_t its_rtime;
      uint32_t its_ttime;
    } id_ts;
    struct
    {
      struct ip idi_ip;

    } id_ip;
    struct icmp_ra_addr id_radv;
    uint32_t id_mask;
    uint8_t id_data[1];
  } icmp_dun;







};
# 298 "/usr/include/netinet/ip_icmp.h" 3 4

# 104 "stress-ng.h" 2


# 1 "/usr/include/netinet/tcp.h" 1 3 4
# 93 "/usr/include/netinet/tcp.h" 3 4
typedef uint32_t tcp_seq;




struct tcphdr
  {
    __extension__ union
    {
      struct
      {
 uint16_t th_sport;
 uint16_t th_dport;
 tcp_seq th_seq;
 tcp_seq th_ack;

 uint8_t th_x2:4;
 uint8_t th_off:4;





 uint8_t th_flags;






 uint16_t th_win;
 uint16_t th_sum;
 uint16_t th_urp;
      };
      struct
      {
 uint16_t source;
 uint16_t dest;
 uint32_t seq;
 uint32_t ack_seq;

 uint16_t res1:4;
 uint16_t doff:4;
 uint16_t fin:1;
 uint16_t syn:1;
 uint16_t rst:1;
 uint16_t psh:1;
 uint16_t ack:1;
 uint16_t urg:1;
 uint16_t res2:2;
# 156 "/usr/include/netinet/tcp.h" 3 4
 uint16_t window;
 uint16_t check;
 uint16_t urg_ptr;
      };
    };
};

enum
{
  TCP_ESTABLISHED = 1,
  TCP_SYN_SENT,
  TCP_SYN_RECV,
  TCP_FIN_WAIT1,
  TCP_FIN_WAIT2,
  TCP_TIME_WAIT,
  TCP_CLOSE,
  TCP_CLOSE_WAIT,
  TCP_LAST_ACK,
  TCP_LISTEN,
  TCP_CLOSING
};
# 217 "/usr/include/netinet/tcp.h" 3 4
enum tcp_ca_state
{
  TCP_CA_Open = 0,
  TCP_CA_Disorder = 1,
  TCP_CA_CWR = 2,
  TCP_CA_Recovery = 3,
  TCP_CA_Loss = 4
};

struct tcp_info
{
  uint8_t tcpi_state;
  uint8_t tcpi_ca_state;
  uint8_t tcpi_retransmits;
  uint8_t tcpi_probes;
  uint8_t tcpi_backoff;
  uint8_t tcpi_options;
  uint8_t tcpi_snd_wscale : 4, tcpi_rcv_wscale : 4;

  uint32_t tcpi_rto;
  uint32_t tcpi_ato;
  uint32_t tcpi_snd_mss;
  uint32_t tcpi_rcv_mss;

  uint32_t tcpi_unacked;
  uint32_t tcpi_sacked;
  uint32_t tcpi_lost;
  uint32_t tcpi_retrans;
  uint32_t tcpi_fackets;


  uint32_t tcpi_last_data_sent;
  uint32_t tcpi_last_ack_sent;
  uint32_t tcpi_last_data_recv;
  uint32_t tcpi_last_ack_recv;


  uint32_t tcpi_pmtu;
  uint32_t tcpi_rcv_ssthresh;
  uint32_t tcpi_rtt;
  uint32_t tcpi_rttvar;
  uint32_t tcpi_snd_ssthresh;
  uint32_t tcpi_snd_cwnd;
  uint32_t tcpi_advmss;
  uint32_t tcpi_reordering;

  uint32_t tcpi_rcv_rtt;
  uint32_t tcpi_rcv_space;

  uint32_t tcpi_total_retrans;
};
# 276 "/usr/include/netinet/tcp.h" 3 4
struct tcp_md5sig
{
  struct sockaddr_storage tcpm_addr;
  uint8_t tcpm_flags;
  uint8_t tcpm_prefixlen;
  uint16_t tcpm_keylen;
  uint32_t __tcpm_pad;
  uint8_t tcpm_key[80];
};


struct tcp_repair_opt
{
  uint32_t opt_code;
  uint32_t opt_val;
};


enum
{
  TCP_NO_QUEUE,
  TCP_RECV_QUEUE,
  TCP_SEND_QUEUE,
  TCP_QUEUES_NR,
};
# 319 "/usr/include/netinet/tcp.h" 3 4
struct tcp_cookie_transactions
{
  uint16_t tcpct_flags;
  uint8_t __tcpct_pad1;
  uint8_t tcpct_cookie_desired;
  uint16_t tcpct_s_data_desired;
  uint16_t tcpct_used;
  uint8_t tcpct_value[536U];
};


struct tcp_repair_window
{
  uint32_t snd_wl1;
  uint32_t snd_wnd;
  uint32_t max_window;
  uint32_t rcv_wnd;
  uint32_t rcv_wup;
};


struct tcp_zerocopy_receive
{
  uint64_t address;
  uint32_t length;
  uint32_t recv_skip_hint;
};
# 107 "stress-ng.h" 2






# 1 "/usr/include/aio.h" 1 3 4
# 31 "/usr/include/aio.h" 3 4



struct aiocb
{
  int aio_fildes;
  int aio_lio_opcode;
  int aio_reqprio;
  volatile void *aio_buf;
  size_t aio_nbytes;
  struct sigevent aio_sigevent;


  struct aiocb *__next_prio;
  int __abs_prio;
  int __policy;
  int __error_code;
  __ssize_t __return_value;





  __off64_t aio_offset;

  char __glibc_reserved[32];
};




struct aiocb64
{
  int aio_fildes;
  int aio_lio_opcode;
  int aio_reqprio;
  volatile void *aio_buf;
  size_t aio_nbytes;
  struct sigevent aio_sigevent;


  struct aiocb *__next_prio;
  int __abs_prio;
  int __policy;
  int __error_code;
  __ssize_t __return_value;

  __off64_t aio_offset;
  char __glibc_reserved[32];
};





struct aioinit
  {
    int aio_threads;
    int aio_num;
    int aio_locks;
    int aio_usedba;
    int aio_debug;
    int aio_numusers;
    int aio_idle_time;

    int aio_reserved;
  };




enum
{
  AIO_CANCELED,

  AIO_NOTCANCELED,

  AIO_ALLDONE

};



enum
{
  LIO_READ,

  LIO_WRITE,

  LIO_NOP

};



enum
{
  LIO_WAIT,

  LIO_NOWAIT

};




extern void aio_init (const struct aioinit *__init) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 177 "/usr/include/aio.h" 3 4
extern int aio_read (struct aiocb *__aiocbp) __asm__ ("" "aio_read64") __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__nonnull__ (1)));
extern int aio_write (struct aiocb *__aiocbp) __asm__ ("" "aio_write64") __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__nonnull__ (1)));

extern int lio_listio (int __mode, struct aiocb *const __list[__restrict], int __nent, struct sigevent *__restrict __sig) __asm__ ("" "lio_listio64") __attribute__ ((__nothrow__ , __leaf__))



                    __attribute__ ((__nonnull__ (2)));

extern int aio_error (const struct aiocb *__aiocbp) __asm__ ("" "aio_error64") __attribute__ ((__nothrow__ , __leaf__))
                   __attribute__ ((__nonnull__ (1)));
extern __ssize_t aio_return (struct aiocb *__aiocbp) __asm__ ("" "aio_return64") __attribute__ ((__nothrow__ , __leaf__))
                   __attribute__ ((__nonnull__ (1)));

extern int aio_cancel (int __fildes, struct aiocb *__aiocbp) __asm__ ("" "aio_cancel64") __attribute__ ((__nothrow__ , __leaf__))

                   ;






extern int aio_suspend (const struct aiocb *const __list[], int __nent, const struct timespec *__restrict __timeout) __asm__ ("" "aio_suspend64") __attribute__ ((__nothrow__ , __leaf__))


                     __attribute__ ((__nonnull__ (1)));

extern int aio_fsync (int __operation, struct aiocb *__aiocbp) __asm__ ("" "aio_fsync64") __attribute__ ((__nothrow__ , __leaf__))

                   __attribute__ ((__nonnull__ (2)));
# 228 "/usr/include/aio.h" 3 4
extern int aio_read64 (struct aiocb64 *__aiocbp) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern int aio_write64 (struct aiocb64 *__aiocbp) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

extern int lio_listio64 (int __mode,
    struct aiocb64 *const __list[__restrict],
    int __nent, struct sigevent *__restrict __sig)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));

extern int aio_error64 (const struct aiocb64 *__aiocbp)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern __ssize_t aio_return64 (struct aiocb64 *__aiocbp)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

extern int aio_cancel64 (int __fildes, struct aiocb64 *__aiocbp) __attribute__ ((__nothrow__ , __leaf__));

extern int aio_suspend64 (const struct aiocb64 *const __list[], int __nent,
     const struct timespec *__restrict __timeout)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

extern int aio_fsync64 (int __operation, struct aiocb64 *__aiocbp)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



# 114 "stress-ng.h" 2



# 1 "/usr/include/complex.h" 1 3 4
# 26 "/usr/include/complex.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/complex.h" 2 3 4


# 1 "/usr/include/aarch64-linux-gnu/bits/mathdef.h" 1 3 4
# 30 "/usr/include/complex.h" 2 3 4





# 110 "/usr/include/complex.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/cmathcalls.h" 1 3 4
# 55 "/usr/include/aarch64-linux-gnu/bits/cmathcalls.h" 3 4
extern double _Complex cacos (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern double _Complex __cacos (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));

extern double _Complex casin (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern double _Complex __casin (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));

extern double _Complex catan (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern double _Complex __catan (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));


extern double _Complex ccos (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern double _Complex __ccos (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));

extern double _Complex csin (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern double _Complex __csin (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));

extern double _Complex ctan (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern double _Complex __ctan (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));





extern double _Complex cacosh (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern double _Complex __cacosh (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));

extern double _Complex casinh (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern double _Complex __casinh (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));

extern double _Complex catanh (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern double _Complex __catanh (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));


extern double _Complex ccosh (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern double _Complex __ccosh (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));

extern double _Complex csinh (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern double _Complex __csinh (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));

extern double _Complex ctanh (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern double _Complex __ctanh (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));





extern double _Complex cexp (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern double _Complex __cexp (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));


extern double _Complex clog (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern double _Complex __clog (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));




extern double _Complex clog10 (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern double _Complex __clog10 (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));





extern double _Complex cpow (double _Complex __x, double _Complex __y) __attribute__ ((__nothrow__ , __leaf__)); extern double _Complex __cpow (double _Complex __x, double _Complex __y) __attribute__ ((__nothrow__ , __leaf__));


extern double _Complex csqrt (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern double _Complex __csqrt (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));





extern double cabs (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern double __cabs (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));


extern double carg (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern double __carg (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));


extern double _Complex conj (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern double _Complex __conj (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));


extern double _Complex cproj (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern double _Complex __cproj (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));





extern double cimag (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern double __cimag (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));


extern double creal (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern double __creal (double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));
# 111 "/usr/include/complex.h" 2 3 4






# 1 "/usr/include/aarch64-linux-gnu/bits/cmathcalls.h" 1 3 4
# 55 "/usr/include/aarch64-linux-gnu/bits/cmathcalls.h" 3 4
extern float _Complex cacosf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern float _Complex __cacosf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__));

extern float _Complex casinf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern float _Complex __casinf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__));

extern float _Complex catanf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern float _Complex __catanf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__));


extern float _Complex ccosf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern float _Complex __ccosf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__));

extern float _Complex csinf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern float _Complex __csinf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__));

extern float _Complex ctanf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern float _Complex __ctanf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__));





extern float _Complex cacoshf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern float _Complex __cacoshf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__));

extern float _Complex casinhf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern float _Complex __casinhf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__));

extern float _Complex catanhf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern float _Complex __catanhf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__));


extern float _Complex ccoshf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern float _Complex __ccoshf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__));

extern float _Complex csinhf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern float _Complex __csinhf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__));

extern float _Complex ctanhf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern float _Complex __ctanhf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__));





extern float _Complex cexpf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern float _Complex __cexpf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__));


extern float _Complex clogf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern float _Complex __clogf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__));




extern float _Complex clog10f (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern float _Complex __clog10f (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__));





extern float _Complex cpowf (float _Complex __x, float _Complex __y) __attribute__ ((__nothrow__ , __leaf__)); extern float _Complex __cpowf (float _Complex __x, float _Complex __y) __attribute__ ((__nothrow__ , __leaf__));


extern float _Complex csqrtf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern float _Complex __csqrtf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__));





extern float cabsf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern float __cabsf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__));


extern float cargf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern float __cargf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__));


extern float _Complex conjf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern float _Complex __conjf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__));


extern float _Complex cprojf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern float _Complex __cprojf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__));





extern float cimagf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern float __cimagf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__));


extern float crealf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern float __crealf (float _Complex __z) __attribute__ ((__nothrow__ , __leaf__));
# 118 "/usr/include/complex.h" 2 3 4
# 143 "/usr/include/complex.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/cmathcalls.h" 1 3 4
# 55 "/usr/include/aarch64-linux-gnu/bits/cmathcalls.h" 3 4
extern long double _Complex cacosl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern long double _Complex __cacosl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));

extern long double _Complex casinl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern long double _Complex __casinl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));

extern long double _Complex catanl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern long double _Complex __catanl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));


extern long double _Complex ccosl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern long double _Complex __ccosl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));

extern long double _Complex csinl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern long double _Complex __csinl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));

extern long double _Complex ctanl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern long double _Complex __ctanl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));





extern long double _Complex cacoshl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern long double _Complex __cacoshl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));

extern long double _Complex casinhl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern long double _Complex __casinhl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));

extern long double _Complex catanhl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern long double _Complex __catanhl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));


extern long double _Complex ccoshl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern long double _Complex __ccoshl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));

extern long double _Complex csinhl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern long double _Complex __csinhl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));

extern long double _Complex ctanhl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern long double _Complex __ctanhl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));





extern long double _Complex cexpl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern long double _Complex __cexpl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));


extern long double _Complex clogl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern long double _Complex __clogl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));




extern long double _Complex clog10l (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern long double _Complex __clog10l (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));





extern long double _Complex cpowl (long double _Complex __x, long double _Complex __y) __attribute__ ((__nothrow__ , __leaf__)); extern long double _Complex __cpowl (long double _Complex __x, long double _Complex __y) __attribute__ ((__nothrow__ , __leaf__));


extern long double _Complex csqrtl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern long double _Complex __csqrtl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));





extern long double cabsl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern long double __cabsl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));


extern long double cargl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern long double __cargl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));


extern long double _Complex conjl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern long double _Complex __conjl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));


extern long double _Complex cprojl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern long double _Complex __cprojl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));





extern long double cimagl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern long double __cimagl (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));


extern long double creall (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__)); extern long double __creall (long double _Complex __z) __attribute__ ((__nothrow__ , __leaf__));
# 144 "/usr/include/complex.h" 2 3 4
# 176 "/usr/include/complex.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/cmathcalls.h" 1 3 4
# 55 "/usr/include/aarch64-linux-gnu/bits/cmathcalls.h" 3 4
extern _Complex _Float32 cacosf32 (_Complex _Float32 __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Complex _Float32 __cacosf32 (_Complex _Float32 __z) __attribute__ ((__nothrow__ , __leaf__));

extern _Complex _Float32 casinf32 (_Complex _Float32 __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Complex _Float32 __casinf32 (_Complex _Float32 __z) __attribute__ ((__nothrow__ , __leaf__));

extern _Complex _Float32 catanf32 (_Complex _Float32 __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Complex _Float32 __catanf32 (_Complex _Float32 __z) __attribute__ ((__nothrow__ , __leaf__));


extern _Complex _Float32 ccosf32 (_Complex _Float32 __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Complex _Float32 __ccosf32 (_Complex _Float32 __z) __attribute__ ((__nothrow__ , __leaf__));

extern _Complex _Float32 csinf32 (_Complex _Float32 __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Complex _Float32 __csinf32 (_Complex _Float32 __z) __attribute__ ((__nothrow__ , __leaf__));

extern _Complex _Float32 ctanf32 (_Complex _Float32 __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Complex _Float32 __ctanf32 (_Complex _Float32 __z) __attribute__ ((__nothrow__ , __leaf__));





extern _Complex _Float32 cacoshf32 (_Complex _Float32 __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Complex _Float32 __cacoshf32 (_Complex _Float32 __z) __attribute__ ((__nothrow__ , __leaf__));

extern _Complex _Float32 casinhf32 (_Complex _Float32 __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Complex _Float32 __casinhf32 (_Complex _Float32 __z) __attribute__ ((__nothrow__ , __leaf__));

extern _Complex _Float32 catanhf32 (_Complex _Float32 __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Complex _Float32 __catanhf32 (_Complex _Float32 __z) __attribute__ ((__nothrow__ , __leaf__));


extern _Complex _Float32 ccoshf32 (_Complex _Float32 __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Complex _Float32 __ccoshf32 (_Complex _Float32 __z) __attribute__ ((__nothrow__ , __leaf__));

extern _Complex _Float32 csinhf32 (_Complex _Float32 __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Complex _Float32 __csinhf32 (_Complex _Float32 __z) __attribute__ ((__nothrow__ , __leaf__));

extern _Complex _Float32 ctanhf32 (_Complex _Float32 __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Complex _Float32 __ctanhf32 (_Complex _Float32 __z) __attribute__ ((__nothrow__ , __leaf__));





extern _Complex _Float32 cexpf32 (_Complex _Float32 __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Complex _Float32 __cexpf32 (_Complex _Float32 __z) __attribute__ ((__nothrow__ , __leaf__));


extern _Complex _Float32 clogf32 (_Complex _Float32 __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Complex _Float32 __clogf32 (_Complex _Float32 __z) __attribute__ ((__nothrow__ , __leaf__));




extern _Complex _Float32 clog10f32 (_Complex _Float32 __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Complex _Float32 __clog10f32 (_Complex _Float32 __z) __attribute__ ((__nothrow__ , __leaf__));





extern _Complex _Float32 cpowf32 (_Complex _Float32 __x, _Complex _Float32 __y) __attribute__ ((__nothrow__ , __leaf__)); extern _Complex _Float32 __cpowf32 (_Complex _Float32 __x, _Complex _Float32 __y) __attribute__ ((__nothrow__ , __leaf__));


extern _Complex _Float32 csqrtf32 (_Complex _Float32 __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Complex _Float32 __csqrtf32 (_Complex _Float32 __z) __attribute__ ((__nothrow__ , __leaf__));





extern _Float32 cabsf32 (_Complex _Float32 __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __cabsf32 (_Complex _Float32 __z) __attribute__ ((__nothrow__ , __leaf__));


extern _Float32 cargf32 (_Complex _Float32 __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __cargf32 (_Complex _Float32 __z) __attribute__ ((__nothrow__ , __leaf__));


extern _Complex _Float32 conjf32 (_Complex _Float32 __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Complex _Float32 __conjf32 (_Complex _Float32 __z) __attribute__ ((__nothrow__ , __leaf__));


extern _Complex _Float32 cprojf32 (_Complex _Float32 __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Complex _Float32 __cprojf32 (_Complex _Float32 __z) __attribute__ ((__nothrow__ , __leaf__));





extern _Float32 cimagf32 (_Complex _Float32 __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __cimagf32 (_Complex _Float32 __z) __attribute__ ((__nothrow__ , __leaf__));


extern _Float32 crealf32 (_Complex _Float32 __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32 __crealf32 (_Complex _Float32 __z) __attribute__ ((__nothrow__ , __leaf__));
# 177 "/usr/include/complex.h" 2 3 4
# 188 "/usr/include/complex.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/cmathcalls.h" 1 3 4
# 55 "/usr/include/aarch64-linux-gnu/bits/cmathcalls.h" 3 4
extern _Complex _Float64 cacosf64 (_Complex _Float64 __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Complex _Float64 __cacosf64 (_Complex _Float64 __z) __attribute__ ((__nothrow__ , __leaf__));

extern _Complex _Float64 casinf64 (_Complex _Float64 __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Complex _Float64 __casinf64 (_Complex _Float64 __z) __attribute__ ((__nothrow__ , __leaf__));

extern _Complex _Float64 catanf64 (_Complex _Float64 __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Complex _Float64 __catanf64 (_Complex _Float64 __z) __attribute__ ((__nothrow__ , __leaf__));


extern _Complex _Float64 ccosf64 (_Complex _Float64 __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Complex _Float64 __ccosf64 (_Complex _Float64 __z) __attribute__ ((__nothrow__ , __leaf__));

extern _Complex _Float64 csinf64 (_Complex _Float64 __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Complex _Float64 __csinf64 (_Complex _Float64 __z) __attribute__ ((__nothrow__ , __leaf__));

extern _Complex _Float64 ctanf64 (_Complex _Float64 __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Complex _Float64 __ctanf64 (_Complex _Float64 __z) __attribute__ ((__nothrow__ , __leaf__));





extern _Complex _Float64 cacoshf64 (_Complex _Float64 __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Complex _Float64 __cacoshf64 (_Complex _Float64 __z) __attribute__ ((__nothrow__ , __leaf__));

extern _Complex _Float64 casinhf64 (_Complex _Float64 __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Complex _Float64 __casinhf64 (_Complex _Float64 __z) __attribute__ ((__nothrow__ , __leaf__));

extern _Complex _Float64 catanhf64 (_Complex _Float64 __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Complex _Float64 __catanhf64 (_Complex _Float64 __z) __attribute__ ((__nothrow__ , __leaf__));


extern _Complex _Float64 ccoshf64 (_Complex _Float64 __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Complex _Float64 __ccoshf64 (_Complex _Float64 __z) __attribute__ ((__nothrow__ , __leaf__));

extern _Complex _Float64 csinhf64 (_Complex _Float64 __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Complex _Float64 __csinhf64 (_Complex _Float64 __z) __attribute__ ((__nothrow__ , __leaf__));

extern _Complex _Float64 ctanhf64 (_Complex _Float64 __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Complex _Float64 __ctanhf64 (_Complex _Float64 __z) __attribute__ ((__nothrow__ , __leaf__));





extern _Complex _Float64 cexpf64 (_Complex _Float64 __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Complex _Float64 __cexpf64 (_Complex _Float64 __z) __attribute__ ((__nothrow__ , __leaf__));


extern _Complex _Float64 clogf64 (_Complex _Float64 __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Complex _Float64 __clogf64 (_Complex _Float64 __z) __attribute__ ((__nothrow__ , __leaf__));




extern _Complex _Float64 clog10f64 (_Complex _Float64 __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Complex _Float64 __clog10f64 (_Complex _Float64 __z) __attribute__ ((__nothrow__ , __leaf__));





extern _Complex _Float64 cpowf64 (_Complex _Float64 __x, _Complex _Float64 __y) __attribute__ ((__nothrow__ , __leaf__)); extern _Complex _Float64 __cpowf64 (_Complex _Float64 __x, _Complex _Float64 __y) __attribute__ ((__nothrow__ , __leaf__));


extern _Complex _Float64 csqrtf64 (_Complex _Float64 __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Complex _Float64 __csqrtf64 (_Complex _Float64 __z) __attribute__ ((__nothrow__ , __leaf__));





extern _Float64 cabsf64 (_Complex _Float64 __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __cabsf64 (_Complex _Float64 __z) __attribute__ ((__nothrow__ , __leaf__));


extern _Float64 cargf64 (_Complex _Float64 __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __cargf64 (_Complex _Float64 __z) __attribute__ ((__nothrow__ , __leaf__));


extern _Complex _Float64 conjf64 (_Complex _Float64 __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Complex _Float64 __conjf64 (_Complex _Float64 __z) __attribute__ ((__nothrow__ , __leaf__));


extern _Complex _Float64 cprojf64 (_Complex _Float64 __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Complex _Float64 __cprojf64 (_Complex _Float64 __z) __attribute__ ((__nothrow__ , __leaf__));





extern _Float64 cimagf64 (_Complex _Float64 __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __cimagf64 (_Complex _Float64 __z) __attribute__ ((__nothrow__ , __leaf__));


extern _Float64 crealf64 (_Complex _Float64 __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64 __crealf64 (_Complex _Float64 __z) __attribute__ ((__nothrow__ , __leaf__));
# 189 "/usr/include/complex.h" 2 3 4
# 200 "/usr/include/complex.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/cmathcalls.h" 1 3 4
# 55 "/usr/include/aarch64-linux-gnu/bits/cmathcalls.h" 3 4
extern _Complex _Float128 cacosf128 (_Complex _Float128 __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Complex _Float128 __cacosf128 (_Complex _Float128 __z) __attribute__ ((__nothrow__ , __leaf__));

extern _Complex _Float128 casinf128 (_Complex _Float128 __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Complex _Float128 __casinf128 (_Complex _Float128 __z) __attribute__ ((__nothrow__ , __leaf__));

extern _Complex _Float128 catanf128 (_Complex _Float128 __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Complex _Float128 __catanf128 (_Complex _Float128 __z) __attribute__ ((__nothrow__ , __leaf__));


extern _Complex _Float128 ccosf128 (_Complex _Float128 __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Complex _Float128 __ccosf128 (_Complex _Float128 __z) __attribute__ ((__nothrow__ , __leaf__));

extern _Complex _Float128 csinf128 (_Complex _Float128 __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Complex _Float128 __csinf128 (_Complex _Float128 __z) __attribute__ ((__nothrow__ , __leaf__));

extern _Complex _Float128 ctanf128 (_Complex _Float128 __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Complex _Float128 __ctanf128 (_Complex _Float128 __z) __attribute__ ((__nothrow__ , __leaf__));





extern _Complex _Float128 cacoshf128 (_Complex _Float128 __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Complex _Float128 __cacoshf128 (_Complex _Float128 __z) __attribute__ ((__nothrow__ , __leaf__));

extern _Complex _Float128 casinhf128 (_Complex _Float128 __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Complex _Float128 __casinhf128 (_Complex _Float128 __z) __attribute__ ((__nothrow__ , __leaf__));

extern _Complex _Float128 catanhf128 (_Complex _Float128 __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Complex _Float128 __catanhf128 (_Complex _Float128 __z) __attribute__ ((__nothrow__ , __leaf__));


extern _Complex _Float128 ccoshf128 (_Complex _Float128 __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Complex _Float128 __ccoshf128 (_Complex _Float128 __z) __attribute__ ((__nothrow__ , __leaf__));

extern _Complex _Float128 csinhf128 (_Complex _Float128 __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Complex _Float128 __csinhf128 (_Complex _Float128 __z) __attribute__ ((__nothrow__ , __leaf__));

extern _Complex _Float128 ctanhf128 (_Complex _Float128 __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Complex _Float128 __ctanhf128 (_Complex _Float128 __z) __attribute__ ((__nothrow__ , __leaf__));





extern _Complex _Float128 cexpf128 (_Complex _Float128 __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Complex _Float128 __cexpf128 (_Complex _Float128 __z) __attribute__ ((__nothrow__ , __leaf__));


extern _Complex _Float128 clogf128 (_Complex _Float128 __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Complex _Float128 __clogf128 (_Complex _Float128 __z) __attribute__ ((__nothrow__ , __leaf__));




extern _Complex _Float128 clog10f128 (_Complex _Float128 __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Complex _Float128 __clog10f128 (_Complex _Float128 __z) __attribute__ ((__nothrow__ , __leaf__));





extern _Complex _Float128 cpowf128 (_Complex _Float128 __x, _Complex _Float128 __y) __attribute__ ((__nothrow__ , __leaf__)); extern _Complex _Float128 __cpowf128 (_Complex _Float128 __x, _Complex _Float128 __y) __attribute__ ((__nothrow__ , __leaf__));


extern _Complex _Float128 csqrtf128 (_Complex _Float128 __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Complex _Float128 __csqrtf128 (_Complex _Float128 __z) __attribute__ ((__nothrow__ , __leaf__));





extern _Float128 cabsf128 (_Complex _Float128 __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __cabsf128 (_Complex _Float128 __z) __attribute__ ((__nothrow__ , __leaf__));


extern _Float128 cargf128 (_Complex _Float128 __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __cargf128 (_Complex _Float128 __z) __attribute__ ((__nothrow__ , __leaf__));


extern _Complex _Float128 conjf128 (_Complex _Float128 __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Complex _Float128 __conjf128 (_Complex _Float128 __z) __attribute__ ((__nothrow__ , __leaf__));


extern _Complex _Float128 cprojf128 (_Complex _Float128 __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Complex _Float128 __cprojf128 (_Complex _Float128 __z) __attribute__ ((__nothrow__ , __leaf__));





extern _Float128 cimagf128 (_Complex _Float128 __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __cimagf128 (_Complex _Float128 __z) __attribute__ ((__nothrow__ , __leaf__));


extern _Float128 crealf128 (_Complex _Float128 __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Float128 __crealf128 (_Complex _Float128 __z) __attribute__ ((__nothrow__ , __leaf__));
# 201 "/usr/include/complex.h" 2 3 4
# 212 "/usr/include/complex.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/cmathcalls.h" 1 3 4
# 55 "/usr/include/aarch64-linux-gnu/bits/cmathcalls.h" 3 4
extern _Complex _Float32x cacosf32x (_Complex _Float32x __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Complex _Float32x __cacosf32x (_Complex _Float32x __z) __attribute__ ((__nothrow__ , __leaf__));

extern _Complex _Float32x casinf32x (_Complex _Float32x __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Complex _Float32x __casinf32x (_Complex _Float32x __z) __attribute__ ((__nothrow__ , __leaf__));

extern _Complex _Float32x catanf32x (_Complex _Float32x __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Complex _Float32x __catanf32x (_Complex _Float32x __z) __attribute__ ((__nothrow__ , __leaf__));


extern _Complex _Float32x ccosf32x (_Complex _Float32x __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Complex _Float32x __ccosf32x (_Complex _Float32x __z) __attribute__ ((__nothrow__ , __leaf__));

extern _Complex _Float32x csinf32x (_Complex _Float32x __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Complex _Float32x __csinf32x (_Complex _Float32x __z) __attribute__ ((__nothrow__ , __leaf__));

extern _Complex _Float32x ctanf32x (_Complex _Float32x __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Complex _Float32x __ctanf32x (_Complex _Float32x __z) __attribute__ ((__nothrow__ , __leaf__));





extern _Complex _Float32x cacoshf32x (_Complex _Float32x __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Complex _Float32x __cacoshf32x (_Complex _Float32x __z) __attribute__ ((__nothrow__ , __leaf__));

extern _Complex _Float32x casinhf32x (_Complex _Float32x __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Complex _Float32x __casinhf32x (_Complex _Float32x __z) __attribute__ ((__nothrow__ , __leaf__));

extern _Complex _Float32x catanhf32x (_Complex _Float32x __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Complex _Float32x __catanhf32x (_Complex _Float32x __z) __attribute__ ((__nothrow__ , __leaf__));


extern _Complex _Float32x ccoshf32x (_Complex _Float32x __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Complex _Float32x __ccoshf32x (_Complex _Float32x __z) __attribute__ ((__nothrow__ , __leaf__));

extern _Complex _Float32x csinhf32x (_Complex _Float32x __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Complex _Float32x __csinhf32x (_Complex _Float32x __z) __attribute__ ((__nothrow__ , __leaf__));

extern _Complex _Float32x ctanhf32x (_Complex _Float32x __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Complex _Float32x __ctanhf32x (_Complex _Float32x __z) __attribute__ ((__nothrow__ , __leaf__));





extern _Complex _Float32x cexpf32x (_Complex _Float32x __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Complex _Float32x __cexpf32x (_Complex _Float32x __z) __attribute__ ((__nothrow__ , __leaf__));


extern _Complex _Float32x clogf32x (_Complex _Float32x __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Complex _Float32x __clogf32x (_Complex _Float32x __z) __attribute__ ((__nothrow__ , __leaf__));




extern _Complex _Float32x clog10f32x (_Complex _Float32x __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Complex _Float32x __clog10f32x (_Complex _Float32x __z) __attribute__ ((__nothrow__ , __leaf__));





extern _Complex _Float32x cpowf32x (_Complex _Float32x __x, _Complex _Float32x __y) __attribute__ ((__nothrow__ , __leaf__)); extern _Complex _Float32x __cpowf32x (_Complex _Float32x __x, _Complex _Float32x __y) __attribute__ ((__nothrow__ , __leaf__));


extern _Complex _Float32x csqrtf32x (_Complex _Float32x __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Complex _Float32x __csqrtf32x (_Complex _Float32x __z) __attribute__ ((__nothrow__ , __leaf__));





extern _Float32x cabsf32x (_Complex _Float32x __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __cabsf32x (_Complex _Float32x __z) __attribute__ ((__nothrow__ , __leaf__));


extern _Float32x cargf32x (_Complex _Float32x __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __cargf32x (_Complex _Float32x __z) __attribute__ ((__nothrow__ , __leaf__));


extern _Complex _Float32x conjf32x (_Complex _Float32x __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Complex _Float32x __conjf32x (_Complex _Float32x __z) __attribute__ ((__nothrow__ , __leaf__));


extern _Complex _Float32x cprojf32x (_Complex _Float32x __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Complex _Float32x __cprojf32x (_Complex _Float32x __z) __attribute__ ((__nothrow__ , __leaf__));





extern _Float32x cimagf32x (_Complex _Float32x __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __cimagf32x (_Complex _Float32x __z) __attribute__ ((__nothrow__ , __leaf__));


extern _Float32x crealf32x (_Complex _Float32x __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Float32x __crealf32x (_Complex _Float32x __z) __attribute__ ((__nothrow__ , __leaf__));
# 213 "/usr/include/complex.h" 2 3 4
# 224 "/usr/include/complex.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/cmathcalls.h" 1 3 4
# 55 "/usr/include/aarch64-linux-gnu/bits/cmathcalls.h" 3 4
extern _Complex _Float64x cacosf64x (_Complex _Float64x __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Complex _Float64x __cacosf64x (_Complex _Float64x __z) __attribute__ ((__nothrow__ , __leaf__));

extern _Complex _Float64x casinf64x (_Complex _Float64x __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Complex _Float64x __casinf64x (_Complex _Float64x __z) __attribute__ ((__nothrow__ , __leaf__));

extern _Complex _Float64x catanf64x (_Complex _Float64x __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Complex _Float64x __catanf64x (_Complex _Float64x __z) __attribute__ ((__nothrow__ , __leaf__));


extern _Complex _Float64x ccosf64x (_Complex _Float64x __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Complex _Float64x __ccosf64x (_Complex _Float64x __z) __attribute__ ((__nothrow__ , __leaf__));

extern _Complex _Float64x csinf64x (_Complex _Float64x __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Complex _Float64x __csinf64x (_Complex _Float64x __z) __attribute__ ((__nothrow__ , __leaf__));

extern _Complex _Float64x ctanf64x (_Complex _Float64x __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Complex _Float64x __ctanf64x (_Complex _Float64x __z) __attribute__ ((__nothrow__ , __leaf__));





extern _Complex _Float64x cacoshf64x (_Complex _Float64x __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Complex _Float64x __cacoshf64x (_Complex _Float64x __z) __attribute__ ((__nothrow__ , __leaf__));

extern _Complex _Float64x casinhf64x (_Complex _Float64x __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Complex _Float64x __casinhf64x (_Complex _Float64x __z) __attribute__ ((__nothrow__ , __leaf__));

extern _Complex _Float64x catanhf64x (_Complex _Float64x __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Complex _Float64x __catanhf64x (_Complex _Float64x __z) __attribute__ ((__nothrow__ , __leaf__));


extern _Complex _Float64x ccoshf64x (_Complex _Float64x __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Complex _Float64x __ccoshf64x (_Complex _Float64x __z) __attribute__ ((__nothrow__ , __leaf__));

extern _Complex _Float64x csinhf64x (_Complex _Float64x __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Complex _Float64x __csinhf64x (_Complex _Float64x __z) __attribute__ ((__nothrow__ , __leaf__));

extern _Complex _Float64x ctanhf64x (_Complex _Float64x __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Complex _Float64x __ctanhf64x (_Complex _Float64x __z) __attribute__ ((__nothrow__ , __leaf__));





extern _Complex _Float64x cexpf64x (_Complex _Float64x __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Complex _Float64x __cexpf64x (_Complex _Float64x __z) __attribute__ ((__nothrow__ , __leaf__));


extern _Complex _Float64x clogf64x (_Complex _Float64x __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Complex _Float64x __clogf64x (_Complex _Float64x __z) __attribute__ ((__nothrow__ , __leaf__));




extern _Complex _Float64x clog10f64x (_Complex _Float64x __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Complex _Float64x __clog10f64x (_Complex _Float64x __z) __attribute__ ((__nothrow__ , __leaf__));





extern _Complex _Float64x cpowf64x (_Complex _Float64x __x, _Complex _Float64x __y) __attribute__ ((__nothrow__ , __leaf__)); extern _Complex _Float64x __cpowf64x (_Complex _Float64x __x, _Complex _Float64x __y) __attribute__ ((__nothrow__ , __leaf__));


extern _Complex _Float64x csqrtf64x (_Complex _Float64x __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Complex _Float64x __csqrtf64x (_Complex _Float64x __z) __attribute__ ((__nothrow__ , __leaf__));





extern _Float64x cabsf64x (_Complex _Float64x __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __cabsf64x (_Complex _Float64x __z) __attribute__ ((__nothrow__ , __leaf__));


extern _Float64x cargf64x (_Complex _Float64x __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __cargf64x (_Complex _Float64x __z) __attribute__ ((__nothrow__ , __leaf__));


extern _Complex _Float64x conjf64x (_Complex _Float64x __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Complex _Float64x __conjf64x (_Complex _Float64x __z) __attribute__ ((__nothrow__ , __leaf__));


extern _Complex _Float64x cprojf64x (_Complex _Float64x __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Complex _Float64x __cprojf64x (_Complex _Float64x __z) __attribute__ ((__nothrow__ , __leaf__));





extern _Float64x cimagf64x (_Complex _Float64x __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __cimagf64x (_Complex _Float64x __z) __attribute__ ((__nothrow__ , __leaf__));


extern _Float64x crealf64x (_Complex _Float64x __z) __attribute__ ((__nothrow__ , __leaf__)); extern _Float64x __crealf64x (_Complex _Float64x __z) __attribute__ ((__nothrow__ , __leaf__));
# 225 "/usr/include/complex.h" 2 3 4
# 247 "/usr/include/complex.h" 3 4

# 118 "stress-ng.h" 2







# 1 "/usr/include/crypt.h" 1 3 4
# 24 "/usr/include/crypt.h" 3 4

# 63 "/usr/include/crypt.h" 3 4
extern char *crypt (const char *__phrase, const char *__setting)
__attribute__ ((__nothrow__ , __leaf__));







struct crypt_data
{



  char output[384];
# 86 "/usr/include/crypt.h" 3 4
  char setting[384];




  char input[512];






  char reserved[767];






  char initialized;




  char internal[30720];
};




extern char *crypt_r (const char *__phrase, const char *__setting,
                      struct crypt_data *__restrict __data)
__attribute__ ((__nothrow__ , __leaf__));
# 128 "/usr/include/crypt.h" 3 4
extern char *crypt_rn (const char *__phrase, const char *__setting,
                       void *__data, int __size)
__attribute__ ((__nothrow__ , __leaf__));
# 142 "/usr/include/crypt.h" 3 4
extern char *crypt_ra (const char *__phrase, const char *__setting,
                       void **__data, int *__size)
__attribute__ ((__nothrow__ , __leaf__));
# 167 "/usr/include/crypt.h" 3 4
extern char *crypt_gensalt (const char *__prefix, unsigned long __count,
                            const char *__rbytes, int __nrbytes)
__attribute__ ((__nothrow__ , __leaf__));
# 178 "/usr/include/crypt.h" 3 4
extern char *crypt_gensalt_rn (const char *__prefix, unsigned long __count,
                               const char *__rbytes, int __nrbytes,
                               char *__output, int __output_size)
__attribute__ ((__nothrow__ , __leaf__));







extern char * crypt_gensalt_r (const char *__prefix, unsigned long __count, const char *__rbytes, int __nrbytes, char *__output, int __output_size) __asm__ ("" "crypt_gensalt_rn") __attribute__ ((__nothrow__ , __leaf__))


                                                                   ;
# 201 "/usr/include/crypt.h" 3 4
extern char *crypt_gensalt_ra (const char *__prefix, unsigned long __count,
                               const char *__rbytes, int __nrbytes)
__attribute__ ((__nothrow__ , __leaf__));





extern int crypt_checksalt (const char *__setting);
# 225 "/usr/include/crypt.h" 3 4
extern const char *crypt_preferred_method (void);
# 249 "/usr/include/crypt.h" 3 4

# 126 "stress-ng.h" 2







# 1 "/usr/include/fenv.h" 1 3 4
# 26 "/usr/include/fenv.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/fenv.h" 2 3 4
# 64 "/usr/include/fenv.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/fenv.h" 1 3 4
# 24 "/usr/include/aarch64-linux-gnu/bits/fenv.h" 3 4
enum
  {
    FE_INVALID =

      1,
    FE_DIVBYZERO =

      2,
    FE_OVERFLOW =

      4,
    FE_UNDERFLOW =

      8,
    FE_INEXACT =

      16,
  };
# 58 "/usr/include/aarch64-linux-gnu/bits/fenv.h" 3 4
typedef unsigned int fexcept_t;


typedef struct
  {
    unsigned int __fpcr;
    unsigned int __fpsr;
  }
fenv_t;
# 78 "/usr/include/aarch64-linux-gnu/bits/fenv.h" 3 4
typedef unsigned int femode_t;
# 65 "/usr/include/fenv.h" 2 3 4






extern int feclearexcept (int __excepts) __attribute__ ((__nothrow__ , __leaf__));



extern int fegetexceptflag (fexcept_t *__flagp, int __excepts) __attribute__ ((__nothrow__ , __leaf__));


extern int feraiseexcept (int __excepts) __attribute__ ((__nothrow__ , __leaf__));




extern int fesetexcept (int __excepts) __attribute__ ((__nothrow__ , __leaf__));




extern int fesetexceptflag (const fexcept_t *__flagp, int __excepts) __attribute__ ((__nothrow__ , __leaf__));



extern int fetestexcept (int __excepts) __attribute__ ((__nothrow__ , __leaf__));




extern int fetestexceptflag (const fexcept_t *__flagp, int __excepts) __attribute__ ((__nothrow__ , __leaf__));






extern int fegetround (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__));


extern int fesetround (int __rounding_direction) __attribute__ ((__nothrow__ , __leaf__));






extern int fegetenv (fenv_t *__envp) __attribute__ ((__nothrow__ , __leaf__));




extern int feholdexcept (fenv_t *__envp) __attribute__ ((__nothrow__ , __leaf__));



extern int fesetenv (const fenv_t *__envp) __attribute__ ((__nothrow__ , __leaf__));




extern int feupdateenv (const fenv_t *__envp) __attribute__ ((__nothrow__ , __leaf__));







extern int fegetmode (femode_t *__modep) __attribute__ ((__nothrow__ , __leaf__));



extern int fesetmode (const femode_t *__modep) __attribute__ ((__nothrow__ , __leaf__));
# 157 "/usr/include/fenv.h" 3 4
extern int feenableexcept (int __excepts) __attribute__ ((__nothrow__ , __leaf__));




extern int fedisableexcept (int __excepts) __attribute__ ((__nothrow__ , __leaf__));


extern int fegetexcept (void) __attribute__ ((__nothrow__ , __leaf__));



# 134 "stress-ng.h" 2



# 1 "/usr/lib/gcc/aarch64-linux-gnu/11/include/float.h" 1 3 4
# 138 "stress-ng.h" 2



# 1 "/usr/include/grp.h" 1 3 4
# 27 "/usr/include/grp.h" 3 4





# 1 "/usr/lib/gcc/aarch64-linux-gnu/11/include/stddef.h" 1 3 4
# 33 "/usr/include/grp.h" 2 3 4
# 42 "/usr/include/grp.h" 3 4
struct group
  {
    char *gr_name;
    char *gr_passwd;
    __gid_t gr_gid;
    char **gr_mem;
  };
# 61 "/usr/include/grp.h" 3 4
extern void setgrent (void);





extern void endgrent (void);





extern struct group *getgrent (void);
# 83 "/usr/include/grp.h" 3 4
extern struct group *fgetgrent (FILE *__stream);
# 93 "/usr/include/grp.h" 3 4
extern int putgrent (const struct group *__restrict __p,
       FILE *__restrict __f);






extern struct group *getgrgid (__gid_t __gid);





extern struct group *getgrnam (const char *__name);
# 131 "/usr/include/grp.h" 3 4
extern int getgrent_r (struct group *__restrict __resultbuf,
         char *__restrict __buffer, size_t __buflen,
         struct group **__restrict __result);






extern int getgrgid_r (__gid_t __gid, struct group *__restrict __resultbuf,
         char *__restrict __buffer, size_t __buflen,
         struct group **__restrict __result);





extern int getgrnam_r (const char *__restrict __name,
         struct group *__restrict __resultbuf,
         char *__restrict __buffer, size_t __buflen,
         struct group **__restrict __result);
# 161 "/usr/include/grp.h" 3 4
extern int fgetgrent_r (FILE *__restrict __stream,
   struct group *__restrict __resultbuf,
   char *__restrict __buffer, size_t __buflen,
   struct group **__restrict __result);
# 173 "/usr/include/grp.h" 3 4
# 1 "/usr/lib/gcc/aarch64-linux-gnu/11/include/stddef.h" 1 3 4
# 174 "/usr/include/grp.h" 2 3 4


extern int setgroups (size_t __n, const __gid_t *__groups) __attribute__ ((__nothrow__ , __leaf__));
# 186 "/usr/include/grp.h" 3 4
extern int getgrouplist (const char *__user, __gid_t __group,
    __gid_t *__groups, int *__ngroups);
# 197 "/usr/include/grp.h" 3 4
extern int initgroups (const char *__user, __gid_t __group);




# 142 "stress-ng.h" 2
# 161 "stress-ng.h"
# 1 "/usr/include/libgen.h" 1 3 4
# 23 "/usr/include/libgen.h" 3 4



extern char *dirname (char *__path) __attribute__ ((__nothrow__ , __leaf__));







extern char *__xpg_basename (char *__path) __attribute__ ((__nothrow__ , __leaf__));



# 162 "stress-ng.h" 2



# 1 "/usr/include/link.h" 1 3 4
# 24 "/usr/include/link.h" 3 4
# 1 "/usr/include/elf.h" 1 3 4
# 27 "/usr/include/elf.h" 3 4
typedef uint16_t Elf32_Half;
typedef uint16_t Elf64_Half;


typedef uint32_t Elf32_Word;
typedef int32_t Elf32_Sword;
typedef uint32_t Elf64_Word;
typedef int32_t Elf64_Sword;


typedef uint64_t Elf32_Xword;
typedef int64_t Elf32_Sxword;
typedef uint64_t Elf64_Xword;
typedef int64_t Elf64_Sxword;


typedef uint32_t Elf32_Addr;
typedef uint64_t Elf64_Addr;


typedef uint32_t Elf32_Off;
typedef uint64_t Elf64_Off;


typedef uint16_t Elf32_Section;
typedef uint16_t Elf64_Section;


typedef Elf32_Half Elf32_Versym;
typedef Elf64_Half Elf64_Versym;






typedef struct
{
  unsigned char e_ident[(16)];
  Elf32_Half e_type;
  Elf32_Half e_machine;
  Elf32_Word e_version;
  Elf32_Addr e_entry;
  Elf32_Off e_phoff;
  Elf32_Off e_shoff;
  Elf32_Word e_flags;
  Elf32_Half e_ehsize;
  Elf32_Half e_phentsize;
  Elf32_Half e_phnum;
  Elf32_Half e_shentsize;
  Elf32_Half e_shnum;
  Elf32_Half e_shstrndx;
} Elf32_Ehdr;

typedef struct
{
  unsigned char e_ident[(16)];
  Elf64_Half e_type;
  Elf64_Half e_machine;
  Elf64_Word e_version;
  Elf64_Addr e_entry;
  Elf64_Off e_phoff;
  Elf64_Off e_shoff;
  Elf64_Word e_flags;
  Elf64_Half e_ehsize;
  Elf64_Half e_phentsize;
  Elf64_Half e_phnum;
  Elf64_Half e_shentsize;
  Elf64_Half e_shnum;
  Elf64_Half e_shstrndx;
} Elf64_Ehdr;
# 382 "/usr/include/elf.h" 3 4
typedef struct
{
  Elf32_Word sh_name;
  Elf32_Word sh_type;
  Elf32_Word sh_flags;
  Elf32_Addr sh_addr;
  Elf32_Off sh_offset;
  Elf32_Word sh_size;
  Elf32_Word sh_link;
  Elf32_Word sh_info;
  Elf32_Word sh_addralign;
  Elf32_Word sh_entsize;
} Elf32_Shdr;

typedef struct
{
  Elf64_Word sh_name;
  Elf64_Word sh_type;
  Elf64_Xword sh_flags;
  Elf64_Addr sh_addr;
  Elf64_Off sh_offset;
  Elf64_Xword sh_size;
  Elf64_Word sh_link;
  Elf64_Word sh_info;
  Elf64_Xword sh_addralign;
  Elf64_Xword sh_entsize;
} Elf64_Shdr;
# 490 "/usr/include/elf.h" 3 4
typedef struct
{
  Elf32_Word ch_type;
  Elf32_Word ch_size;
  Elf32_Word ch_addralign;
} Elf32_Chdr;

typedef struct
{
  Elf64_Word ch_type;
  Elf64_Word ch_reserved;
  Elf64_Xword ch_size;
  Elf64_Xword ch_addralign;
} Elf64_Chdr;
# 517 "/usr/include/elf.h" 3 4
typedef struct
{
  Elf32_Word st_name;
  Elf32_Addr st_value;
  Elf32_Word st_size;
  unsigned char st_info;
  unsigned char st_other;
  Elf32_Section st_shndx;
} Elf32_Sym;

typedef struct
{
  Elf64_Word st_name;
  unsigned char st_info;
  unsigned char st_other;
  Elf64_Section st_shndx;
  Elf64_Addr st_value;
  Elf64_Xword st_size;
} Elf64_Sym;




typedef struct
{
  Elf32_Half si_boundto;
  Elf32_Half si_flags;
} Elf32_Syminfo;

typedef struct
{
  Elf64_Half si_boundto;
  Elf64_Half si_flags;
} Elf64_Syminfo;
# 632 "/usr/include/elf.h" 3 4
typedef struct
{
  Elf32_Addr r_offset;
  Elf32_Word r_info;
} Elf32_Rel;






typedef struct
{
  Elf64_Addr r_offset;
  Elf64_Xword r_info;
} Elf64_Rel;



typedef struct
{
  Elf32_Addr r_offset;
  Elf32_Word r_info;
  Elf32_Sword r_addend;
} Elf32_Rela;

typedef struct
{
  Elf64_Addr r_offset;
  Elf64_Xword r_info;
  Elf64_Sxword r_addend;
} Elf64_Rela;
# 677 "/usr/include/elf.h" 3 4
typedef struct
{
  Elf32_Word p_type;
  Elf32_Off p_offset;
  Elf32_Addr p_vaddr;
  Elf32_Addr p_paddr;
  Elf32_Word p_filesz;
  Elf32_Word p_memsz;
  Elf32_Word p_flags;
  Elf32_Word p_align;
} Elf32_Phdr;

typedef struct
{
  Elf64_Word p_type;
  Elf64_Word p_flags;
  Elf64_Off p_offset;
  Elf64_Addr p_vaddr;
  Elf64_Addr p_paddr;
  Elf64_Xword p_filesz;
  Elf64_Xword p_memsz;
  Elf64_Xword p_align;
} Elf64_Phdr;
# 833 "/usr/include/elf.h" 3 4
typedef struct
{
  Elf32_Sword d_tag;
  union
    {
      Elf32_Word d_val;
      Elf32_Addr d_ptr;
    } d_un;
} Elf32_Dyn;

typedef struct
{
  Elf64_Sxword d_tag;
  union
    {
      Elf64_Xword d_val;
      Elf64_Addr d_ptr;
    } d_un;
} Elf64_Dyn;
# 1015 "/usr/include/elf.h" 3 4
typedef struct
{
  Elf32_Half vd_version;
  Elf32_Half vd_flags;
  Elf32_Half vd_ndx;
  Elf32_Half vd_cnt;
  Elf32_Word vd_hash;
  Elf32_Word vd_aux;
  Elf32_Word vd_next;

} Elf32_Verdef;

typedef struct
{
  Elf64_Half vd_version;
  Elf64_Half vd_flags;
  Elf64_Half vd_ndx;
  Elf64_Half vd_cnt;
  Elf64_Word vd_hash;
  Elf64_Word vd_aux;
  Elf64_Word vd_next;

} Elf64_Verdef;
# 1057 "/usr/include/elf.h" 3 4
typedef struct
{
  Elf32_Word vda_name;
  Elf32_Word vda_next;

} Elf32_Verdaux;

typedef struct
{
  Elf64_Word vda_name;
  Elf64_Word vda_next;

} Elf64_Verdaux;




typedef struct
{
  Elf32_Half vn_version;
  Elf32_Half vn_cnt;
  Elf32_Word vn_file;

  Elf32_Word vn_aux;
  Elf32_Word vn_next;

} Elf32_Verneed;

typedef struct
{
  Elf64_Half vn_version;
  Elf64_Half vn_cnt;
  Elf64_Word vn_file;

  Elf64_Word vn_aux;
  Elf64_Word vn_next;

} Elf64_Verneed;
# 1104 "/usr/include/elf.h" 3 4
typedef struct
{
  Elf32_Word vna_hash;
  Elf32_Half vna_flags;
  Elf32_Half vna_other;
  Elf32_Word vna_name;
  Elf32_Word vna_next;

} Elf32_Vernaux;

typedef struct
{
  Elf64_Word vna_hash;
  Elf64_Half vna_flags;
  Elf64_Half vna_other;
  Elf64_Word vna_name;
  Elf64_Word vna_next;

} Elf64_Vernaux;
# 1138 "/usr/include/elf.h" 3 4
typedef struct
{
  uint32_t a_type;
  union
    {
      uint32_t a_val;



    } a_un;
} Elf32_auxv_t;

typedef struct
{
  uint64_t a_type;
  union
    {
      uint64_t a_val;



    } a_un;
} Elf64_auxv_t;
# 1239 "/usr/include/elf.h" 3 4
typedef struct
{
  Elf32_Word n_namesz;
  Elf32_Word n_descsz;
  Elf32_Word n_type;
} Elf32_Nhdr;

typedef struct
{
  Elf64_Word n_namesz;
  Elf64_Word n_descsz;
  Elf64_Word n_type;
} Elf64_Nhdr;
# 1383 "/usr/include/elf.h" 3 4
typedef struct
{
  Elf32_Xword m_value;
  Elf32_Word m_info;
  Elf32_Word m_poffset;
  Elf32_Half m_repeat;
  Elf32_Half m_stride;
} Elf32_Move;

typedef struct
{
  Elf64_Xword m_value;
  Elf64_Xword m_info;
  Elf64_Xword m_poffset;
  Elf64_Half m_repeat;
  Elf64_Half m_stride;
} Elf64_Move;
# 1773 "/usr/include/elf.h" 3 4
typedef union
{
  struct
    {
      Elf32_Word gt_current_g_value;
      Elf32_Word gt_unused;
    } gt_header;
  struct
    {
      Elf32_Word gt_g_value;
      Elf32_Word gt_bytes;
    } gt_entry;
} Elf32_gptab;



typedef struct
{
  Elf32_Word ri_gprmask;
  Elf32_Word ri_cprmask[4];
  Elf32_Sword ri_gp_value;
} Elf32_RegInfo;



typedef struct
{
  unsigned char kind;

  unsigned char size;
  Elf32_Section section;

  Elf32_Word info;
} Elf_Options;
# 1849 "/usr/include/elf.h" 3 4
typedef struct
{
  Elf32_Word hwp_flags1;
  Elf32_Word hwp_flags2;
} Elf_Options_Hw;
# 2017 "/usr/include/elf.h" 3 4
typedef struct
{
  Elf32_Word l_name;
  Elf32_Word l_time_stamp;
  Elf32_Word l_checksum;
  Elf32_Word l_version;
  Elf32_Word l_flags;
} Elf32_Lib;

typedef struct
{
  Elf64_Word l_name;
  Elf64_Word l_time_stamp;
  Elf64_Word l_checksum;
  Elf64_Word l_version;
  Elf64_Word l_flags;
} Elf64_Lib;
# 2048 "/usr/include/elf.h" 3 4
typedef Elf32_Addr Elf32_Conflict;

typedef struct
{

  Elf32_Half version;

  unsigned char isa_level;

  unsigned char isa_rev;

  unsigned char gpr_size;

  unsigned char cpr1_size;

  unsigned char cpr2_size;

  unsigned char fp_abi;

  Elf32_Word isa_ext;

  Elf32_Word ases;

  Elf32_Word flags1;
  Elf32_Word flags2;
} Elf_MIPS_ABIFlags_v0;
# 2124 "/usr/include/elf.h" 3 4
enum
{

  Val_GNU_MIPS_ABI_FP_ANY = 0,

  Val_GNU_MIPS_ABI_FP_DOUBLE = 1,

  Val_GNU_MIPS_ABI_FP_SINGLE = 2,

  Val_GNU_MIPS_ABI_FP_SOFT = 3,

  Val_GNU_MIPS_ABI_FP_OLD_64 = 4,

  Val_GNU_MIPS_ABI_FP_XX = 5,

  Val_GNU_MIPS_ABI_FP_64 = 6,

  Val_GNU_MIPS_ABI_FP_64A = 7,

  Val_GNU_MIPS_ABI_FP_MAX = 7
};
# 25 "/usr/include/link.h" 2 3 4
# 1 "/usr/include/dlfcn.h" 1 3 4
# 24 "/usr/include/dlfcn.h" 3 4
# 1 "/usr/lib/gcc/aarch64-linux-gnu/11/include/stddef.h" 1 3 4
# 25 "/usr/include/dlfcn.h" 2 3 4


# 1 "/usr/include/aarch64-linux-gnu/bits/dlfcn.h" 1 3 4
# 57 "/usr/include/aarch64-linux-gnu/bits/dlfcn.h" 3 4



extern void _dl_mcount_wrapper_check (void *__selfpc) __attribute__ ((__nothrow__ , __leaf__));


# 28 "/usr/include/dlfcn.h" 2 3 4



# 1 "/usr/include/aarch64-linux-gnu/bits/dl_find_object.h" 1 3 4
# 32 "/usr/include/dlfcn.h" 2 3 4
# 46 "/usr/include/dlfcn.h" 3 4
typedef long int Lmid_t;











extern void *dlopen (const char *__file, int __mode) __attribute__ ((__nothrow__));



extern int dlclose (void *__handle) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



extern void *dlsym (void *__restrict __handle,
      const char *__restrict __name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



extern void *dlmopen (Lmid_t __nsid, const char *__file, int __mode) __attribute__ ((__nothrow__));



extern void *dlvsym (void *__restrict __handle,
       const char *__restrict __name,
       const char *__restrict __version)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));





extern char *dlerror (void) __attribute__ ((__nothrow__ , __leaf__));





typedef struct
{
  const char *dli_fname;
  void *dli_fbase;
  const char *dli_sname;
  void *dli_saddr;
} Dl_info;



extern int dladdr (const void *__address, Dl_info *__info)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));


extern int dladdr1 (const void *__address, Dl_info *__info,
      void **__extra_info, int __flags) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));




enum
  {

    RTLD_DL_SYMENT = 1,


    RTLD_DL_LINKMAP = 2
  };







extern int dlinfo (void *__restrict __handle,
     int __request, void *__restrict __arg)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3)));


enum
  {

    RTLD_DI_LMID = 1,



    RTLD_DI_LINKMAP = 2,

    RTLD_DI_CONFIGADDR = 3,






    RTLD_DI_SERINFO = 4,
    RTLD_DI_SERINFOSIZE = 5,



    RTLD_DI_ORIGIN = 6,

    RTLD_DI_PROFILENAME = 7,
    RTLD_DI_PROFILEOUT = 8,




    RTLD_DI_TLS_MODID = 9,





    RTLD_DI_TLS_DATA = 10,

    RTLD_DI_MAX = 10
  };




typedef struct
{
  char *dls_name;
  unsigned int dls_flags;
} Dl_serpath;



typedef struct
{
  size_t dls_size;
  unsigned int dls_cnt;





  __extension__ union
  {
    Dl_serpath dls_serpath[0];
    Dl_serpath __dls_serpath_pad[1];
  };



} Dl_serinfo;

struct dl_find_object
{
  __extension__ unsigned long long int dlfo_flags;
  void *dlfo_map_start;
  void *dlfo_map_end;
  struct link_map *dlfo_link_map;
  void *dlfo_eh_frame;
# 217 "/usr/include/dlfcn.h" 3 4
  __extension__ unsigned long long int __dflo_reserved[7];
};



int _dl_find_object (void *__address, struct dl_find_object *__result) __attribute__ ((__nothrow__ , __leaf__));





# 26 "/usr/include/link.h" 2 3 4
# 34 "/usr/include/link.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/elfclass.h" 1 3 4
# 9 "/usr/include/aarch64-linux-gnu/bits/elfclass.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/wordsize.h" 1 3 4
# 10 "/usr/include/aarch64-linux-gnu/bits/elfclass.h" 2 3 4




typedef uint32_t Elf_Symndx;
# 35 "/usr/include/link.h" 2 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/link.h" 1 3 4
# 23 "/usr/include/aarch64-linux-gnu/bits/link.h" 3 4
typedef union
{
  float s;
  double d;
  long double q;
} La_aarch64_vector;


typedef struct La_aarch64_regs
{
  uint64_t lr_xreg[9];
  La_aarch64_vector lr_vreg[8];
  uint64_t lr_sp;
  uint64_t lr_lr;
  void *lr_vpcs;
} La_aarch64_regs;


typedef struct La_aarch64_retval
{

  uint64_t lrv_xreg[8];

  La_aarch64_vector lrv_vreg[8];
  void *lrv_vpcs;
} La_aarch64_retval;


extern Elf64_Addr
la_aarch64_gnu_pltenter (Elf64_Sym *__sym, unsigned int __ndx,
    uintptr_t *__refcook,
    uintptr_t *__defcook,
    La_aarch64_regs *__regs,
    unsigned int *__flags,
    const char *__symname,
    long int *__framesizep);

extern unsigned int
la_aarch64_gnu_pltexit (Elf64_Sym *__sym, unsigned int __ndx,
   uintptr_t *__refcook,
   uintptr_t *__defcook,
   const La_aarch64_regs *__inregs,
   La_aarch64_retval *__outregs,
   const char *__symname);


# 36 "/usr/include/link.h" 2 3 4




struct r_debug
  {

    int r_version;

    struct link_map *r_map;






    Elf64_Addr r_brk;
    enum
      {


 RT_CONSISTENT,
 RT_ADD,
 RT_DELETE
      } r_state;

    Elf64_Addr r_ldbase;
  };


extern struct r_debug _r_debug;







struct r_debug_extended
  {
    struct r_debug base;






    struct r_debug_extended *r_next;
  };
# 93 "/usr/include/link.h" 3 4
extern Elf64_Dyn _DYNAMIC[];







struct link_map
  {



    Elf64_Addr l_addr;

    char *l_name;
    Elf64_Dyn *l_ld;
    struct link_map *l_next, *l_prev;
  };




# 1 "/usr/include/aarch64-linux-gnu/bits/link_lavcurrent.h" 1 3 4
# 117 "/usr/include/link.h" 2 3 4


enum
  {
    LA_ACT_CONSISTENT,
    LA_ACT_ADD,
    LA_ACT_DELETE
  };


enum
  {
    LA_SER_ORIG = 0x01,
    LA_SER_LIBPATH = 0x02,
    LA_SER_RUNPATH = 0x04,
    LA_SER_CONFIG = 0x08,
    LA_SER_DEFAULT = 0x40,
    LA_SER_SECURE = 0x80
  };


enum
  {
    LA_FLG_BINDTO = 0x01,
    LA_FLG_BINDFROM = 0x02
  };


enum
  {
    LA_SYMB_NOPLTENTER = 0x01,
    LA_SYMB_NOPLTEXIT = 0x02,
    LA_SYMB_STRUCTCALL = 0x04,
    LA_SYMB_DLSYM = 0x08,
    LA_SYMB_ALTVALUE = 0x10

  };

struct dl_phdr_info
  {
    Elf64_Addr dlpi_addr;
    const char *dlpi_name;
    const Elf64_Phdr *dlpi_phdr;
    Elf64_Half dlpi_phnum;







    __extension__ unsigned long long int dlpi_adds;

    __extension__ unsigned long long int dlpi_subs;



    size_t dlpi_tls_modid;




    void *dlpi_tls_data;
  };



extern int dl_iterate_phdr (int (*__callback) (struct dl_phdr_info *,
            size_t, void *),
       void *__data);





extern unsigned int la_version (unsigned int __version);
extern void la_activity (uintptr_t *__cookie, unsigned int __flag);
extern char *la_objsearch (const char *__name, uintptr_t *__cookie,
      unsigned int __flag);
extern unsigned int la_objopen (struct link_map *__map, Lmid_t __lmid,
    uintptr_t *__cookie);
extern void la_preinit (uintptr_t *__cookie);
extern uintptr_t la_symbind32 (Elf32_Sym *__sym, unsigned int __ndx,
          uintptr_t *__refcook, uintptr_t *__defcook,
          unsigned int *__flags, const char *__symname);
extern uintptr_t la_symbind64 (Elf64_Sym *__sym, unsigned int __ndx,
          uintptr_t *__refcook, uintptr_t *__defcook,
          unsigned int *__flags, const char *__symname);
extern unsigned int la_objclose (uintptr_t *__cookie);


# 166 "stress-ng.h" 2



# 1 "/usr/include/locale.h" 1 3 4
# 28 "/usr/include/locale.h" 3 4
# 1 "/usr/lib/gcc/aarch64-linux-gnu/11/include/stddef.h" 1 3 4
# 29 "/usr/include/locale.h" 2 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/locale.h" 1 3 4
# 30 "/usr/include/locale.h" 2 3 4


# 51 "/usr/include/locale.h" 3 4
struct lconv
{


  char *decimal_point;
  char *thousands_sep;





  char *grouping;





  char *int_curr_symbol;
  char *currency_symbol;
  char *mon_decimal_point;
  char *mon_thousands_sep;
  char *mon_grouping;
  char *positive_sign;
  char *negative_sign;
  char int_frac_digits;
  char frac_digits;

  char p_cs_precedes;

  char p_sep_by_space;

  char n_cs_precedes;

  char n_sep_by_space;






  char p_sign_posn;
  char n_sign_posn;


  char int_p_cs_precedes;

  char int_p_sep_by_space;

  char int_n_cs_precedes;

  char int_n_sep_by_space;






  char int_p_sign_posn;
  char int_n_sign_posn;
# 118 "/usr/include/locale.h" 3 4
};



extern char *setlocale (int __category, const char *__locale) __attribute__ ((__nothrow__ , __leaf__));


extern struct lconv *localeconv (void) __attribute__ ((__nothrow__ , __leaf__));
# 141 "/usr/include/locale.h" 3 4
extern locale_t newlocale (int __category_mask, const char *__locale,
      locale_t __base) __attribute__ ((__nothrow__ , __leaf__));
# 176 "/usr/include/locale.h" 3 4
extern locale_t duplocale (locale_t __dataset) __attribute__ ((__nothrow__ , __leaf__));



extern void freelocale (locale_t __dataset) __attribute__ ((__nothrow__ , __leaf__));






extern locale_t uselocale (locale_t __dataset) __attribute__ ((__nothrow__ , __leaf__));








# 170 "stress-ng.h" 2



# 1 "/usr/include/malloc.h" 1 3 4
# 24 "/usr/include/malloc.h" 3 4
# 1 "/usr/lib/gcc/aarch64-linux-gnu/11/include/stddef.h" 1 3 4
# 25 "/usr/include/malloc.h" 2 3 4
# 36 "/usr/include/malloc.h" 3 4



extern void *malloc (size_t __size) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__))
     __attribute__ ((__alloc_size__ (1))) __attribute__ ((__warn_unused_result__));


extern void *calloc (size_t __nmemb, size_t __size)
__attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__alloc_size__ (1, 2))) __attribute__ ((__warn_unused_result__));






extern void *realloc (void *__ptr, size_t __size)
__attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__)) __attribute__ ((__alloc_size__ (2)));






extern void *reallocarray (void *__ptr, size_t __nmemb, size_t __size)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__)) __attribute__ ((__alloc_size__ (2, 3)))
  __attribute__ ((__malloc__ (__builtin_free, 1)));


extern void free (void *__ptr) __attribute__ ((__nothrow__ , __leaf__));


extern void *memalign (size_t __alignment, size_t __size)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__alloc_align__ (1)))
  __attribute__ ((__alloc_size__ (2))) __attribute__ ((__warn_unused_result__)) __attribute__ ((__malloc__ (__builtin_free, 1)));


extern void *valloc (size_t __size) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__))
     __attribute__ ((__alloc_size__ (1))) __attribute__ ((__warn_unused_result__)) __attribute__ ((__malloc__ (__builtin_free, 1)));



extern void *pvalloc (size_t __size) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__))
  __attribute__ ((__warn_unused_result__)) __attribute__ ((__malloc__ (__builtin_free, 1)));



struct mallinfo
{
  int arena;
  int ordblks;
  int smblks;
  int hblks;
  int hblkhd;
  int usmblks;
  int fsmblks;
  int uordblks;
  int fordblks;
  int keepcost;
};




struct mallinfo2
{
  size_t arena;
  size_t ordblks;
  size_t smblks;
  size_t hblks;
  size_t hblkhd;
  size_t usmblks;
  size_t fsmblks;
  size_t uordblks;
  size_t fordblks;
  size_t keepcost;
};


extern struct mallinfo mallinfo (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__deprecated__));


extern struct mallinfo2 mallinfo2 (void) __attribute__ ((__nothrow__ , __leaf__));
# 144 "/usr/include/malloc.h" 3 4
extern int mallopt (int __param, int __val) __attribute__ ((__nothrow__ , __leaf__));



extern int malloc_trim (size_t __pad) __attribute__ ((__nothrow__ , __leaf__));



extern size_t malloc_usable_size (void *__ptr) __attribute__ ((__nothrow__ , __leaf__));


extern void malloc_stats (void) __attribute__ ((__nothrow__ , __leaf__));


extern int malloc_info (int __options, FILE *__fp) __attribute__ ((__nothrow__ , __leaf__));


# 174 "stress-ng.h" 2



# 1 "/usr/include/mntent.h" 1 3 4
# 23 "/usr/include/mntent.h" 3 4
# 1 "/usr/include/paths.h" 1 3 4
# 24 "/usr/include/mntent.h" 2 3 4
# 48 "/usr/include/mntent.h" 3 4



struct mntent
  {
    char *mnt_fsname;
    char *mnt_dir;
    char *mnt_type;
    char *mnt_opts;
    int mnt_freq;
    int mnt_passno;
  };




extern FILE *setmntent (const char *__file, const char *__mode) __attribute__ ((__nothrow__ , __leaf__));




extern struct mntent *getmntent (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));



extern struct mntent *getmntent_r (FILE *__restrict __stream,
       struct mntent *__restrict __result,
       char *__restrict __buffer,
       int __bufsize) __attribute__ ((__nothrow__ , __leaf__));




extern int addmntent (FILE *__restrict __stream,
        const struct mntent *__restrict __mnt) __attribute__ ((__nothrow__ , __leaf__));


extern int endmntent (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));



extern char *hasmntopt (const struct mntent *__mnt,
   const char *__opt) __attribute__ ((__nothrow__ , __leaf__));



# 178 "stress-ng.h" 2



# 1 "/usr/include/mqueue.h" 1 3 4
# 27 "/usr/include/mqueue.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/mqueue.h" 1 3 4
# 24 "/usr/include/aarch64-linux-gnu/bits/mqueue.h" 3 4
typedef int mqd_t;

struct mq_attr
{
  __syscall_slong_t mq_flags;
  __syscall_slong_t mq_maxmsg;
  __syscall_slong_t mq_msgsize;
  __syscall_slong_t mq_curmsgs;
  __syscall_slong_t __pad[4];
};
# 28 "/usr/include/mqueue.h" 2 3 4


# 38 "/usr/include/mqueue.h" 3 4
extern mqd_t mq_open (const char *__name, int __oflag, ...)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int mq_close (mqd_t __mqdes) __attribute__ ((__nothrow__ , __leaf__));


extern int mq_getattr (mqd_t __mqdes, struct mq_attr *__mqstat)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



extern int mq_setattr (mqd_t __mqdes,
         const struct mq_attr *__restrict __mqstat,
         struct mq_attr *__restrict __omqstat)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));


extern int mq_unlink (const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int mq_notify (mqd_t __mqdes, const struct sigevent *__notification)
     __attribute__ ((__nothrow__ , __leaf__));



extern ssize_t mq_receive (mqd_t __mqdes, char *__msg_ptr, size_t __msg_len,
      unsigned int *__msg_prio) __attribute__ ((__nonnull__ (2)));


extern int mq_send (mqd_t __mqdes, const char *__msg_ptr, size_t __msg_len,
      unsigned int __msg_prio) __attribute__ ((__nonnull__ (2)));





extern ssize_t mq_timedreceive (mqd_t __mqdes, char *__restrict __msg_ptr,
    size_t __msg_len,
    unsigned int *__restrict __msg_prio,
    const struct timespec *__restrict __abs_timeout)
  __attribute__ ((__nonnull__ (2, 5)));



extern int mq_timedsend (mqd_t __mqdes, const char *__msg_ptr,
    size_t __msg_len, unsigned int __msg_prio,
    const struct timespec *__abs_timeout)
  __attribute__ ((__nonnull__ (2, 5)));
# 115 "/usr/include/mqueue.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/mqueue2.h" 1 3 4
# 25 "/usr/include/aarch64-linux-gnu/bits/mqueue2.h" 3 4
extern mqd_t mq_open (const char *__name, int __oflag, ...)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern mqd_t __mq_open_2 (const char *__name, int __oflag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern mqd_t __mq_open_alias (const char *__name, int __oflag, ...) __asm__ ("" "mq_open") __attribute__ ((__nothrow__ , __leaf__))

     __attribute__ ((__nonnull__ (1)));
extern void __mq_open_wrong_number_of_args (void) __attribute__((__error__ ("mq_open can be called either with 2 or 4 arguments")))
                                                           ;
extern void __mq_open_missing_mode_and_attr (void) __attribute__((__error__ ("mq_open with O_CREAT in second argument needs 4 arguments")))
                                                                  ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) mqd_t
__attribute__ ((__nothrow__ , __leaf__)) mq_open (const char *__name, int __oflag, ...)
{
  if (__builtin_va_arg_pack_len () != 0 && __builtin_va_arg_pack_len () != 2)
    __mq_open_wrong_number_of_args ();

  if (__builtin_constant_p (__oflag))
    {
      if ((__oflag & 0100) != 0 && __builtin_va_arg_pack_len () == 0)
 {
   __mq_open_missing_mode_and_attr ();
   return __mq_open_2 (__name, __oflag);
 }
      return __mq_open_alias (__name, __oflag, __builtin_va_arg_pack ());
    }

  if (__builtin_va_arg_pack_len () == 0)
    return __mq_open_2 (__name, __oflag);

  return __mq_open_alias (__name, __oflag, __builtin_va_arg_pack ());
}
# 116 "/usr/include/mqueue.h" 2 3 4



# 182 "stress-ng.h" 2



# 1 "/usr/include/poll.h" 1 3 4
# 1 "/usr/include/aarch64-linux-gnu/sys/poll.h" 1 3 4
# 25 "/usr/include/aarch64-linux-gnu/sys/poll.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/poll.h" 1 3 4
# 26 "/usr/include/aarch64-linux-gnu/sys/poll.h" 2 3 4







typedef unsigned long int nfds_t;


struct pollfd
  {
    int fd;
    short int events;
    short int revents;
  };



# 54 "/usr/include/aarch64-linux-gnu/sys/poll.h" 3 4
extern int poll (struct pollfd *__fds, nfds_t __nfds, int __timeout)
    __attribute__ ((__access__ (__write_only__, 1, 2)));
# 64 "/usr/include/aarch64-linux-gnu/sys/poll.h" 3 4
extern int ppoll (struct pollfd *__fds, nfds_t __nfds,
    const struct timespec *__timeout,
    const __sigset_t *__ss)
    __attribute__ ((__access__ (__write_only__, 1, 2)));
# 82 "/usr/include/aarch64-linux-gnu/sys/poll.h" 3 4





# 1 "/usr/include/aarch64-linux-gnu/bits/poll2.h" 1 3 4
# 24 "/usr/include/aarch64-linux-gnu/bits/poll2.h" 3 4


extern int __poll_alias (struct pollfd *__fds, nfds_t __nfds, int __timeout) __asm__ ("" "poll")
                               ;
extern int __poll_chk (struct pollfd *__fds, nfds_t __nfds, int __timeout,
         long unsigned int __fdslen)
    __attribute__ ((__access__ (__write_only__, 1, 2)));
extern int __poll_chk_warn (struct pollfd *__fds, nfds_t __nfds, int __timeout, long unsigned int __fdslen) __asm__ ("" "__poll_chk")


  __attribute__((__warning__ ("poll called with fds buffer too small file nfds entries")));

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__access__ (__write_only__, 1, 2))) int
poll (struct pollfd *__fds, nfds_t __nfds, int __timeout)
{
  return ((((__typeof (__nfds)) 0 < (__typeof (__nfds)) -1 || (__builtin_constant_p (__nfds) && (__nfds) > 0)) && __builtin_constant_p ((((long unsigned int) (__nfds)) <= (__builtin_object_size (__fds, 2 > 1)) / (sizeof (*__fds)))) && (((long unsigned int) (__nfds)) <= (__builtin_object_size (__fds, 2 > 1)) / (sizeof (*__fds)))) ? __poll_alias (__fds, __nfds, __timeout) : ((((__typeof (__nfds)) 0 < (__typeof (__nfds)) -1 || (__builtin_constant_p (__nfds) && (__nfds) > 0)) && __builtin_constant_p ((((long unsigned int) (__nfds)) <= (__builtin_object_size (__fds, 2 > 1)) / (sizeof (*__fds)))) && !(((long unsigned int) (__nfds)) <= (__builtin_object_size (__fds, 2 > 1)) / (sizeof (*__fds)))) ? __poll_chk_warn (__fds, __nfds, __timeout, __builtin_object_size (__fds, 2 > 1)) : __poll_chk (__fds, __nfds, __timeout, __builtin_object_size (__fds, 2 > 1))))

                              ;
}



extern int __ppoll_alias (struct pollfd *__fds, nfds_t __nfds, const struct timespec *__timeout, const __sigset_t *__ss) __asm__ ("" "ppoll")

                                          ;
extern int __ppoll_chk (struct pollfd *__fds, nfds_t __nfds,
   const struct timespec *__timeout,
   const __sigset_t *__ss, long unsigned int __fdslen)
    __attribute__ ((__access__ (__write_only__, 1, 2)));
extern int __ppoll_chk_warn (struct pollfd *__fds, nfds_t __nfds, const struct timespec *__timeout, const __sigset_t *__ss, long unsigned int __fdslen) __asm__ ("" "__ppoll_chk")




  __attribute__((__warning__ ("ppoll called with fds buffer too small file nfds entries")));

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__access__ (__write_only__, 1, 2))) int
ppoll (struct pollfd *__fds, nfds_t __nfds, const struct timespec *__timeout,
       const __sigset_t *__ss)
{
  return ((((__typeof (__nfds)) 0 < (__typeof (__nfds)) -1 || (__builtin_constant_p (__nfds) && (__nfds) > 0)) && __builtin_constant_p ((((long unsigned int) (__nfds)) <= (__builtin_object_size (__fds, 2 > 1)) / (sizeof (*__fds)))) && (((long unsigned int) (__nfds)) <= (__builtin_object_size (__fds, 2 > 1)) / (sizeof (*__fds)))) ? __ppoll_alias (__fds, __nfds, __timeout, __ss) : ((((__typeof (__nfds)) 0 < (__typeof (__nfds)) -1 || (__builtin_constant_p (__nfds) && (__nfds) > 0)) && __builtin_constant_p ((((long unsigned int) (__nfds)) <= (__builtin_object_size (__fds, 2 > 1)) / (sizeof (*__fds)))) && !(((long unsigned int) (__nfds)) <= (__builtin_object_size (__fds, 2 > 1)) / (sizeof (*__fds)))) ? __ppoll_chk_warn (__fds, __nfds, __timeout, __ss, __builtin_object_size (__fds, 2 > 1)) : __ppoll_chk (__fds, __nfds, __timeout, __ss, __builtin_object_size (__fds, 2 > 1))))

                                    ;
}



# 88 "/usr/include/aarch64-linux-gnu/sys/poll.h" 2 3 4
# 2 "/usr/include/poll.h" 2 3 4
# 186 "stress-ng.h" 2



# 1 "/usr/include/pthread.h" 1 3 4
# 28 "/usr/include/pthread.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/wordsize.h" 1 3 4
# 29 "/usr/include/pthread.h" 2 3 4
# 37 "/usr/include/pthread.h" 3 4
enum
{
  PTHREAD_CREATE_JOINABLE,

  PTHREAD_CREATE_DETACHED

};



enum
{
  PTHREAD_MUTEX_TIMED_NP,
  PTHREAD_MUTEX_RECURSIVE_NP,
  PTHREAD_MUTEX_ERRORCHECK_NP,
  PTHREAD_MUTEX_ADAPTIVE_NP

  ,
  PTHREAD_MUTEX_NORMAL = PTHREAD_MUTEX_TIMED_NP,
  PTHREAD_MUTEX_RECURSIVE = PTHREAD_MUTEX_RECURSIVE_NP,
  PTHREAD_MUTEX_ERRORCHECK = PTHREAD_MUTEX_ERRORCHECK_NP,
  PTHREAD_MUTEX_DEFAULT = PTHREAD_MUTEX_NORMAL



  , PTHREAD_MUTEX_FAST_NP = PTHREAD_MUTEX_TIMED_NP

};




enum
{
  PTHREAD_MUTEX_STALLED,
  PTHREAD_MUTEX_STALLED_NP = PTHREAD_MUTEX_STALLED,
  PTHREAD_MUTEX_ROBUST,
  PTHREAD_MUTEX_ROBUST_NP = PTHREAD_MUTEX_ROBUST
};





enum
{
  PTHREAD_PRIO_NONE,
  PTHREAD_PRIO_INHERIT,
  PTHREAD_PRIO_PROTECT
};
# 104 "/usr/include/pthread.h" 3 4
enum
{
  PTHREAD_RWLOCK_PREFER_READER_NP,
  PTHREAD_RWLOCK_PREFER_WRITER_NP,
  PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP,
  PTHREAD_RWLOCK_DEFAULT_NP = PTHREAD_RWLOCK_PREFER_READER_NP
};
# 124 "/usr/include/pthread.h" 3 4
enum
{
  PTHREAD_INHERIT_SCHED,

  PTHREAD_EXPLICIT_SCHED

};



enum
{
  PTHREAD_SCOPE_SYSTEM,

  PTHREAD_SCOPE_PROCESS

};



enum
{
  PTHREAD_PROCESS_PRIVATE,

  PTHREAD_PROCESS_SHARED

};
# 159 "/usr/include/pthread.h" 3 4
struct _pthread_cleanup_buffer
{
  void (*__routine) (void *);
  void *__arg;
  int __canceltype;
  struct _pthread_cleanup_buffer *__prev;
};


enum
{
  PTHREAD_CANCEL_ENABLE,

  PTHREAD_CANCEL_DISABLE

};
enum
{
  PTHREAD_CANCEL_DEFERRED,

  PTHREAD_CANCEL_ASYNCHRONOUS

};
# 197 "/usr/include/pthread.h" 3 4





extern int pthread_create (pthread_t *__restrict __newthread,
      const pthread_attr_t *__restrict __attr,
      void *(*__start_routine) (void *),
      void *__restrict __arg) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 3)));





extern void pthread_exit (void *__retval) __attribute__ ((__noreturn__));







extern int pthread_join (pthread_t __th, void **__thread_return);




extern int pthread_tryjoin_np (pthread_t __th, void **__thread_return) __attribute__ ((__nothrow__ , __leaf__));
# 233 "/usr/include/pthread.h" 3 4
extern int pthread_timedjoin_np (pthread_t __th, void **__thread_return,
     const struct timespec *__abstime);
# 243 "/usr/include/pthread.h" 3 4
extern int pthread_clockjoin_np (pthread_t __th, void **__thread_return,
                                 clockid_t __clockid,
     const struct timespec *__abstime);
# 269 "/usr/include/pthread.h" 3 4
extern int pthread_detach (pthread_t __th) __attribute__ ((__nothrow__ , __leaf__));



extern pthread_t pthread_self (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern int pthread_equal (pthread_t __thread1, pthread_t __thread2)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));







extern int pthread_attr_init (pthread_attr_t *__attr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_destroy (pthread_attr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getdetachstate (const pthread_attr_t *__attr,
     int *__detachstate)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setdetachstate (pthread_attr_t *__attr,
     int __detachstate)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getguardsize (const pthread_attr_t *__attr,
          size_t *__guardsize)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setguardsize (pthread_attr_t *__attr,
          size_t __guardsize)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getschedparam (const pthread_attr_t *__restrict __attr,
           struct sched_param *__restrict __param)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setschedparam (pthread_attr_t *__restrict __attr,
           const struct sched_param *__restrict
           __param) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_getschedpolicy (const pthread_attr_t *__restrict
     __attr, int *__restrict __policy)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setschedpolicy (pthread_attr_t *__attr, int __policy)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getinheritsched (const pthread_attr_t *__restrict
      __attr, int *__restrict __inherit)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setinheritsched (pthread_attr_t *__attr,
      int __inherit)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getscope (const pthread_attr_t *__restrict __attr,
      int *__restrict __scope)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setscope (pthread_attr_t *__attr, int __scope)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getstackaddr (const pthread_attr_t *__restrict
          __attr, void **__restrict __stackaddr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__deprecated__));





extern int pthread_attr_setstackaddr (pthread_attr_t *__attr,
          void *__stackaddr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__));


extern int pthread_attr_getstacksize (const pthread_attr_t *__restrict
          __attr, size_t *__restrict __stacksize)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern int pthread_attr_setstacksize (pthread_attr_t *__attr,
          size_t __stacksize)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getstack (const pthread_attr_t *__restrict __attr,
      void **__restrict __stackaddr,
      size_t *__restrict __stacksize)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2, 3)));




extern int pthread_attr_setstack (pthread_attr_t *__attr, void *__stackaddr,
      size_t __stacksize) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int pthread_attr_setaffinity_np (pthread_attr_t *__attr,
     size_t __cpusetsize,
     const cpu_set_t *__cpuset)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3)));



extern int pthread_attr_getaffinity_np (const pthread_attr_t *__attr,
     size_t __cpusetsize,
     cpu_set_t *__cpuset)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3)));


extern int pthread_getattr_default_np (pthread_attr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_setsigmask_np (pthread_attr_t *__attr,
           const __sigset_t *sigmask);




extern int pthread_attr_getsigmask_np (const pthread_attr_t *__attr,
           __sigset_t *sigmask);







extern int pthread_setattr_default_np (const pthread_attr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));




extern int pthread_getattr_np (pthread_t __th, pthread_attr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));







extern int pthread_setschedparam (pthread_t __target_thread, int __policy,
      const struct sched_param *__param)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3)));


extern int pthread_getschedparam (pthread_t __target_thread,
      int *__restrict __policy,
      struct sched_param *__restrict __param)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));


extern int pthread_setschedprio (pthread_t __target_thread, int __prio)
     __attribute__ ((__nothrow__ , __leaf__));




extern int pthread_getname_np (pthread_t __target_thread, char *__buf,
          size_t __buflen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));


extern int pthread_setname_np (pthread_t __target_thread, const char *__name)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));





extern int pthread_getconcurrency (void) __attribute__ ((__nothrow__ , __leaf__));


extern int pthread_setconcurrency (int __level) __attribute__ ((__nothrow__ , __leaf__));



extern int pthread_yield (void) __attribute__ ((__nothrow__ , __leaf__));

extern int pthread_yield (void) __asm__ ("" "sched_yield") __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__deprecated__ ("pthread_yield is deprecated, use sched_yield instead")))
                                                      ;







extern int pthread_setaffinity_np (pthread_t __th, size_t __cpusetsize,
       const cpu_set_t *__cpuset)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3)));


extern int pthread_getaffinity_np (pthread_t __th, size_t __cpusetsize,
       cpu_set_t *__cpuset)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3)));
# 509 "/usr/include/pthread.h" 3 4
extern int pthread_once (pthread_once_t *__once_control,
    void (*__init_routine) (void)) __attribute__ ((__nonnull__ (1, 2)));
# 521 "/usr/include/pthread.h" 3 4
extern int pthread_setcancelstate (int __state, int *__oldstate);



extern int pthread_setcanceltype (int __type, int *__oldtype);


extern int pthread_cancel (pthread_t __th);




extern void pthread_testcancel (void);




struct __cancel_jmp_buf_tag
{
  __jmp_buf __cancel_jmp_buf;
  int __mask_was_saved;
};

typedef struct
{
  struct __cancel_jmp_buf_tag __cancel_jmp_buf[1];
  void *__pad[4];
} __pthread_unwind_buf_t __attribute__ ((__aligned__));
# 557 "/usr/include/pthread.h" 3 4
struct __pthread_cleanup_frame
{
  void (*__cancel_routine) (void *);
  void *__cancel_arg;
  int __do_it;
  int __cancel_type;
};
# 697 "/usr/include/pthread.h" 3 4
extern void __pthread_register_cancel (__pthread_unwind_buf_t *__buf)
     ;
# 709 "/usr/include/pthread.h" 3 4
extern void __pthread_unregister_cancel (__pthread_unwind_buf_t *__buf)
  ;
# 732 "/usr/include/pthread.h" 3 4
extern void __pthread_register_cancel_defer (__pthread_unwind_buf_t *__buf)
     ;
# 745 "/usr/include/pthread.h" 3 4
extern void __pthread_unregister_cancel_restore (__pthread_unwind_buf_t *__buf)
  ;



extern void __pthread_unwind_next (__pthread_unwind_buf_t *__buf)
     __attribute__ ((__noreturn__))

     __attribute__ ((__weak__))

     ;
# 766 "/usr/include/pthread.h" 3 4
extern int __sigsetjmp_cancel (struct __cancel_jmp_buf_tag __env[1], int __savemask) __asm__ ("" "__sigsetjmp") __attribute__ ((__nothrow__))


                     __attribute__ ((__returns_twice__));
# 781 "/usr/include/pthread.h" 3 4
extern int pthread_mutex_init (pthread_mutex_t *__mutex,
          const pthread_mutexattr_t *__mutexattr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_destroy (pthread_mutex_t *__mutex)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_trylock (pthread_mutex_t *__mutex)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_lock (pthread_mutex_t *__mutex)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));




extern int pthread_mutex_timedlock (pthread_mutex_t *__restrict __mutex,
        const struct timespec *__restrict
        __abstime) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));
# 817 "/usr/include/pthread.h" 3 4
extern int pthread_mutex_clocklock (pthread_mutex_t *__restrict __mutex,
        clockid_t __clockid,
        const struct timespec *__restrict
        __abstime) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 3)));
# 835 "/usr/include/pthread.h" 3 4
extern int pthread_mutex_unlock (pthread_mutex_t *__mutex)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_mutex_getprioceiling (const pthread_mutex_t *
      __restrict __mutex,
      int *__restrict __prioceiling)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutex_setprioceiling (pthread_mutex_t *__restrict __mutex,
      int __prioceiling,
      int *__restrict __old_ceiling)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3)));




extern int pthread_mutex_consistent (pthread_mutex_t *__mutex)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_consistent_np (pthread_mutex_t *) __asm__ ("" "pthread_mutex_consistent") __attribute__ ((__nothrow__ , __leaf__))
                                __attribute__ ((__nonnull__ (1)))
  __attribute__ ((__deprecated__ ("pthread_mutex_consistent_np is deprecated, use pthread_mutex_consistent")))
                                                                         ;
# 874 "/usr/include/pthread.h" 3 4
extern int pthread_mutexattr_init (pthread_mutexattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_destroy (pthread_mutexattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_getpshared (const pthread_mutexattr_t *
      __restrict __attr,
      int *__restrict __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_mutexattr_setpshared (pthread_mutexattr_t *__attr,
      int __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_gettype (const pthread_mutexattr_t *__restrict
          __attr, int *__restrict __kind)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern int pthread_mutexattr_settype (pthread_mutexattr_t *__attr, int __kind)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_getprotocol (const pthread_mutexattr_t *
       __restrict __attr,
       int *__restrict __protocol)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutexattr_setprotocol (pthread_mutexattr_t *__attr,
       int __protocol)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_getprioceiling (const pthread_mutexattr_t *
          __restrict __attr,
          int *__restrict __prioceiling)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_mutexattr_setprioceiling (pthread_mutexattr_t *__attr,
          int __prioceiling)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_getrobust (const pthread_mutexattr_t *__attr,
     int *__robustness)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_mutexattr_getrobust_np (pthread_mutexattr_t *, int *) __asm__ ("" "pthread_mutexattr_getrobust") __attribute__ ((__nothrow__ , __leaf__))

                                   __attribute__ ((__nonnull__ (1)))
  __attribute__ ((__deprecated__ ("pthread_mutexattr_getrobust_np is deprecated, use pthread_mutexattr_getrobust")))
                                                                               ;






extern int pthread_mutexattr_setrobust (pthread_mutexattr_t *__attr,
     int __robustness)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_setrobust_np (pthread_mutexattr_t *, int) __asm__ ("" "pthread_mutexattr_setrobust") __attribute__ ((__nothrow__ , __leaf__))

                                   __attribute__ ((__nonnull__ (1)))
  __attribute__ ((__deprecated__ ("pthread_mutexattr_setrobust_np is deprecated, use pthread_mutexattr_setrobust")))
                                                                               ;
# 967 "/usr/include/pthread.h" 3 4
extern int pthread_rwlock_init (pthread_rwlock_t *__restrict __rwlock,
    const pthread_rwlockattr_t *__restrict
    __attr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_destroy (pthread_rwlock_t *__rwlock)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_rdlock (pthread_rwlock_t *__rwlock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_tryrdlock (pthread_rwlock_t *__rwlock)
  __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));




extern int pthread_rwlock_timedrdlock (pthread_rwlock_t *__restrict __rwlock,
           const struct timespec *__restrict
           __abstime) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));
# 1004 "/usr/include/pthread.h" 3 4
extern int pthread_rwlock_clockrdlock (pthread_rwlock_t *__restrict __rwlock,
           clockid_t __clockid,
           const struct timespec *__restrict
           __abstime) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 3)));
# 1023 "/usr/include/pthread.h" 3 4
extern int pthread_rwlock_wrlock (pthread_rwlock_t *__rwlock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_trywrlock (pthread_rwlock_t *__rwlock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));




extern int pthread_rwlock_timedwrlock (pthread_rwlock_t *__restrict __rwlock,
           const struct timespec *__restrict
           __abstime) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));
# 1051 "/usr/include/pthread.h" 3 4
extern int pthread_rwlock_clockwrlock (pthread_rwlock_t *__restrict __rwlock,
           clockid_t __clockid,
           const struct timespec *__restrict
           __abstime) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 3)));
# 1071 "/usr/include/pthread.h" 3 4
extern int pthread_rwlock_unlock (pthread_rwlock_t *__rwlock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));





extern int pthread_rwlockattr_init (pthread_rwlockattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_destroy (pthread_rwlockattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_getpshared (const pthread_rwlockattr_t *
       __restrict __attr,
       int *__restrict __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_rwlockattr_setpshared (pthread_rwlockattr_t *__attr,
       int __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_getkind_np (const pthread_rwlockattr_t *
       __restrict __attr,
       int *__restrict __pref)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_rwlockattr_setkind_np (pthread_rwlockattr_t *__attr,
       int __pref) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));







extern int pthread_cond_init (pthread_cond_t *__restrict __cond,
         const pthread_condattr_t *__restrict __cond_attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_destroy (pthread_cond_t *__cond)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_signal (pthread_cond_t *__cond)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_broadcast (pthread_cond_t *__cond)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));






extern int pthread_cond_wait (pthread_cond_t *__restrict __cond,
         pthread_mutex_t *__restrict __mutex)
     __attribute__ ((__nonnull__ (1, 2)));
# 1145 "/usr/include/pthread.h" 3 4
extern int pthread_cond_timedwait (pthread_cond_t *__restrict __cond,
       pthread_mutex_t *__restrict __mutex,
       const struct timespec *__restrict __abstime)
     __attribute__ ((__nonnull__ (1, 2, 3)));
# 1171 "/usr/include/pthread.h" 3 4
extern int pthread_cond_clockwait (pthread_cond_t *__restrict __cond,
       pthread_mutex_t *__restrict __mutex,
       __clockid_t __clock_id,
       const struct timespec *__restrict __abstime)
     __attribute__ ((__nonnull__ (1, 2, 4)));
# 1194 "/usr/include/pthread.h" 3 4
extern int pthread_condattr_init (pthread_condattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_condattr_destroy (pthread_condattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_condattr_getpshared (const pthread_condattr_t *
     __restrict __attr,
     int *__restrict __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_condattr_setpshared (pthread_condattr_t *__attr,
     int __pshared) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_condattr_getclock (const pthread_condattr_t *
          __restrict __attr,
          __clockid_t *__restrict __clock_id)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_condattr_setclock (pthread_condattr_t *__attr,
          __clockid_t __clock_id)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 1230 "/usr/include/pthread.h" 3 4
extern int pthread_spin_init (pthread_spinlock_t *__lock, int __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_destroy (pthread_spinlock_t *__lock)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_lock (pthread_spinlock_t *__lock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_trylock (pthread_spinlock_t *__lock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_unlock (pthread_spinlock_t *__lock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));






extern int pthread_barrier_init (pthread_barrier_t *__restrict __barrier,
     const pthread_barrierattr_t *__restrict
     __attr, unsigned int __count)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_barrier_destroy (pthread_barrier_t *__barrier)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_barrier_wait (pthread_barrier_t *__barrier)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_barrierattr_init (pthread_barrierattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_barrierattr_destroy (pthread_barrierattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_barrierattr_getpshared (const pthread_barrierattr_t *
        __restrict __attr,
        int *__restrict __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_barrierattr_setpshared (pthread_barrierattr_t *__attr,
        int __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 1297 "/usr/include/pthread.h" 3 4
extern int pthread_key_create (pthread_key_t *__key,
          void (*__destr_function) (void *))
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_key_delete (pthread_key_t __key) __attribute__ ((__nothrow__ , __leaf__));


extern void *pthread_getspecific (pthread_key_t __key) __attribute__ ((__nothrow__ , __leaf__));


extern int pthread_setspecific (pthread_key_t __key,
    const void *__pointer)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__access__ (__none__, 2)));




extern int pthread_getcpuclockid (pthread_t __thread_id,
      __clockid_t *__clock_id)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));
# 1332 "/usr/include/pthread.h" 3 4
extern int pthread_atfork (void (*__prepare) (void),
      void (*__parent) (void),
      void (*__child) (void)) __attribute__ ((__nothrow__ , __leaf__));




extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__nothrow__ , __leaf__)) pthread_equal (pthread_t __thread1, pthread_t __thread2)
{
  return __thread1 == __thread2;
}



# 190 "stress-ng.h" 2



# 1 "/usr/include/semaphore.h" 1 3 4
# 28 "/usr/include/semaphore.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/semaphore.h" 1 3 4
# 35 "/usr/include/aarch64-linux-gnu/bits/semaphore.h" 3 4
typedef union
{
  char __size[32];
  long long int __align;
} sem_t;
# 29 "/usr/include/semaphore.h" 2 3 4






extern int sem_init (sem_t *__sem, int __pshared, unsigned int __value)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int sem_destroy (sem_t *__sem) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern sem_t *sem_open (const char *__name, int __oflag, ...)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int sem_close (sem_t *__sem) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int sem_unlink (const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int sem_wait (sem_t *__sem) __attribute__ ((__nonnull__ (1)));







extern int sem_timedwait (sem_t *__restrict __sem,
     const struct timespec *__restrict __abstime)
  __attribute__ ((__nonnull__ (1, 2)));
# 81 "/usr/include/semaphore.h" 3 4
extern int sem_clockwait (sem_t *__restrict __sem,
     clockid_t clock,
     const struct timespec *__restrict __abstime)
  __attribute__ ((__nonnull__ (1, 3)));
# 100 "/usr/include/semaphore.h" 3 4
extern int sem_trywait (sem_t *__sem) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int sem_post (sem_t *__sem) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int sem_getvalue (sem_t *__restrict __sem, int *__restrict __sval)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



# 194 "stress-ng.h" 2



# 1 "/usr/include/sound/asound.h" 1 3 4
# 29 "/usr/include/sound/asound.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/asm/byteorder.h" 1 3 4
# 23 "/usr/include/aarch64-linux-gnu/asm/byteorder.h" 3 4
# 1 "/usr/include/linux/byteorder/little_endian.h" 1 3 4
# 14 "/usr/include/linux/byteorder/little_endian.h" 3 4
# 1 "/usr/include/linux/swab.h" 1 3 4







# 1 "/usr/include/aarch64-linux-gnu/asm/swab.h" 1 3 4
# 1 "/usr/include/asm-generic/swab.h" 1 3 4
# 2 "/usr/include/aarch64-linux-gnu/asm/swab.h" 2 3 4
# 9 "/usr/include/linux/swab.h" 2 3 4
# 48 "/usr/include/linux/swab.h" 3 4
static __inline__ __u16 __fswab16(__u16 val)
{



 return ((__u16)( (((__u16)(val) & (__u16)0x00ffU) << 8) | (((__u16)(val) & (__u16)0xff00U) >> 8)));

}

static __inline__ __u32 __fswab32(__u32 val)
{



 return ((__u32)( (((__u32)(val) & (__u32)0x000000ffUL) << 24) | (((__u32)(val) & (__u32)0x0000ff00UL) << 8) | (((__u32)(val) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(val) & (__u32)0xff000000UL) >> 24)));

}

static __inline__ __u64 __fswab64(__u64 val)
{







 return ((__u64)( (((__u64)(val) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(val) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(val) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(val) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(val) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(val) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(val) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(val) & (__u64)0xff00000000000000ULL) >> 56)));

}

static __inline__ __u32 __fswahw32(__u32 val)
{



 return ((__u32)( (((__u32)(val) & (__u32)0x0000ffffUL) << 16) | (((__u32)(val) & (__u32)0xffff0000UL) >> 16)));

}

static __inline__ __u32 __fswahb32(__u32 val)
{



 return ((__u32)( (((__u32)(val) & (__u32)0x00ff00ffUL) << 8) | (((__u32)(val) & (__u32)0xff00ff00UL) >> 8)));

}
# 136 "/usr/include/linux/swab.h" 3 4
static __inline __attribute__ ((__always_inline__)) unsigned long __swab(const unsigned long y)
{

 return (__builtin_constant_p((__u64)(y)) ? ((__u64)( (((__u64)(y) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(y) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(y) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(y) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(y) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(y) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(y) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(y) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(y));



}
# 171 "/usr/include/linux/swab.h" 3 4
static __inline __attribute__ ((__always_inline__)) __u16 __swab16p(const __u16 *p)
{



 return (__builtin_constant_p((__u16)(*p)) ? ((__u16)( (((__u16)(*p) & (__u16)0x00ffU) << 8) | (((__u16)(*p) & (__u16)0xff00U) >> 8))) : __fswab16(*p));

}





static __inline __attribute__ ((__always_inline__)) __u32 __swab32p(const __u32 *p)
{



 return (__builtin_constant_p((__u32)(*p)) ? ((__u32)( (((__u32)(*p) & (__u32)0x000000ffUL) << 24) | (((__u32)(*p) & (__u32)0x0000ff00UL) << 8) | (((__u32)(*p) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(*p) & (__u32)0xff000000UL) >> 24))) : __fswab32(*p));

}





static __inline __attribute__ ((__always_inline__)) __u64 __swab64p(const __u64 *p)
{



 return (__builtin_constant_p((__u64)(*p)) ? ((__u64)( (((__u64)(*p) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(*p) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(*p) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(*p) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(*p) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(*p) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(*p) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(*p) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(*p));

}







static __inline__ __u32 __swahw32p(const __u32 *p)
{



 return (__builtin_constant_p((__u32)(*p)) ? ((__u32)( (((__u32)(*p) & (__u32)0x0000ffffUL) << 16) | (((__u32)(*p) & (__u32)0xffff0000UL) >> 16))) : __fswahw32(*p));

}







static __inline__ __u32 __swahb32p(const __u32 *p)
{



 return (__builtin_constant_p((__u32)(*p)) ? ((__u32)( (((__u32)(*p) & (__u32)0x00ff00ffUL) << 8) | (((__u32)(*p) & (__u32)0xff00ff00UL) >> 8))) : __fswahb32(*p));

}





static __inline__ void __swab16s(__u16 *p)
{



 *p = __swab16p(p);

}




static __inline __attribute__ ((__always_inline__)) void __swab32s(__u32 *p)
{



 *p = __swab32p(p);

}





static __inline __attribute__ ((__always_inline__)) void __swab64s(__u64 *p)
{



 *p = __swab64p(p);

}







static __inline__ void __swahw32s(__u32 *p)
{



 *p = __swahw32p(p);

}







static __inline__ void __swahb32s(__u32 *p)
{



 *p = __swahb32p(p);

}
# 15 "/usr/include/linux/byteorder/little_endian.h" 2 3 4
# 45 "/usr/include/linux/byteorder/little_endian.h" 3 4
static __inline __attribute__ ((__always_inline__)) __le64 __cpu_to_le64p(const __u64 *p)
{
 return (__le64)*p;
}
static __inline __attribute__ ((__always_inline__)) __u64 __le64_to_cpup(const __le64 *p)
{
 return (__u64)*p;
}
static __inline __attribute__ ((__always_inline__)) __le32 __cpu_to_le32p(const __u32 *p)
{
 return (__le32)*p;
}
static __inline __attribute__ ((__always_inline__)) __u32 __le32_to_cpup(const __le32 *p)
{
 return (__u32)*p;
}
static __inline __attribute__ ((__always_inline__)) __le16 __cpu_to_le16p(const __u16 *p)
{
 return (__le16)*p;
}
static __inline __attribute__ ((__always_inline__)) __u16 __le16_to_cpup(const __le16 *p)
{
 return (__u16)*p;
}
static __inline __attribute__ ((__always_inline__)) __be64 __cpu_to_be64p(const __u64 *p)
{
 return (__be64)__swab64p(p);
}
static __inline __attribute__ ((__always_inline__)) __u64 __be64_to_cpup(const __be64 *p)
{
 return __swab64p((__u64 *)p);
}
static __inline __attribute__ ((__always_inline__)) __be32 __cpu_to_be32p(const __u32 *p)
{
 return (__be32)__swab32p(p);
}
static __inline __attribute__ ((__always_inline__)) __u32 __be32_to_cpup(const __be32 *p)
{
 return __swab32p((__u32 *)p);
}
static __inline __attribute__ ((__always_inline__)) __be16 __cpu_to_be16p(const __u16 *p)
{
 return (__be16)__swab16p(p);
}
static __inline __attribute__ ((__always_inline__)) __u16 __be16_to_cpup(const __be16 *p)
{
 return __swab16p((__u16 *)p);
}
# 24 "/usr/include/aarch64-linux-gnu/asm/byteorder.h" 2 3 4
# 30 "/usr/include/sound/asound.h" 2 3 4
# 59 "/usr/include/sound/asound.h" 3 4
struct snd_aes_iec958 {
 unsigned char status[24];
 unsigned char subcode[147];
 unsigned char pad;
 unsigned char dig_subframe[4];
};







struct snd_cea_861_aud_if {
 unsigned char db1_ct_cc;
 unsigned char db2_sf_ss;
 unsigned char db3;
 unsigned char db4_ca;
 unsigned char db5_dminh_lsv;
};
# 88 "/usr/include/sound/asound.h" 3 4
enum {
 SNDRV_HWDEP_IFACE_OPL2 = 0,
 SNDRV_HWDEP_IFACE_OPL3,
 SNDRV_HWDEP_IFACE_OPL4,
 SNDRV_HWDEP_IFACE_SB16CSP,
 SNDRV_HWDEP_IFACE_EMU10K1,
 SNDRV_HWDEP_IFACE_YSS225,
 SNDRV_HWDEP_IFACE_ICS2115,
 SNDRV_HWDEP_IFACE_SSCAPE,
 SNDRV_HWDEP_IFACE_VX,
 SNDRV_HWDEP_IFACE_MIXART,
 SNDRV_HWDEP_IFACE_USX2Y,
 SNDRV_HWDEP_IFACE_EMUX_WAVETABLE,
 SNDRV_HWDEP_IFACE_BLUETOOTH,
 SNDRV_HWDEP_IFACE_USX2Y_PCM,
 SNDRV_HWDEP_IFACE_PCXHR,
 SNDRV_HWDEP_IFACE_SB_RC,
 SNDRV_HWDEP_IFACE_HDA,
 SNDRV_HWDEP_IFACE_USB_STREAM,
 SNDRV_HWDEP_IFACE_FW_DICE,
 SNDRV_HWDEP_IFACE_FW_FIREWORKS,
 SNDRV_HWDEP_IFACE_FW_BEBOB,
 SNDRV_HWDEP_IFACE_FW_OXFW,
 SNDRV_HWDEP_IFACE_FW_DIGI00X,
 SNDRV_HWDEP_IFACE_FW_TASCAM,
 SNDRV_HWDEP_IFACE_LINE6,
 SNDRV_HWDEP_IFACE_FW_MOTU,
 SNDRV_HWDEP_IFACE_FW_FIREFACE,


 SNDRV_HWDEP_IFACE_LAST = SNDRV_HWDEP_IFACE_FW_FIREFACE
};

struct snd_hwdep_info {
 unsigned int device;
 int card;
 unsigned char id[64];
 unsigned char name[80];
 int iface;
 unsigned char reserved[64];
};


struct snd_hwdep_dsp_status {
 unsigned int version;
 unsigned char id[32];
 unsigned int num_dsps;
 unsigned int dsp_loaded;
 unsigned int chip_ready;
 unsigned char reserved[16];
};

struct snd_hwdep_dsp_image {
 unsigned int index;
 unsigned char name[64];
 unsigned char *image;
 size_t length;
 unsigned long driver_data;
};
# 161 "/usr/include/sound/asound.h" 3 4
typedef unsigned long snd_pcm_uframes_t;
typedef signed long snd_pcm_sframes_t;

enum {
 SNDRV_PCM_CLASS_GENERIC = 0,
 SNDRV_PCM_CLASS_MULTI,
 SNDRV_PCM_CLASS_MODEM,
 SNDRV_PCM_CLASS_DIGITIZER,

 SNDRV_PCM_CLASS_LAST = SNDRV_PCM_CLASS_DIGITIZER,
};

enum {
 SNDRV_PCM_SUBCLASS_GENERIC_MIX = 0,
 SNDRV_PCM_SUBCLASS_MULTI_MIX,

 SNDRV_PCM_SUBCLASS_LAST = SNDRV_PCM_SUBCLASS_MULTI_MIX,
};

enum {
 SNDRV_PCM_STREAM_PLAYBACK = 0,
 SNDRV_PCM_STREAM_CAPTURE,
 SNDRV_PCM_STREAM_LAST = SNDRV_PCM_STREAM_CAPTURE,
};

typedef int snd_pcm_access_t;







typedef int snd_pcm_format_t;
# 277 "/usr/include/sound/asound.h" 3 4
typedef int snd_pcm_subformat_t;
# 311 "/usr/include/sound/asound.h" 3 4
typedef int snd_pcm_state_t;
# 323 "/usr/include/sound/asound.h" 3 4
enum {
 SNDRV_PCM_MMAP_OFFSET_DATA = 0x00000000,
 SNDRV_PCM_MMAP_OFFSET_STATUS_OLD = 0x80000000,
 SNDRV_PCM_MMAP_OFFSET_CONTROL_OLD = 0x81000000,
 SNDRV_PCM_MMAP_OFFSET_STATUS_NEW = 0x82000000,
 SNDRV_PCM_MMAP_OFFSET_CONTROL_NEW = 0x83000000,




 SNDRV_PCM_MMAP_OFFSET_STATUS = SNDRV_PCM_MMAP_OFFSET_STATUS_OLD,
 SNDRV_PCM_MMAP_OFFSET_CONTROL = SNDRV_PCM_MMAP_OFFSET_CONTROL_OLD,

};

union snd_pcm_sync_id {
 unsigned char id[16];
 unsigned short id16[8];
 unsigned int id32[4];
};

struct snd_pcm_info {
 unsigned int device;
 unsigned int subdevice;
 int stream;
 int card;
 unsigned char id[64];
 unsigned char name[80];
 unsigned char subname[32];
 int dev_class;
 int dev_subclass;
 unsigned int subdevices_count;
 unsigned int subdevices_avail;
 union snd_pcm_sync_id sync;
 unsigned char reserved[64];
};

typedef int snd_pcm_hw_param_t;
# 396 "/usr/include/sound/asound.h" 3 4
struct snd_interval {
 unsigned int min, max;
 unsigned int openmin:1,
       openmax:1,
       integer:1,
       empty:1;
};



struct snd_mask {
 __u32 bits[(256 +31)/32];
};

struct snd_pcm_hw_params {
 unsigned int flags;
 struct snd_mask masks[2 -
          0 + 1];
 struct snd_mask mres[5];
 struct snd_interval intervals[19 -
            8 + 1];
 struct snd_interval ires[9];
 unsigned int rmask;
 unsigned int cmask;
 unsigned int info;
 unsigned int msbits;
 unsigned int rate_num;
 unsigned int rate_den;
 snd_pcm_uframes_t fifo_size;
 unsigned char reserved[64];
};

enum {
 SNDRV_PCM_TSTAMP_NONE = 0,
 SNDRV_PCM_TSTAMP_ENABLE,
 SNDRV_PCM_TSTAMP_LAST = SNDRV_PCM_TSTAMP_ENABLE,
};

struct snd_pcm_sw_params {
 int tstamp_mode;
 unsigned int period_step;
 unsigned int sleep_min;
 snd_pcm_uframes_t avail_min;
 snd_pcm_uframes_t xfer_align;
 snd_pcm_uframes_t start_threshold;
 snd_pcm_uframes_t stop_threshold;
 snd_pcm_uframes_t silence_threshold;
 snd_pcm_uframes_t silence_size;
 snd_pcm_uframes_t boundary;
 unsigned int proto;
 unsigned int tstamp_type;
 unsigned char reserved[56];
};

struct snd_pcm_channel_info {
 unsigned int channel;
 __kernel_off_t offset;
 unsigned int first;
 unsigned int step;
};

enum {




 SNDRV_PCM_AUDIO_TSTAMP_TYPE_COMPAT = 0,


 SNDRV_PCM_AUDIO_TSTAMP_TYPE_DEFAULT = 1,
 SNDRV_PCM_AUDIO_TSTAMP_TYPE_LINK = 2,
 SNDRV_PCM_AUDIO_TSTAMP_TYPE_LINK_ABSOLUTE = 3,
 SNDRV_PCM_AUDIO_TSTAMP_TYPE_LINK_ESTIMATED = 4,
 SNDRV_PCM_AUDIO_TSTAMP_TYPE_LINK_SYNCHRONIZED = 5,
 SNDRV_PCM_AUDIO_TSTAMP_TYPE_LAST = SNDRV_PCM_AUDIO_TSTAMP_TYPE_LINK_SYNCHRONIZED
};


typedef struct { unsigned char pad[sizeof(time_t) - sizeof(int)]; } __time_pad;

struct snd_pcm_status {
 snd_pcm_state_t state;
 __time_pad pad1;
 struct timespec trigger_tstamp;
 struct timespec tstamp;
 snd_pcm_uframes_t appl_ptr;
 snd_pcm_uframes_t hw_ptr;
 snd_pcm_sframes_t delay;
 snd_pcm_uframes_t avail;
 snd_pcm_uframes_t avail_max;
 snd_pcm_uframes_t overrange;
 snd_pcm_state_t suspended_state;
 __u32 audio_tstamp_data;
 struct timespec audio_tstamp;
 struct timespec driver_tstamp;
 __u32 audio_tstamp_accuracy;
 unsigned char reserved[52-2*sizeof(struct timespec)];
};
# 514 "/usr/include/sound/asound.h" 3 4
struct __snd_timespec64 {
 __s64 tv_sec;
 __s64 tv_nsec;
};



struct snd_pcm_mmap_status {
 snd_pcm_state_t state;
 int pad1;
 snd_pcm_uframes_t hw_ptr;
 struct timespec tstamp;
 snd_pcm_state_t suspended_state;
 struct timespec audio_tstamp;
};

struct snd_pcm_mmap_control {
 snd_pcm_uframes_t appl_ptr;
 snd_pcm_uframes_t avail_min;
};





struct snd_pcm_sync_ptr {
 unsigned int flags;
 union {
  struct snd_pcm_mmap_status status;
  unsigned char reserved[64];
 } s;
 union {
  struct snd_pcm_mmap_control control;
  unsigned char reserved[64];
 } c;
};







typedef char __pad_before_uframe[0];
typedef char __pad_after_uframe[sizeof(__u64) - sizeof(snd_pcm_uframes_t)];


struct __snd_pcm_mmap_status64 {
 snd_pcm_state_t state;
 __u32 pad1;
 __pad_before_uframe __pad1;
 snd_pcm_uframes_t hw_ptr;
 __pad_after_uframe __pad2;
 struct __snd_timespec64 tstamp;
 snd_pcm_state_t suspended_state;
 __u32 pad3;
 struct __snd_timespec64 audio_tstamp;
};

struct __snd_pcm_mmap_control64 {
 __pad_before_uframe __pad1;
 snd_pcm_uframes_t appl_ptr;
 __pad_before_uframe __pad2;

 __pad_before_uframe __pad3;
 snd_pcm_uframes_t avail_min;
 __pad_after_uframe __pad4;
};

struct __snd_pcm_sync_ptr64 {
 __u32 flags;
 __u32 pad1;
 union {
  struct __snd_pcm_mmap_status64 status;
  unsigned char reserved[64];
 } s;
 union {
  struct __snd_pcm_mmap_control64 control;
  unsigned char reserved[64];
 } c;
};

struct snd_xferi {
 snd_pcm_sframes_t result;
 void *buf;
 snd_pcm_uframes_t frames;
};

struct snd_xfern {
 snd_pcm_sframes_t result;
 void * *bufs;
 snd_pcm_uframes_t frames;
};

enum {
 SNDRV_PCM_TSTAMP_TYPE_GETTIMEOFDAY = 0,
 SNDRV_PCM_TSTAMP_TYPE_MONOTONIC,
 SNDRV_PCM_TSTAMP_TYPE_MONOTONIC_RAW,
 SNDRV_PCM_TSTAMP_TYPE_LAST = SNDRV_PCM_TSTAMP_TYPE_MONOTONIC_RAW,
};


enum {
 SNDRV_CHMAP_UNKNOWN = 0,
 SNDRV_CHMAP_NA,
 SNDRV_CHMAP_MONO,

 SNDRV_CHMAP_FL,
 SNDRV_CHMAP_FR,
 SNDRV_CHMAP_RL,
 SNDRV_CHMAP_RR,
 SNDRV_CHMAP_FC,
 SNDRV_CHMAP_LFE,
 SNDRV_CHMAP_SL,
 SNDRV_CHMAP_SR,
 SNDRV_CHMAP_RC,

 SNDRV_CHMAP_FLC,
 SNDRV_CHMAP_FRC,
 SNDRV_CHMAP_RLC,
 SNDRV_CHMAP_RRC,
 SNDRV_CHMAP_FLW,
 SNDRV_CHMAP_FRW,
 SNDRV_CHMAP_FLH,
 SNDRV_CHMAP_FCH,
 SNDRV_CHMAP_FRH,
 SNDRV_CHMAP_TC,
 SNDRV_CHMAP_TFL,
 SNDRV_CHMAP_TFR,
 SNDRV_CHMAP_TFC,
 SNDRV_CHMAP_TRL,
 SNDRV_CHMAP_TRR,
 SNDRV_CHMAP_TRC,

 SNDRV_CHMAP_TFLC,
 SNDRV_CHMAP_TFRC,
 SNDRV_CHMAP_TSL,
 SNDRV_CHMAP_TSR,
 SNDRV_CHMAP_LLFE,
 SNDRV_CHMAP_RLFE,
 SNDRV_CHMAP_BC,
 SNDRV_CHMAP_BLC,
 SNDRV_CHMAP_BRC,
 SNDRV_CHMAP_LAST = SNDRV_CHMAP_BRC,
};
# 710 "/usr/include/sound/asound.h" 3 4
enum {
 SNDRV_RAWMIDI_STREAM_OUTPUT = 0,
 SNDRV_RAWMIDI_STREAM_INPUT,
 SNDRV_RAWMIDI_STREAM_LAST = SNDRV_RAWMIDI_STREAM_INPUT,
};





struct snd_rawmidi_info {
 unsigned int device;
 unsigned int subdevice;
 int stream;
 int card;
 unsigned int flags;
 unsigned char id[64];
 unsigned char name[80];
 unsigned char subname[32];
 unsigned int subdevices_count;
 unsigned int subdevices_avail;
 unsigned char reserved[64];
};
# 747 "/usr/include/sound/asound.h" 3 4
struct snd_rawmidi_framing_tstamp {



 __u8 frame_type;
 __u8 length;
 __u8 reserved[2];
 __u32 tv_nsec;
 __u64 tv_sec;
 __u8 data[16];
} __attribute__((packed));

struct snd_rawmidi_params {
 int stream;
 size_t buffer_size;
 size_t avail_min;
 unsigned int no_active_sensing: 1;
 unsigned int mode;
 unsigned char reserved[12];
};

struct snd_rawmidi_status {
 int stream;
 __time_pad pad1;
 struct timespec tstamp;
 size_t avail;
 size_t xruns;
 unsigned char reserved[16];
};
# 791 "/usr/include/sound/asound.h" 3 4
enum {
 SNDRV_TIMER_CLASS_NONE = -1,
 SNDRV_TIMER_CLASS_SLAVE = 0,
 SNDRV_TIMER_CLASS_GLOBAL,
 SNDRV_TIMER_CLASS_CARD,
 SNDRV_TIMER_CLASS_PCM,
 SNDRV_TIMER_CLASS_LAST = SNDRV_TIMER_CLASS_PCM,
};


enum {
 SNDRV_TIMER_SCLASS_NONE = 0,
 SNDRV_TIMER_SCLASS_APPLICATION,
 SNDRV_TIMER_SCLASS_SEQUENCER,
 SNDRV_TIMER_SCLASS_OSS_SEQUENCER,
 SNDRV_TIMER_SCLASS_LAST = SNDRV_TIMER_SCLASS_OSS_SEQUENCER,
};
# 818 "/usr/include/sound/asound.h" 3 4
struct snd_timer_id {
 int dev_class;
 int dev_sclass;
 int card;
 int device;
 int subdevice;
};

struct snd_timer_ginfo {
 struct snd_timer_id tid;
 unsigned int flags;
 int card;
 unsigned char id[64];
 unsigned char name[80];
 unsigned long reserved0;
 unsigned long resolution;
 unsigned long resolution_min;
 unsigned long resolution_max;
 unsigned int clients;
 unsigned char reserved[32];
};

struct snd_timer_gparams {
 struct snd_timer_id tid;
 unsigned long period_num;
 unsigned long period_den;
 unsigned char reserved[32];
};

struct snd_timer_gstatus {
 struct snd_timer_id tid;
 unsigned long resolution;
 unsigned long resolution_num;
 unsigned long resolution_den;
 unsigned char reserved[32];
};

struct snd_timer_select {
 struct snd_timer_id id;
 unsigned char reserved[32];
};

struct snd_timer_info {
 unsigned int flags;
 int card;
 unsigned char id[64];
 unsigned char name[80];
 unsigned long reserved0;
 unsigned long resolution;
 unsigned char reserved[64];
};





struct snd_timer_params {
 unsigned int flags;
 unsigned int ticks;
 unsigned int queue_size;
 unsigned int reserved0;
 unsigned int filter;
 unsigned char reserved[60];
};

struct snd_timer_status {
 struct timespec tstamp;
 unsigned int resolution;
 unsigned int lost;
 unsigned int overrun;
 unsigned int queue;
 unsigned char reserved[64];
};
# 917 "/usr/include/sound/asound.h" 3 4
struct snd_timer_read {
 unsigned int resolution;
 unsigned int ticks;
};

enum {
 SNDRV_TIMER_EVENT_RESOLUTION = 0,
 SNDRV_TIMER_EVENT_TICK,
 SNDRV_TIMER_EVENT_START,
 SNDRV_TIMER_EVENT_STOP,
 SNDRV_TIMER_EVENT_CONTINUE,
 SNDRV_TIMER_EVENT_PAUSE,
 SNDRV_TIMER_EVENT_EARLY,
 SNDRV_TIMER_EVENT_SUSPEND,
 SNDRV_TIMER_EVENT_RESUME,

 SNDRV_TIMER_EVENT_MSTART = SNDRV_TIMER_EVENT_START + 10,
 SNDRV_TIMER_EVENT_MSTOP = SNDRV_TIMER_EVENT_STOP + 10,
 SNDRV_TIMER_EVENT_MCONTINUE = SNDRV_TIMER_EVENT_CONTINUE + 10,
 SNDRV_TIMER_EVENT_MPAUSE = SNDRV_TIMER_EVENT_PAUSE + 10,
 SNDRV_TIMER_EVENT_MSUSPEND = SNDRV_TIMER_EVENT_SUSPEND + 10,
 SNDRV_TIMER_EVENT_MRESUME = SNDRV_TIMER_EVENT_RESUME + 10,
};

struct snd_timer_tread {
 int event;
 __time_pad pad1;
 struct timespec tstamp;
 unsigned int val;
 __time_pad pad2;
};
# 957 "/usr/include/sound/asound.h" 3 4
struct snd_ctl_card_info {
 int card;
 int pad;
 unsigned char id[16];
 unsigned char driver[16];
 unsigned char name[32];
 unsigned char longname[80];
 unsigned char reserved_[16];
 unsigned char mixername[80];
 unsigned char components[128];
};

typedef int snd_ctl_elem_type_t;
# 979 "/usr/include/sound/asound.h" 3 4
typedef int snd_ctl_elem_iface_t;
# 1015 "/usr/include/sound/asound.h" 3 4
struct snd_ctl_elem_id {
 unsigned int numid;
 snd_ctl_elem_iface_t iface;
 unsigned int device;
 unsigned int subdevice;
 unsigned char name[44];
 unsigned int index;
};

struct snd_ctl_elem_list {
 unsigned int offset;
 unsigned int space;
 unsigned int used;
 unsigned int count;
 struct snd_ctl_elem_id *pids;
 unsigned char reserved[50];
};

struct snd_ctl_elem_info {
 struct snd_ctl_elem_id id;
 snd_ctl_elem_type_t type;
 unsigned int access;
 unsigned int count;
 __kernel_pid_t owner;
 union {
  struct {
   long min;
   long max;
   long step;
  } integer;
  struct {
   long long min;
   long long max;
   long long step;
  } integer64;
  struct {
   unsigned int items;
   unsigned int item;
   char name[64];
   __u64 names_ptr;
   unsigned int names_length;
  } enumerated;
  unsigned char reserved[128];
 } value;
 unsigned char reserved[64];
};

struct snd_ctl_elem_value {
 struct snd_ctl_elem_id id;
 unsigned int indirect: 1;
 union {
  union {
   long value[128];
   long *value_ptr;
  } integer;
  union {
   long long value[64];
   long long *value_ptr;
  } integer64;
  union {
   unsigned int item[128];
   unsigned int *item_ptr;
  } enumerated;
  union {
   unsigned char data[512];
   unsigned char *data_ptr;
  } bytes;
  struct snd_aes_iec958 iec958;
 } value;
 unsigned char reserved[128];
};

struct snd_ctl_tlv {
 unsigned int numid;
 unsigned int length;
 unsigned int tlv[0];
};
# 1123 "/usr/include/sound/asound.h" 3 4
enum sndrv_ctl_event_type {
 SNDRV_CTL_EVENT_ELEM = 0,
 SNDRV_CTL_EVENT_LAST = SNDRV_CTL_EVENT_ELEM,
};







struct snd_ctl_event {
 int type;
 union {
  struct {
   unsigned int mask;
   struct snd_ctl_elem_id id;
  } elem;
  unsigned char data8[60];
 } data;
};
# 198 "stress-ng.h" 2



# 1 "/usr/include/spawn.h" 1 3 4
# 29 "/usr/include/spawn.h" 3 4
typedef struct
{
  short int __flags;
  pid_t __pgrp;
  sigset_t __sd;
  sigset_t __ss;
  struct sched_param __sp;
  int __policy;
  int __pad[16];
} posix_spawnattr_t;




typedef struct
{
  int __allocated;
  int __used;
  struct __spawn_action *__actions;
  int __pad[16];
} posix_spawn_file_actions_t;
# 65 "/usr/include/spawn.h" 3 4







extern int posix_spawn (pid_t *__restrict __pid,
   const char *__restrict __path,
   const posix_spawn_file_actions_t *__restrict
   __file_actions,
   const posix_spawnattr_t *__restrict __attrp,
   char *const __argv[__restrict],
   char *const __envp[__restrict])
    __attribute__ ((__nonnull__ (2, 5)));





extern int posix_spawnp (pid_t *__pid, const char *__file,
    const posix_spawn_file_actions_t *__file_actions,
    const posix_spawnattr_t *__attrp,
    char *const __argv[], char *const __envp[])
    __attribute__ ((__nonnull__ (2, 5)));



extern int posix_spawnattr_init (posix_spawnattr_t *__attr)
    __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int posix_spawnattr_destroy (posix_spawnattr_t *__attr)
    __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int posix_spawnattr_getsigdefault (const posix_spawnattr_t *
       __restrict __attr,
       sigset_t *__restrict __sigdefault)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int posix_spawnattr_setsigdefault (posix_spawnattr_t *__restrict __attr,
       const sigset_t *__restrict
       __sigdefault)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int posix_spawnattr_getsigmask (const posix_spawnattr_t *__restrict
           __attr,
           sigset_t *__restrict __sigmask)
    __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int posix_spawnattr_setsigmask (posix_spawnattr_t *__restrict __attr,
           const sigset_t *__restrict __sigmask)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int posix_spawnattr_getflags (const posix_spawnattr_t *__restrict
         __attr,
         short int *__restrict __flags)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int posix_spawnattr_setflags (posix_spawnattr_t *_attr,
         short int __flags)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int posix_spawnattr_getpgroup (const posix_spawnattr_t *__restrict
          __attr, pid_t *__restrict __pgroup)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int posix_spawnattr_setpgroup (posix_spawnattr_t *__attr,
          pid_t __pgroup)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int posix_spawnattr_getschedpolicy (const posix_spawnattr_t *
        __restrict __attr,
        int *__restrict __schedpolicy)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int posix_spawnattr_setschedpolicy (posix_spawnattr_t *__attr,
        int __schedpolicy)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int posix_spawnattr_getschedparam (const posix_spawnattr_t *
       __restrict __attr,
       struct sched_param *__restrict
       __schedparam)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int posix_spawnattr_setschedparam (posix_spawnattr_t *__restrict __attr,
       const struct sched_param *
       __restrict __schedparam)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int posix_spawn_file_actions_init (posix_spawn_file_actions_t *
       __file_actions)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int posix_spawn_file_actions_destroy (posix_spawn_file_actions_t *
          __file_actions)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int posix_spawn_file_actions_addopen (posix_spawn_file_actions_t *
          __restrict __file_actions,
          int __fd,
          const char *__restrict __path,
          int __oflag, mode_t __mode)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3)));



extern int posix_spawn_file_actions_addclose (posix_spawn_file_actions_t *
           __file_actions, int __fd)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int posix_spawn_file_actions_adddup2 (posix_spawn_file_actions_t *
          __file_actions,
          int __fd, int __newfd)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));




extern int posix_spawn_file_actions_addchdir_np (posix_spawn_file_actions_t *
       __restrict __actions,
       const char *__restrict __path)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern int posix_spawn_file_actions_addfchdir_np (posix_spawn_file_actions_t *,
        int __fd)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int
posix_spawn_file_actions_addclosefrom_np (posix_spawn_file_actions_t *,
       int __from)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int
posix_spawn_file_actions_addtcsetpgrp_np (posix_spawn_file_actions_t *,
       int __tcfd)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));




# 202 "stress-ng.h" 2







# 1 "/usr/include/syslog.h" 1 3 4
# 1 "/usr/include/aarch64-linux-gnu/sys/syslog.h" 1 3 4
# 40 "/usr/include/aarch64-linux-gnu/sys/syslog.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/syslog-path.h" 1 3 4
# 41 "/usr/include/aarch64-linux-gnu/sys/syslog.h" 2 3 4
# 169 "/usr/include/aarch64-linux-gnu/sys/syslog.h" 3 4






extern void closelog (void);





extern void openlog (const char *__ident, int __option, int __facility);


extern int setlogmask (int __mask) __attribute__ ((__nothrow__ , __leaf__));





extern void syslog (int __pri, const char *__fmt, ...)
     __attribute__ ((__format__ (__printf__, 2, 3)));
# 200 "/usr/include/aarch64-linux-gnu/sys/syslog.h" 3 4
extern void vsyslog (int __pri, const char *__fmt, __gnuc_va_list __ap)
     __attribute__ ((__format__ (__printf__, 2, 0)));





# 1 "/usr/include/aarch64-linux-gnu/bits/syslog.h" 1 3 4
# 24 "/usr/include/aarch64-linux-gnu/bits/syslog.h" 3 4
extern void __syslog_chk (int __pri, int __flag, const char *__fmt, ...)
     __attribute__ ((__format__ (__printf__, 3, 4)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void
syslog (int __pri, const char *__fmt, ...)
{
  __syslog_chk (__pri, 2 - 1, __fmt, __builtin_va_arg_pack ());
}







extern void __vsyslog_chk (int __pri, int __flag, const char *__fmt,
      __gnuc_va_list __ap)
     __attribute__ ((__format__ (__printf__, 3, 0)));

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void
vsyslog (int __pri, const char *__fmt, __gnuc_va_list __ap)
{
  __vsyslog_chk (__pri, 2 - 1, __fmt, __ap);
}
# 208 "/usr/include/aarch64-linux-gnu/sys/syslog.h" 2 3 4








# 2 "/usr/include/syslog.h" 2 3 4
# 210 "stress-ng.h" 2



# 1 "/usr/include/termio.h" 1 3 4




# 1 "/usr/include/termios.h" 1 3 4
# 35 "/usr/include/termios.h" 3 4




# 1 "/usr/include/aarch64-linux-gnu/bits/termios.h" 1 3 4
# 23 "/usr/include/aarch64-linux-gnu/bits/termios.h" 3 4
typedef unsigned char cc_t;
typedef unsigned int speed_t;
typedef unsigned int tcflag_t;

# 1 "/usr/include/aarch64-linux-gnu/bits/termios-struct.h" 1 3 4
# 24 "/usr/include/aarch64-linux-gnu/bits/termios-struct.h" 3 4
struct termios
  {
    tcflag_t c_iflag;
    tcflag_t c_oflag;
    tcflag_t c_cflag;
    tcflag_t c_lflag;
    cc_t c_line;
    cc_t c_cc[32];
    speed_t c_ispeed;
    speed_t c_ospeed;


  };
# 28 "/usr/include/aarch64-linux-gnu/bits/termios.h" 2 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/termios-c_cc.h" 1 3 4
# 29 "/usr/include/aarch64-linux-gnu/bits/termios.h" 2 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/termios-c_iflag.h" 1 3 4
# 30 "/usr/include/aarch64-linux-gnu/bits/termios.h" 2 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/termios-c_oflag.h" 1 3 4
# 31 "/usr/include/aarch64-linux-gnu/bits/termios.h" 2 3 4
# 53 "/usr/include/aarch64-linux-gnu/bits/termios.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/termios-baud.h" 1 3 4
# 54 "/usr/include/aarch64-linux-gnu/bits/termios.h" 2 3 4

# 1 "/usr/include/aarch64-linux-gnu/bits/termios-c_cflag.h" 1 3 4
# 56 "/usr/include/aarch64-linux-gnu/bits/termios.h" 2 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/termios-c_lflag.h" 1 3 4
# 57 "/usr/include/aarch64-linux-gnu/bits/termios.h" 2 3 4
# 74 "/usr/include/aarch64-linux-gnu/bits/termios.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/termios-tcflow.h" 1 3 4
# 75 "/usr/include/aarch64-linux-gnu/bits/termios.h" 2 3 4

# 1 "/usr/include/aarch64-linux-gnu/bits/termios-misc.h" 1 3 4
# 77 "/usr/include/aarch64-linux-gnu/bits/termios.h" 2 3 4
# 40 "/usr/include/termios.h" 2 3 4
# 48 "/usr/include/termios.h" 3 4
extern speed_t cfgetospeed (const struct termios *__termios_p) __attribute__ ((__nothrow__ , __leaf__));


extern speed_t cfgetispeed (const struct termios *__termios_p) __attribute__ ((__nothrow__ , __leaf__));


extern int cfsetospeed (struct termios *__termios_p, speed_t __speed) __attribute__ ((__nothrow__ , __leaf__));


extern int cfsetispeed (struct termios *__termios_p, speed_t __speed) __attribute__ ((__nothrow__ , __leaf__));



extern int cfsetspeed (struct termios *__termios_p, speed_t __speed) __attribute__ ((__nothrow__ , __leaf__));




extern int tcgetattr (int __fd, struct termios *__termios_p) __attribute__ ((__nothrow__ , __leaf__));



extern int tcsetattr (int __fd, int __optional_actions,
        const struct termios *__termios_p) __attribute__ ((__nothrow__ , __leaf__));




extern void cfmakeraw (struct termios *__termios_p) __attribute__ ((__nothrow__ , __leaf__));



extern int tcsendbreak (int __fd, int __duration) __attribute__ ((__nothrow__ , __leaf__));





extern int tcdrain (int __fd);



extern int tcflush (int __fd, int __queue_selector) __attribute__ ((__nothrow__ , __leaf__));



extern int tcflow (int __fd, int __action) __attribute__ ((__nothrow__ , __leaf__));




extern __pid_t tcgetsid (int __fd) __attribute__ ((__nothrow__ , __leaf__));




# 1 "/usr/include/aarch64-linux-gnu/sys/ttydefaults.h" 1 3 4
# 105 "/usr/include/termios.h" 2 3 4



# 6 "/usr/include/termio.h" 2 3 4
# 1 "/usr/include/aarch64-linux-gnu/sys/ioctl.h" 1 3 4
# 23 "/usr/include/aarch64-linux-gnu/sys/ioctl.h" 3 4



# 1 "/usr/include/aarch64-linux-gnu/bits/ioctls.h" 1 3 4
# 23 "/usr/include/aarch64-linux-gnu/bits/ioctls.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/asm/ioctls.h" 1 3 4
# 1 "/usr/include/asm-generic/ioctls.h" 1 3 4




# 1 "/usr/include/linux/ioctl.h" 1 3 4




# 1 "/usr/include/aarch64-linux-gnu/asm/ioctl.h" 1 3 4
# 1 "/usr/include/asm-generic/ioctl.h" 1 3 4
# 2 "/usr/include/aarch64-linux-gnu/asm/ioctl.h" 2 3 4
# 6 "/usr/include/linux/ioctl.h" 2 3 4
# 6 "/usr/include/asm-generic/ioctls.h" 2 3 4
# 2 "/usr/include/aarch64-linux-gnu/asm/ioctls.h" 2 3 4
# 24 "/usr/include/aarch64-linux-gnu/bits/ioctls.h" 2 3 4
# 27 "/usr/include/aarch64-linux-gnu/sys/ioctl.h" 2 3 4


# 1 "/usr/include/aarch64-linux-gnu/bits/ioctl-types.h" 1 3 4
# 24 "/usr/include/aarch64-linux-gnu/bits/ioctl-types.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/asm/ioctls.h" 1 3 4
# 25 "/usr/include/aarch64-linux-gnu/bits/ioctl-types.h" 2 3 4


struct winsize
  {
    unsigned short int ws_row;
    unsigned short int ws_col;
    unsigned short int ws_xpixel;
    unsigned short int ws_ypixel;
  };


struct termio
  {
    unsigned short int c_iflag;
    unsigned short int c_oflag;
    unsigned short int c_cflag;
    unsigned short int c_lflag;
    unsigned char c_line;
    unsigned char c_cc[8];
};
# 30 "/usr/include/aarch64-linux-gnu/sys/ioctl.h" 2 3 4






# 1 "/usr/include/aarch64-linux-gnu/sys/ttydefaults.h" 1 3 4
# 37 "/usr/include/aarch64-linux-gnu/sys/ioctl.h" 2 3 4





extern int ioctl (int __fd, unsigned long int __request, ...) __attribute__ ((__nothrow__ , __leaf__));
# 53 "/usr/include/aarch64-linux-gnu/sys/ioctl.h" 3 4

# 7 "/usr/include/termio.h" 2 3 4
# 214 "stress-ng.h" 2







# 1 "/usr/include/ucontext.h" 1 3 4
# 26 "/usr/include/ucontext.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/indirect-return.h" 1 3 4
# 27 "/usr/include/ucontext.h" 2 3 4







extern int getcontext (ucontext_t *__ucp) __attribute__ ((__nothrow__));


extern int setcontext (const ucontext_t *__ucp) __attribute__ ((__nothrow__));



extern int swapcontext (ucontext_t *__restrict __oucp,
   const ucontext_t *__restrict __ucp)
  __attribute__ ((__nothrow__)) ;







extern void makecontext (ucontext_t *__ucp, void (*__func) (void),
    int __argc, ...) __attribute__ ((__nothrow__ , __leaf__));


# 222 "stress-ng.h" 2
# 234 "stress-ng.h"
# 1 "/usr/include/utime.h" 1 3 4
# 27 "/usr/include/utime.h" 3 4

# 36 "/usr/include/utime.h" 3 4
struct utimbuf
  {




    __time_t actime;
    __time_t modtime;

  };




extern int utime (const char *__file,
    const struct utimbuf *__file_times)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 64 "/usr/include/utime.h" 3 4

# 235 "stress-ng.h" 2



# 1 "/usr/include/wchar.h" 1 3 4
# 27 "/usr/include/wchar.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 28 "/usr/include/wchar.h" 2 3 4







# 1 "/usr/lib/gcc/aarch64-linux-gnu/11/include/stddef.h" 1 3 4
# 36 "/usr/include/wchar.h" 2 3 4





# 1 "/usr/include/aarch64-linux-gnu/bits/types/wint_t.h" 1 3 4
# 20 "/usr/include/aarch64-linux-gnu/bits/types/wint_t.h" 3 4
typedef unsigned int wint_t;
# 42 "/usr/include/wchar.h" 2 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/types/mbstate_t.h" 1 3 4





typedef __mbstate_t mbstate_t;
# 43 "/usr/include/wchar.h" 2 3 4
# 79 "/usr/include/wchar.h" 3 4




struct tm;



extern wchar_t *wcscpy (wchar_t *__restrict __dest,
   const wchar_t *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern wchar_t *wcsncpy (wchar_t *__restrict __dest,
    const wchar_t *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern wchar_t *wcscat (wchar_t *__restrict __dest,
   const wchar_t *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern wchar_t *wcsncat (wchar_t *__restrict __dest,
    const wchar_t *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int wcscmp (const wchar_t *__s1, const wchar_t *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int wcsncmp (const wchar_t *__s1, const wchar_t *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));



extern int wcscasecmp (const wchar_t *__s1, const wchar_t *__s2) __attribute__ ((__nothrow__ , __leaf__));


extern int wcsncasecmp (const wchar_t *__s1, const wchar_t *__s2,
   size_t __n) __attribute__ ((__nothrow__ , __leaf__));



extern int wcscasecmp_l (const wchar_t *__s1, const wchar_t *__s2,
    locale_t __loc) __attribute__ ((__nothrow__ , __leaf__));

extern int wcsncasecmp_l (const wchar_t *__s1, const wchar_t *__s2,
     size_t __n, locale_t __loc) __attribute__ ((__nothrow__ , __leaf__));




extern int wcscoll (const wchar_t *__s1, const wchar_t *__s2) __attribute__ ((__nothrow__ , __leaf__));



extern size_t wcsxfrm (wchar_t *__restrict __s1,
         const wchar_t *__restrict __s2, size_t __n) __attribute__ ((__nothrow__ , __leaf__));







extern int wcscoll_l (const wchar_t *__s1, const wchar_t *__s2,
        locale_t __loc) __attribute__ ((__nothrow__ , __leaf__));




extern size_t wcsxfrm_l (wchar_t *__s1, const wchar_t *__s2,
    size_t __n, locale_t __loc) __attribute__ ((__nothrow__ , __leaf__));


extern wchar_t *wcsdup (const wchar_t *__s) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (__builtin_free, 1)));
# 165 "/usr/include/wchar.h" 3 4
extern wchar_t *wcschr (const wchar_t *__wcs, wchar_t __wc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__));
# 175 "/usr/include/wchar.h" 3 4
extern wchar_t *wcsrchr (const wchar_t *__wcs, wchar_t __wc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__));





extern wchar_t *wcschrnul (const wchar_t *__s, wchar_t __wc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__));




extern size_t wcscspn (const wchar_t *__wcs, const wchar_t *__reject)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__));


extern size_t wcsspn (const wchar_t *__wcs, const wchar_t *__accept)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__));
# 202 "/usr/include/wchar.h" 3 4
extern wchar_t *wcspbrk (const wchar_t *__wcs, const wchar_t *__accept)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__));
# 213 "/usr/include/wchar.h" 3 4
extern wchar_t *wcsstr (const wchar_t *__haystack, const wchar_t *__needle)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__));



extern wchar_t *wcstok (wchar_t *__restrict __s,
   const wchar_t *__restrict __delim,
   wchar_t **__restrict __ptr) __attribute__ ((__nothrow__ , __leaf__));


extern size_t wcslen (const wchar_t *__s) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__));
# 234 "/usr/include/wchar.h" 3 4
extern wchar_t *wcswcs (const wchar_t *__haystack, const wchar_t *__needle)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__));





extern size_t wcsnlen (const wchar_t *__s, size_t __maxlen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__));
# 254 "/usr/include/wchar.h" 3 4
extern wchar_t *wmemchr (const wchar_t *__s, wchar_t __c, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__));



extern int wmemcmp (const wchar_t *__s1, const wchar_t *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__));


extern wchar_t *wmemcpy (wchar_t *__restrict __s1,
    const wchar_t *__restrict __s2, size_t __n) __attribute__ ((__nothrow__ , __leaf__));



extern wchar_t *wmemmove (wchar_t *__s1, const wchar_t *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__));


extern wchar_t *wmemset (wchar_t *__s, wchar_t __c, size_t __n) __attribute__ ((__nothrow__ , __leaf__));




extern wchar_t *wmempcpy (wchar_t *__restrict __s1,
     const wchar_t *__restrict __s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__));





extern wint_t btowc (int __c) __attribute__ ((__nothrow__ , __leaf__));



extern int wctob (wint_t __c) __attribute__ ((__nothrow__ , __leaf__));



extern int mbsinit (const mbstate_t *__ps) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__));



extern size_t mbrtowc (wchar_t *__restrict __pwc,
         const char *__restrict __s, size_t __n,
         mbstate_t *__restrict __p) __attribute__ ((__nothrow__ , __leaf__));


extern size_t wcrtomb (char *__restrict __s, wchar_t __wc,
         mbstate_t *__restrict __ps) __attribute__ ((__nothrow__ , __leaf__));


extern size_t __mbrlen (const char *__restrict __s, size_t __n,
   mbstate_t *__restrict __ps) __attribute__ ((__nothrow__ , __leaf__));
extern size_t mbrlen (const char *__restrict __s, size_t __n,
        mbstate_t *__restrict __ps) __attribute__ ((__nothrow__ , __leaf__));







extern wint_t __btowc_alias (int __c) __asm ("btowc");
extern __inline __attribute__ ((__gnu_inline__)) wint_t
__attribute__ ((__nothrow__ , __leaf__)) btowc (int __c)
{ return (__builtin_constant_p (__c) && __c >= '\0' && __c <= '\x7f'
   ? (wint_t) __c : __btowc_alias (__c)); }

extern int __wctob_alias (wint_t __c) __asm ("wctob");
extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__nothrow__ , __leaf__)) wctob (wint_t __wc)
{ return (__builtin_constant_p (__wc) && __wc >= L'\0' && __wc <= L'\x7f'
   ? (int) __wc : __wctob_alias (__wc)); }

extern __inline __attribute__ ((__gnu_inline__)) size_t
__attribute__ ((__nothrow__ , __leaf__)) mbrlen (const char *__restrict __s, size_t __n, mbstate_t *__restrict __ps)

{ return (__ps != ((void *)0)
   ? mbrtowc (((void *)0), __s, __n, __ps) : __mbrlen (__s, __n, ((void *)0))); }




extern size_t mbsrtowcs (wchar_t *__restrict __dst,
    const char **__restrict __src, size_t __len,
    mbstate_t *__restrict __ps) __attribute__ ((__nothrow__ , __leaf__));



extern size_t wcsrtombs (char *__restrict __dst,
    const wchar_t **__restrict __src, size_t __len,
    mbstate_t *__restrict __ps) __attribute__ ((__nothrow__ , __leaf__));





extern size_t mbsnrtowcs (wchar_t *__restrict __dst,
     const char **__restrict __src, size_t __nmc,
     size_t __len, mbstate_t *__restrict __ps) __attribute__ ((__nothrow__ , __leaf__));



extern size_t wcsnrtombs (char *__restrict __dst,
     const wchar_t **__restrict __src,
     size_t __nwc, size_t __len,
     mbstate_t *__restrict __ps) __attribute__ ((__nothrow__ , __leaf__));






extern int wcwidth (wchar_t __c) __attribute__ ((__nothrow__ , __leaf__));



extern int wcswidth (const wchar_t *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__));





extern double wcstod (const wchar_t *__restrict __nptr,
        wchar_t **__restrict __endptr) __attribute__ ((__nothrow__ , __leaf__));



extern float wcstof (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) __attribute__ ((__nothrow__ , __leaf__));
extern long double wcstold (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) __attribute__ ((__nothrow__ , __leaf__));
# 397 "/usr/include/wchar.h" 3 4
extern _Float32 wcstof32 (const wchar_t *__restrict __nptr,
     wchar_t **__restrict __endptr) __attribute__ ((__nothrow__ , __leaf__));



extern _Float64 wcstof64 (const wchar_t *__restrict __nptr,
     wchar_t **__restrict __endptr) __attribute__ ((__nothrow__ , __leaf__));



extern _Float128 wcstof128 (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) __attribute__ ((__nothrow__ , __leaf__));



extern _Float32x wcstof32x (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) __attribute__ ((__nothrow__ , __leaf__));



extern _Float64x wcstof64x (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) __attribute__ ((__nothrow__ , __leaf__));
# 429 "/usr/include/wchar.h" 3 4
extern long int wcstol (const wchar_t *__restrict __nptr,
   wchar_t **__restrict __endptr, int __base) __attribute__ ((__nothrow__ , __leaf__));



extern unsigned long int wcstoul (const wchar_t *__restrict __nptr,
      wchar_t **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__));




__extension__
extern long long int wcstoll (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__));



__extension__
extern unsigned long long int wcstoull (const wchar_t *__restrict __nptr,
     wchar_t **__restrict __endptr,
     int __base) __attribute__ ((__nothrow__ , __leaf__));





__extension__
extern long long int wcstoq (const wchar_t *__restrict __nptr,
        wchar_t **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__));



__extension__
extern unsigned long long int wcstouq (const wchar_t *__restrict __nptr,
           wchar_t **__restrict __endptr,
           int __base) __attribute__ ((__nothrow__ , __leaf__));






extern long int wcstol_l (const wchar_t *__restrict __nptr,
     wchar_t **__restrict __endptr, int __base,
     locale_t __loc) __attribute__ ((__nothrow__ , __leaf__));

extern unsigned long int wcstoul_l (const wchar_t *__restrict __nptr,
        wchar_t **__restrict __endptr,
        int __base, locale_t __loc) __attribute__ ((__nothrow__ , __leaf__));

__extension__
extern long long int wcstoll_l (const wchar_t *__restrict __nptr,
    wchar_t **__restrict __endptr,
    int __base, locale_t __loc) __attribute__ ((__nothrow__ , __leaf__));

__extension__
extern unsigned long long int wcstoull_l (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr,
       int __base, locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__));

extern double wcstod_l (const wchar_t *__restrict __nptr,
   wchar_t **__restrict __endptr, locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__));

extern float wcstof_l (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr, locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__));

extern long double wcstold_l (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr,
         locale_t __loc) __attribute__ ((__nothrow__ , __leaf__));
# 512 "/usr/include/wchar.h" 3 4
extern _Float32 wcstof32_l (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr,
       locale_t __loc) __attribute__ ((__nothrow__ , __leaf__));



extern _Float64 wcstof64_l (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr,
       locale_t __loc) __attribute__ ((__nothrow__ , __leaf__));



extern _Float128 wcstof128_l (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr,
         locale_t __loc) __attribute__ ((__nothrow__ , __leaf__));



extern _Float32x wcstof32x_l (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr,
         locale_t __loc) __attribute__ ((__nothrow__ , __leaf__));



extern _Float64x wcstof64x_l (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr,
         locale_t __loc) __attribute__ ((__nothrow__ , __leaf__));
# 552 "/usr/include/wchar.h" 3 4
extern wchar_t *wcpcpy (wchar_t *__restrict __dest,
   const wchar_t *__restrict __src) __attribute__ ((__nothrow__ , __leaf__));



extern wchar_t *wcpncpy (wchar_t *__restrict __dest,
    const wchar_t *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__));
# 581 "/usr/include/wchar.h" 3 4
extern __FILE *open_wmemstream (wchar_t **__bufloc, size_t *__sizeloc) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (fclose, 1)));





extern int fwide (__FILE *__fp, int __mode) __attribute__ ((__nothrow__ , __leaf__));






extern int fwprintf (__FILE *__restrict __stream,
       const wchar_t *__restrict __format, ...)
                                                           ;




extern int wprintf (const wchar_t *__restrict __format, ...)
                                                           ;

extern int swprintf (wchar_t *__restrict __s, size_t __n,
       const wchar_t *__restrict __format, ...)
     __attribute__ ((__nothrow__ , __leaf__)) ;





extern int vfwprintf (__FILE *__restrict __s,
        const wchar_t *__restrict __format,
        __gnuc_va_list __arg)
                                                           ;




extern int vwprintf (const wchar_t *__restrict __format,
       __gnuc_va_list __arg)
                                                           ;


extern int vswprintf (wchar_t *__restrict __s, size_t __n,
        const wchar_t *__restrict __format,
        __gnuc_va_list __arg)
     __attribute__ ((__nothrow__ , __leaf__)) ;






extern int fwscanf (__FILE *__restrict __stream,
      const wchar_t *__restrict __format, ...)
                                                          ;




extern int wscanf (const wchar_t *__restrict __format, ...)
                                                          ;

extern int swscanf (const wchar_t *__restrict __s,
      const wchar_t *__restrict __format, ...)
     __attribute__ ((__nothrow__ , __leaf__)) ;
# 657 "/usr/include/wchar.h" 3 4
extern int fwscanf (__FILE *__restrict __stream, const wchar_t *__restrict __format, ...) __asm__ ("" "__isoc99_fwscanf")


                                                          ;
extern int wscanf (const wchar_t *__restrict __format, ...) __asm__ ("" "__isoc99_wscanf")

                                                          ;
extern int swscanf (const wchar_t *__restrict __s, const wchar_t *__restrict __format, ...) __asm__ ("" "__isoc99_swscanf") __attribute__ ((__nothrow__ , __leaf__))


                                                          ;
# 688 "/usr/include/wchar.h" 3 4
extern int vfwscanf (__FILE *__restrict __s,
       const wchar_t *__restrict __format,
       __gnuc_va_list __arg)
                                                          ;




extern int vwscanf (const wchar_t *__restrict __format,
      __gnuc_va_list __arg)
                                                          ;

extern int vswscanf (const wchar_t *__restrict __s,
       const wchar_t *__restrict __format,
       __gnuc_va_list __arg)
     __attribute__ ((__nothrow__ , __leaf__)) ;







extern int vfwscanf (__FILE *__restrict __s, const wchar_t *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vfwscanf")


                                                          ;
extern int vwscanf (const wchar_t *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vwscanf")

                                                          ;
extern int vswscanf (const wchar_t *__restrict __s, const wchar_t *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vswscanf") __attribute__ ((__nothrow__ , __leaf__))


                                                          ;
# 744 "/usr/include/wchar.h" 3 4
extern wint_t fgetwc (__FILE *__stream);
extern wint_t getwc (__FILE *__stream);





extern wint_t getwchar (void);






extern wint_t fputwc (wchar_t __wc, __FILE *__stream);
extern wint_t putwc (wchar_t __wc, __FILE *__stream);





extern wint_t putwchar (wchar_t __wc);







extern wchar_t *fgetws (wchar_t *__restrict __ws, int __n,
   __FILE *__restrict __stream);





extern int fputws (const wchar_t *__restrict __ws,
     __FILE *__restrict __stream);






extern wint_t ungetwc (wint_t __wc, __FILE *__stream);
# 799 "/usr/include/wchar.h" 3 4
extern wint_t getwc_unlocked (__FILE *__stream);
extern wint_t getwchar_unlocked (void);







extern wint_t fgetwc_unlocked (__FILE *__stream);







extern wint_t fputwc_unlocked (wchar_t __wc, __FILE *__stream);
# 825 "/usr/include/wchar.h" 3 4
extern wint_t putwc_unlocked (wchar_t __wc, __FILE *__stream);
extern wint_t putwchar_unlocked (wchar_t __wc);
# 835 "/usr/include/wchar.h" 3 4
extern wchar_t *fgetws_unlocked (wchar_t *__restrict __ws, int __n,
     __FILE *__restrict __stream);







extern int fputws_unlocked (const wchar_t *__restrict __ws,
       __FILE *__restrict __stream);






extern size_t wcsftime (wchar_t *__restrict __s, size_t __maxsize,
   const wchar_t *__restrict __format,
   const struct tm *__restrict __tp) __attribute__ ((__nothrow__ , __leaf__));




extern size_t wcsftime_l (wchar_t *__restrict __s, size_t __maxsize,
     const wchar_t *__restrict __format,
     const struct tm *__restrict __tp,
     locale_t __loc) __attribute__ ((__nothrow__ , __leaf__));




# 1 "/usr/include/aarch64-linux-gnu/bits/wchar2.h" 1 3 4
# 24 "/usr/include/aarch64-linux-gnu/bits/wchar2.h" 3 4
extern wchar_t *__wmemcpy_chk (wchar_t *__restrict __s1,
          const wchar_t *__restrict __s2, size_t __n,
          size_t __ns1) __attribute__ ((__nothrow__ , __leaf__));
extern wchar_t *__wmemcpy_alias (wchar_t *__restrict __s1, const wchar_t *__restrict __s2, size_t __n) __asm__ ("" "wmemcpy") __attribute__ ((__nothrow__ , __leaf__))


            ;
extern wchar_t *__wmemcpy_chk_warn (wchar_t *__restrict __s1, const wchar_t *__restrict __s2, size_t __n, size_t __ns1) __asm__ ("" "__wmemcpy_chk") __attribute__ ((__nothrow__ , __leaf__))



     __attribute__((__warning__ ("wmemcpy called with length bigger than size of destination " "buffer")))
            ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) wchar_t *
__attribute__ ((__nothrow__ , __leaf__)) wmemcpy (wchar_t *__restrict __s1, const wchar_t *__restrict __s2, size_t __n)

{
  return ((((__typeof (__n)) 0 < (__typeof (__n)) -1 || (__builtin_constant_p (__n) && (__n) > 0)) && __builtin_constant_p ((((long unsigned int) (__n)) <= (__builtin_object_size (__s1, 0)) / (sizeof (wchar_t)))) && (((long unsigned int) (__n)) <= (__builtin_object_size (__s1, 0)) / (sizeof (wchar_t)))) ? __wmemcpy_alias (__s1, __s2, __n) : ((((__typeof (__n)) 0 < (__typeof (__n)) -1 || (__builtin_constant_p (__n) && (__n) > 0)) && __builtin_constant_p ((((long unsigned int) (__n)) <= (__builtin_object_size (__s1, 0)) / (sizeof (wchar_t)))) && !(((long unsigned int) (__n)) <= (__builtin_object_size (__s1, 0)) / (sizeof (wchar_t)))) ? __wmemcpy_chk_warn (__s1, __s2, __n, (__builtin_object_size (__s1, 0)) / (sizeof (wchar_t))) : __wmemcpy_chk (__s1, __s2, __n, (__builtin_object_size (__s1, 0)) / (sizeof (wchar_t)))))

                       ;
}


extern wchar_t *__wmemmove_chk (wchar_t *__s1, const wchar_t *__s2,
    size_t __n, size_t __ns1) __attribute__ ((__nothrow__ , __leaf__));
extern wchar_t *__wmemmove_alias (wchar_t *__s1, const wchar_t *__s2, size_t __n) __asm__ ("" "wmemmove") __attribute__ ((__nothrow__ , __leaf__))

                               ;
extern wchar_t *__wmemmove_chk_warn (wchar_t *__s1, const wchar_t *__s2, size_t __n, size_t __ns1) __asm__ ("" "__wmemmove_chk") __attribute__ ((__nothrow__ , __leaf__))


     __attribute__((__warning__ ("wmemmove called with length bigger than size of destination " "buffer")))
            ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) wchar_t *
__attribute__ ((__nothrow__ , __leaf__)) wmemmove (wchar_t *__s1, const wchar_t *__s2, size_t __n)
{
  return ((((__typeof (__n)) 0 < (__typeof (__n)) -1 || (__builtin_constant_p (__n) && (__n) > 0)) && __builtin_constant_p ((((long unsigned int) (__n)) <= (__builtin_object_size (__s1, 0)) / (sizeof (wchar_t)))) && (((long unsigned int) (__n)) <= (__builtin_object_size (__s1, 0)) / (sizeof (wchar_t)))) ? __wmemmove_alias (__s1, __s2, __n) : ((((__typeof (__n)) 0 < (__typeof (__n)) -1 || (__builtin_constant_p (__n) && (__n) > 0)) && __builtin_constant_p ((((long unsigned int) (__n)) <= (__builtin_object_size (__s1, 0)) / (sizeof (wchar_t)))) && !(((long unsigned int) (__n)) <= (__builtin_object_size (__s1, 0)) / (sizeof (wchar_t)))) ? __wmemmove_chk_warn (__s1, __s2, __n, (__builtin_object_size (__s1, 0)) / (sizeof (wchar_t))) : __wmemmove_chk (__s1, __s2, __n, (__builtin_object_size (__s1, 0)) / (sizeof (wchar_t)))))

                       ;
}



extern wchar_t *__wmempcpy_chk (wchar_t *__restrict __s1,
    const wchar_t *__restrict __s2, size_t __n,
    size_t __ns1) __attribute__ ((__nothrow__ , __leaf__));
extern wchar_t *__wmempcpy_alias (wchar_t *__restrict __s1, const wchar_t *__restrict __s2, size_t __n) __asm__ ("" "wmempcpy") __attribute__ ((__nothrow__ , __leaf__))


                           ;
extern wchar_t *__wmempcpy_chk_warn (wchar_t *__restrict __s1, const wchar_t *__restrict __s2, size_t __n, size_t __ns1) __asm__ ("" "__wmempcpy_chk") __attribute__ ((__nothrow__ , __leaf__))



     __attribute__((__warning__ ("wmempcpy called with length bigger than size of destination " "buffer")))
            ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) wchar_t *
__attribute__ ((__nothrow__ , __leaf__)) wmempcpy (wchar_t *__restrict __s1, const wchar_t *__restrict __s2, size_t __n)

{
  return ((((__typeof (__n)) 0 < (__typeof (__n)) -1 || (__builtin_constant_p (__n) && (__n) > 0)) && __builtin_constant_p ((((long unsigned int) (__n)) <= (__builtin_object_size (__s1, 0)) / (sizeof (wchar_t)))) && (((long unsigned int) (__n)) <= (__builtin_object_size (__s1, 0)) / (sizeof (wchar_t)))) ? __wmempcpy_alias (__s1, __s2, __n) : ((((__typeof (__n)) 0 < (__typeof (__n)) -1 || (__builtin_constant_p (__n) && (__n) > 0)) && __builtin_constant_p ((((long unsigned int) (__n)) <= (__builtin_object_size (__s1, 0)) / (sizeof (wchar_t)))) && !(((long unsigned int) (__n)) <= (__builtin_object_size (__s1, 0)) / (sizeof (wchar_t)))) ? __wmempcpy_chk_warn (__s1, __s2, __n, (__builtin_object_size (__s1, 0)) / (sizeof (wchar_t))) : __wmempcpy_chk (__s1, __s2, __n, (__builtin_object_size (__s1, 0)) / (sizeof (wchar_t)))))

                       ;
}



extern wchar_t *__wmemset_chk (wchar_t *__s, wchar_t __c, size_t __n,
          size_t __ns) __attribute__ ((__nothrow__ , __leaf__));
extern wchar_t *__wmemset_alias (wchar_t *__s, wchar_t __c, size_t __n) __asm__ ("" "wmemset") __attribute__ ((__nothrow__ , __leaf__))
                             ;
extern wchar_t *__wmemset_chk_warn (wchar_t *__s, wchar_t __c, size_t __n, size_t __ns) __asm__ ("" "__wmemset_chk") __attribute__ ((__nothrow__ , __leaf__))


     __attribute__((__warning__ ("wmemset called with length bigger than size of destination " "buffer")))
            ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) wchar_t *
__attribute__ ((__nothrow__ , __leaf__)) wmemset (wchar_t *__s, wchar_t __c, size_t __n)
{
  return ((((__typeof (__n)) 0 < (__typeof (__n)) -1 || (__builtin_constant_p (__n) && (__n) > 0)) && __builtin_constant_p ((((long unsigned int) (__n)) <= (__builtin_object_size (__s, 0)) / (sizeof (wchar_t)))) && (((long unsigned int) (__n)) <= (__builtin_object_size (__s, 0)) / (sizeof (wchar_t)))) ? __wmemset_alias (__s, __c, __n) : ((((__typeof (__n)) 0 < (__typeof (__n)) -1 || (__builtin_constant_p (__n) && (__n) > 0)) && __builtin_constant_p ((((long unsigned int) (__n)) <= (__builtin_object_size (__s, 0)) / (sizeof (wchar_t)))) && !(((long unsigned int) (__n)) <= (__builtin_object_size (__s, 0)) / (sizeof (wchar_t)))) ? __wmemset_chk_warn (__s, __c, __n, (__builtin_object_size (__s, 0)) / (sizeof (wchar_t))) : __wmemset_chk (__s, __c, __n, (__builtin_object_size (__s, 0)) / (sizeof (wchar_t)))))

                     ;
}


extern wchar_t *__wcscpy_chk (wchar_t *__restrict __dest,
         const wchar_t *__restrict __src,
         size_t __n) __attribute__ ((__nothrow__ , __leaf__));
extern wchar_t *__wcscpy_alias (wchar_t *__restrict __dest, const wchar_t *__restrict __src) __asm__ ("" "wcscpy") __attribute__ ((__nothrow__ , __leaf__))

                                              ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) wchar_t *
__attribute__ ((__nothrow__ , __leaf__)) wcscpy (wchar_t *__restrict __dest, const wchar_t *__restrict __src)
{
  size_t sz = __builtin_object_size (__dest, 2 > 1);
  if (sz != (size_t) -1)
    return __wcscpy_chk (__dest, __src, sz / sizeof (wchar_t));
  return __wcscpy_alias (__dest, __src);
}


extern wchar_t *__wcpcpy_chk (wchar_t *__restrict __dest,
         const wchar_t *__restrict __src,
         size_t __destlen) __attribute__ ((__nothrow__ , __leaf__));
extern wchar_t *__wcpcpy_alias (wchar_t *__restrict __dest, const wchar_t *__restrict __src) __asm__ ("" "wcpcpy") __attribute__ ((__nothrow__ , __leaf__))

                                              ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) wchar_t *
__attribute__ ((__nothrow__ , __leaf__)) wcpcpy (wchar_t *__restrict __dest, const wchar_t *__restrict __src)
{
  size_t sz = __builtin_object_size (__dest, 2 > 1);
  if (sz != (size_t) -1)
    return __wcpcpy_chk (__dest, __src, sz / sizeof (wchar_t));
  return __wcpcpy_alias (__dest, __src);
}


extern wchar_t *__wcsncpy_chk (wchar_t *__restrict __dest,
          const wchar_t *__restrict __src, size_t __n,
          size_t __destlen) __attribute__ ((__nothrow__ , __leaf__));
extern wchar_t *__wcsncpy_alias (wchar_t *__restrict __dest, const wchar_t *__restrict __src, size_t __n) __asm__ ("" "wcsncpy") __attribute__ ((__nothrow__ , __leaf__))


                          ;
extern wchar_t *__wcsncpy_chk_warn (wchar_t *__restrict __dest, const wchar_t *__restrict __src, size_t __n, size_t __destlen) __asm__ ("" "__wcsncpy_chk") __attribute__ ((__nothrow__ , __leaf__))



     __attribute__((__warning__ ("wcsncpy called with length bigger than size of destination " "buffer")))
            ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) wchar_t *
__attribute__ ((__nothrow__ , __leaf__)) wcsncpy (wchar_t *__restrict __dest, const wchar_t *__restrict __src, size_t __n)

{
  return ((((__typeof (__n)) 0 < (__typeof (__n)) -1 || (__builtin_constant_p (__n) && (__n) > 0)) && __builtin_constant_p ((((long unsigned int) (__n)) <= (__builtin_object_size (__dest, 2 > 1)) / (sizeof (wchar_t)))) && (((long unsigned int) (__n)) <= (__builtin_object_size (__dest, 2 > 1)) / (sizeof (wchar_t)))) ? __wcsncpy_alias (__dest, __src, __n) : ((((__typeof (__n)) 0 < (__typeof (__n)) -1 || (__builtin_constant_p (__n) && (__n) > 0)) && __builtin_constant_p ((((long unsigned int) (__n)) <= (__builtin_object_size (__dest, 2 > 1)) / (sizeof (wchar_t)))) && !(((long unsigned int) (__n)) <= (__builtin_object_size (__dest, 2 > 1)) / (sizeof (wchar_t)))) ? __wcsncpy_chk_warn (__dest, __src, __n, (__builtin_object_size (__dest, 2 > 1)) / (sizeof (wchar_t))) : __wcsncpy_chk (__dest, __src, __n, (__builtin_object_size (__dest, 2 > 1)) / (sizeof (wchar_t)))))

                          ;
}


extern wchar_t *__wcpncpy_chk (wchar_t *__restrict __dest,
          const wchar_t *__restrict __src, size_t __n,
          size_t __destlen) __attribute__ ((__nothrow__ , __leaf__));
extern wchar_t *__wcpncpy_alias (wchar_t *__restrict __dest, const wchar_t *__restrict __src, size_t __n) __asm__ ("" "wcpncpy") __attribute__ ((__nothrow__ , __leaf__))


                          ;
extern wchar_t *__wcpncpy_chk_warn (wchar_t *__restrict __dest, const wchar_t *__restrict __src, size_t __n, size_t __destlen) __asm__ ("" "__wcpncpy_chk") __attribute__ ((__nothrow__ , __leaf__))



     __attribute__((__warning__ ("wcpncpy called with length bigger than size of destination " "buffer")))
            ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) wchar_t *
__attribute__ ((__nothrow__ , __leaf__)) wcpncpy (wchar_t *__restrict __dest, const wchar_t *__restrict __src, size_t __n)

{
  return ((((__typeof (__n)) 0 < (__typeof (__n)) -1 || (__builtin_constant_p (__n) && (__n) > 0)) && __builtin_constant_p ((((long unsigned int) (__n)) <= (__builtin_object_size (__dest, 2 > 1)) / (sizeof (wchar_t)))) && (((long unsigned int) (__n)) <= (__builtin_object_size (__dest, 2 > 1)) / (sizeof (wchar_t)))) ? __wcpncpy_alias (__dest, __src, __n) : ((((__typeof (__n)) 0 < (__typeof (__n)) -1 || (__builtin_constant_p (__n) && (__n) > 0)) && __builtin_constant_p ((((long unsigned int) (__n)) <= (__builtin_object_size (__dest, 2 > 1)) / (sizeof (wchar_t)))) && !(((long unsigned int) (__n)) <= (__builtin_object_size (__dest, 2 > 1)) / (sizeof (wchar_t)))) ? __wcpncpy_chk_warn (__dest, __src, __n, (__builtin_object_size (__dest, 2 > 1)) / (sizeof (wchar_t))) : __wcpncpy_chk (__dest, __src, __n, (__builtin_object_size (__dest, 2 > 1)) / (sizeof (wchar_t)))))

                          ;
}


extern wchar_t *__wcscat_chk (wchar_t *__restrict __dest,
         const wchar_t *__restrict __src,
         size_t __destlen) __attribute__ ((__nothrow__ , __leaf__));
extern wchar_t *__wcscat_alias (wchar_t *__restrict __dest, const wchar_t *__restrict __src) __asm__ ("" "wcscat") __attribute__ ((__nothrow__ , __leaf__))

                                              ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) wchar_t *
__attribute__ ((__nothrow__ , __leaf__)) wcscat (wchar_t *__restrict __dest, const wchar_t *__restrict __src)
{
  size_t sz = __builtin_object_size (__dest, 2 > 1);
  if (sz != (size_t) -1)
    return __wcscat_chk (__dest, __src, sz / sizeof (wchar_t));
  return __wcscat_alias (__dest, __src);
}


extern wchar_t *__wcsncat_chk (wchar_t *__restrict __dest,
          const wchar_t *__restrict __src,
          size_t __n, size_t __destlen) __attribute__ ((__nothrow__ , __leaf__));
extern wchar_t *__wcsncat_alias (wchar_t *__restrict __dest, const wchar_t *__restrict __src, size_t __n) __asm__ ("" "wcsncat") __attribute__ ((__nothrow__ , __leaf__))


                          ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) wchar_t *
__attribute__ ((__nothrow__ , __leaf__)) wcsncat (wchar_t *__restrict __dest, const wchar_t *__restrict __src, size_t __n)

{
  size_t sz = __builtin_object_size (__dest, 2 > 1);
  if (sz != (size_t) -1)
    return __wcsncat_chk (__dest, __src, __n, sz / sizeof (wchar_t));
  return __wcsncat_alias (__dest, __src, __n);
}


extern int __swprintf_chk (wchar_t *__restrict __s, size_t __n,
      int __flag, size_t __s_len,
      const wchar_t *__restrict __format, ...)
     __attribute__ ((__nothrow__ , __leaf__)) ;

extern int __swprintf_alias (wchar_t *__restrict __s, size_t __n, const wchar_t *__restrict __fmt, ...) __asm__ ("" "swprintf") __attribute__ ((__nothrow__ , __leaf__))


             ;


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__nothrow__ , __leaf__)) swprintf (wchar_t *__restrict __s, size_t __n, const wchar_t *__restrict __fmt, ...)

{
  size_t sz = __builtin_object_size (__s, 2 > 1);
  if (sz != (size_t) -1 || 2 > 1)
    return __swprintf_chk (__s, __n, 2 - 1,
      sz / sizeof (wchar_t), __fmt, __builtin_va_arg_pack ());
  return __swprintf_alias (__s, __n, __fmt, __builtin_va_arg_pack ());
}
# 261 "/usr/include/aarch64-linux-gnu/bits/wchar2.h" 3 4
extern int __vswprintf_chk (wchar_t *__restrict __s, size_t __n,
       int __flag, size_t __s_len,
       const wchar_t *__restrict __format,
       __gnuc_va_list __arg)
     __attribute__ ((__nothrow__ , __leaf__)) ;

extern int __vswprintf_alias (wchar_t *__restrict __s, size_t __n, const wchar_t *__restrict __fmt, __gnuc_va_list __ap) __asm__ ("" "vswprintf") __attribute__ ((__nothrow__ , __leaf__))


                                     ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__nothrow__ , __leaf__)) vswprintf (wchar_t *__restrict __s, size_t __n, const wchar_t *__restrict __fmt, __gnuc_va_list __ap)

{
  size_t sz = __builtin_object_size (__s, 2 > 1);
  if (sz != (size_t) -1 || 2 > 1)
    return __vswprintf_chk (__s, __n, 2 - 1,
       sz / sizeof (wchar_t), __fmt, __ap);
  return __vswprintf_alias (__s, __n, __fmt, __ap);
}




extern int __fwprintf_chk (__FILE *__restrict __stream, int __flag,
      const wchar_t *__restrict __format, ...);
extern int __wprintf_chk (int __flag, const wchar_t *__restrict __format,
     ...);
extern int __vfwprintf_chk (__FILE *__restrict __stream, int __flag,
       const wchar_t *__restrict __format,
       __gnuc_va_list __ap);
extern int __vwprintf_chk (int __flag, const wchar_t *__restrict __format,
      __gnuc_va_list __ap);


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
wprintf (const wchar_t *__restrict __fmt, ...)
{
  return __wprintf_chk (2 - 1, __fmt, __builtin_va_arg_pack ());
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
fwprintf (__FILE *__restrict __stream, const wchar_t *__restrict __fmt, ...)
{
  return __fwprintf_chk (__stream, 2 - 1, __fmt,
    __builtin_va_arg_pack ());
}







extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
vwprintf (const wchar_t *__restrict __fmt, __gnuc_va_list __ap)
{
  return __vwprintf_chk (2 - 1, __fmt, __ap);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
vfwprintf (__FILE *__restrict __stream,
    const wchar_t *__restrict __fmt, __gnuc_va_list __ap)
{
  return __vfwprintf_chk (__stream, 2 - 1, __fmt, __ap);
}



extern wchar_t *__fgetws_chk (wchar_t *__restrict __s, size_t __size, int __n,
         __FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
extern wchar_t *__fgetws_alias (wchar_t *__restrict __s, int __n, __FILE *__restrict __stream) __asm__ ("" "fgetws")

                                              __attribute__ ((__warn_unused_result__));
extern wchar_t *__fgetws_chk_warn (wchar_t *__restrict __s, size_t __size, int __n, __FILE *__restrict __stream) __asm__ ("" "__fgetws_chk")


     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("fgetws called with bigger size than length " "of destination buffer")))
                                 ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) wchar_t *
fgetws (wchar_t *__restrict __s, int __n, __FILE *__restrict __stream)
{
  size_t sz = __builtin_object_size (__s, 2 > 1);
  if ((((__typeof (__n)) 0 < (__typeof (__n)) -1 || (__builtin_constant_p (__n) && (__n) > 0)) && __builtin_constant_p ((((long unsigned int) (__n)) <= (sz) / (sizeof (wchar_t)))) && (((long unsigned int) (__n)) <= (sz) / (sizeof (wchar_t)))))
    return __fgetws_alias (__s, __n, __stream);
  if ((((__typeof (__n)) 0 < (__typeof (__n)) -1 || (__builtin_constant_p (__n) && (__n) > 0)) && __builtin_constant_p ((((long unsigned int) (__n)) <= (sz) / (sizeof (wchar_t)))) && !(((long unsigned int) (__n)) <= (sz) / (sizeof (wchar_t)))))
    return __fgetws_chk_warn (__s, sz / sizeof (wchar_t), __n, __stream);
  return __fgetws_chk (__s, sz / sizeof (wchar_t), __n, __stream);
}


extern wchar_t *__fgetws_unlocked_chk (wchar_t *__restrict __s, size_t __size,
           int __n, __FILE *__restrict __stream)
  __attribute__ ((__warn_unused_result__));
extern wchar_t *__fgetws_unlocked_alias (wchar_t *__restrict __s, int __n, __FILE *__restrict __stream) __asm__ ("" "fgetws_unlocked")


  __attribute__ ((__warn_unused_result__));
extern wchar_t *__fgetws_unlocked_chk_warn (wchar_t *__restrict __s, size_t __size, int __n, __FILE *__restrict __stream) __asm__ ("" "__fgetws_unlocked_chk")



     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("fgetws_unlocked called with bigger size than length " "of destination buffer")))
                                 ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) wchar_t *
fgetws_unlocked (wchar_t *__restrict __s, int __n, __FILE *__restrict __stream)
{
  size_t sz = __builtin_object_size (__s, 2 > 1);
  if ((((__typeof (__n)) 0 < (__typeof (__n)) -1 || (__builtin_constant_p (__n) && (__n) > 0)) && __builtin_constant_p ((((long unsigned int) (__n)) <= (sz) / (sizeof (wchar_t)))) && (((long unsigned int) (__n)) <= (sz) / (sizeof (wchar_t)))))
    return __fgetws_unlocked_alias (__s, __n, __stream);
  if ((((__typeof (__n)) 0 < (__typeof (__n)) -1 || (__builtin_constant_p (__n) && (__n) > 0)) && __builtin_constant_p ((((long unsigned int) (__n)) <= (sz) / (sizeof (wchar_t)))) && !(((long unsigned int) (__n)) <= (sz) / (sizeof (wchar_t)))))
    return __fgetws_unlocked_chk_warn (__s, sz / sizeof (wchar_t), __n,
           __stream);
  return __fgetws_unlocked_chk (__s, sz / sizeof (wchar_t), __n, __stream);
}



extern size_t __wcrtomb_chk (char *__restrict __s, wchar_t __wchar,
        mbstate_t *__restrict __p,
        size_t __buflen) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));
extern size_t __wcrtomb_alias (char *__restrict __s, wchar_t __wchar, mbstate_t *__restrict __ps) __asm__ ("" "wcrtomb") __attribute__ ((__nothrow__ , __leaf__))

                                                __attribute__ ((__warn_unused_result__));

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) size_t
__attribute__ ((__nothrow__ , __leaf__)) wcrtomb (char *__restrict __s, wchar_t __wchar, mbstate_t *__restrict __ps)

{







  if (__builtin_object_size (__s, 2 > 1) != (size_t) -1
      && 16 > __builtin_object_size (__s, 2 > 1))
    return __wcrtomb_chk (__s, __wchar, __ps, __builtin_object_size (__s, 2 > 1));
  return __wcrtomb_alias (__s, __wchar, __ps);
}


extern size_t __mbsrtowcs_chk (wchar_t *__restrict __dst,
          const char **__restrict __src,
          size_t __len, mbstate_t *__restrict __ps,
          size_t __dstlen) __attribute__ ((__nothrow__ , __leaf__));
extern size_t __mbsrtowcs_alias (wchar_t *__restrict __dst, const char **__restrict __src, size_t __len, mbstate_t *__restrict __ps) __asm__ ("" "mbsrtowcs") __attribute__ ((__nothrow__ , __leaf__))



                   ;
extern size_t __mbsrtowcs_chk_warn (wchar_t *__restrict __dst, const char **__restrict __src, size_t __len, mbstate_t *__restrict __ps, size_t __dstlen) __asm__ ("" "__mbsrtowcs_chk") __attribute__ ((__nothrow__ , __leaf__))




     __attribute__((__warning__ ("mbsrtowcs called with dst buffer smaller than len " "* sizeof (wchar_t)")))
                        ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) size_t
__attribute__ ((__nothrow__ , __leaf__)) mbsrtowcs (wchar_t *__restrict __dst, const char **__restrict __src, size_t __len, mbstate_t *__restrict __ps)

{
  return ((((__typeof (__len)) 0 < (__typeof (__len)) -1 || (__builtin_constant_p (__len) && (__len) > 0)) && __builtin_constant_p ((((long unsigned int) (__len)) <= (__builtin_object_size (__dst, 2 > 1)) / (sizeof (wchar_t)))) && (((long unsigned int) (__len)) <= (__builtin_object_size (__dst, 2 > 1)) / (sizeof (wchar_t)))) ? __mbsrtowcs_alias (__dst, __src, __len, __ps) : ((((__typeof (__len)) 0 < (__typeof (__len)) -1 || (__builtin_constant_p (__len) && (__len) > 0)) && __builtin_constant_p ((((long unsigned int) (__len)) <= (__builtin_object_size (__dst, 2 > 1)) / (sizeof (wchar_t)))) && !(((long unsigned int) (__len)) <= (__builtin_object_size (__dst, 2 > 1)) / (sizeof (wchar_t)))) ? __mbsrtowcs_chk_warn (__dst, __src, __len, __ps, (__builtin_object_size (__dst, 2 > 1)) / (sizeof (wchar_t))) : __mbsrtowcs_chk (__dst, __src, __len, __ps, (__builtin_object_size (__dst, 2 > 1)) / (sizeof (wchar_t)))))

                                 ;
}


extern size_t __wcsrtombs_chk (char *__restrict __dst,
          const wchar_t **__restrict __src,
          size_t __len, mbstate_t *__restrict __ps,
          size_t __dstlen) __attribute__ ((__nothrow__ , __leaf__));
extern size_t __wcsrtombs_alias (char *__restrict __dst, const wchar_t **__restrict __src, size_t __len, mbstate_t *__restrict __ps) __asm__ ("" "wcsrtombs") __attribute__ ((__nothrow__ , __leaf__))



                   ;
extern size_t __wcsrtombs_chk_warn (char *__restrict __dst, const wchar_t **__restrict __src, size_t __len, mbstate_t *__restrict __ps, size_t __dstlen) __asm__ ("" "__wcsrtombs_chk") __attribute__ ((__nothrow__ , __leaf__))




    __attribute__((__warning__ ("wcsrtombs called with dst buffer smaller than len")));

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) size_t
__attribute__ ((__nothrow__ , __leaf__)) wcsrtombs (char *__restrict __dst, const wchar_t **__restrict __src, size_t __len, mbstate_t *__restrict __ps)

{
  return ((((__typeof (__len)) 0 < (__typeof (__len)) -1 || (__builtin_constant_p (__len) && (__len) > 0)) && __builtin_constant_p ((((long unsigned int) (__len)) <= (__builtin_object_size (__dst, 2 > 1)) / (sizeof (char)))) && (((long unsigned int) (__len)) <= (__builtin_object_size (__dst, 2 > 1)) / (sizeof (char)))) ? __wcsrtombs_alias (__dst, __src, __len, __ps) : ((((__typeof (__len)) 0 < (__typeof (__len)) -1 || (__builtin_constant_p (__len) && (__len) > 0)) && __builtin_constant_p ((((long unsigned int) (__len)) <= (__builtin_object_size (__dst, 2 > 1)) / (sizeof (char)))) && !(((long unsigned int) (__len)) <= (__builtin_object_size (__dst, 2 > 1)) / (sizeof (char)))) ? __wcsrtombs_chk_warn (__dst, __src, __len, __ps, __builtin_object_size (__dst, 2 > 1)) : __wcsrtombs_chk (__dst, __src, __len, __ps, __builtin_object_size (__dst, 2 > 1))))

                               ;
}



extern size_t __mbsnrtowcs_chk (wchar_t *__restrict __dst,
    const char **__restrict __src, size_t __nmc,
    size_t __len, mbstate_t *__restrict __ps,
    size_t __dstlen) __attribute__ ((__nothrow__ , __leaf__));
extern size_t __mbsnrtowcs_alias (wchar_t *__restrict __dst, const char **__restrict __src, size_t __nmc, size_t __len, mbstate_t *__restrict __ps) __asm__ ("" "mbsnrtowcs") __attribute__ ((__nothrow__ , __leaf__))



                    ;
extern size_t __mbsnrtowcs_chk_warn (wchar_t *__restrict __dst, const char **__restrict __src, size_t __nmc, size_t __len, mbstate_t *__restrict __ps, size_t __dstlen) __asm__ ("" "__mbsnrtowcs_chk") __attribute__ ((__nothrow__ , __leaf__))




     __attribute__((__warning__ ("mbsnrtowcs called with dst buffer smaller than len " "* sizeof (wchar_t)")))
                        ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) size_t
__attribute__ ((__nothrow__ , __leaf__)) mbsnrtowcs (wchar_t *__restrict __dst, const char **__restrict __src, size_t __nmc, size_t __len, mbstate_t *__restrict __ps)

{
  return ((((__typeof (__len)) 0 < (__typeof (__len)) -1 || (__builtin_constant_p (__len) && (__len) > 0)) && __builtin_constant_p ((((long unsigned int) (__len)) <= (__builtin_object_size (__dst, 2 > 1)) / (sizeof (wchar_t)))) && (((long unsigned int) (__len)) <= (__builtin_object_size (__dst, 2 > 1)) / (sizeof (wchar_t)))) ? __mbsnrtowcs_alias (__dst, __src, __nmc, __len, __ps) : ((((__typeof (__len)) 0 < (__typeof (__len)) -1 || (__builtin_constant_p (__len) && (__len) > 0)) && __builtin_constant_p ((((long unsigned int) (__len)) <= (__builtin_object_size (__dst, 2 > 1)) / (sizeof (wchar_t)))) && !(((long unsigned int) (__len)) <= (__builtin_object_size (__dst, 2 > 1)) / (sizeof (wchar_t)))) ? __mbsnrtowcs_chk_warn (__dst, __src, __nmc, __len, __ps, (__builtin_object_size (__dst, 2 > 1)) / (sizeof (wchar_t))) : __mbsnrtowcs_chk (__dst, __src, __nmc, __len, __ps, (__builtin_object_size (__dst, 2 > 1)) / (sizeof (wchar_t)))))

                                        ;
}


extern size_t __wcsnrtombs_chk (char *__restrict __dst,
    const wchar_t **__restrict __src,
    size_t __nwc, size_t __len,
    mbstate_t *__restrict __ps, size_t __dstlen)
     __attribute__ ((__nothrow__ , __leaf__));
extern size_t __wcsnrtombs_alias (char *__restrict __dst, const wchar_t **__restrict __src, size_t __nwc, size_t __len, mbstate_t *__restrict __ps) __asm__ ("" "wcsnrtombs") __attribute__ ((__nothrow__ , __leaf__))



                                                  ;
extern size_t __wcsnrtombs_chk_warn (char *__restrict __dst, const wchar_t **__restrict __src, size_t __nwc, size_t __len, mbstate_t *__restrict __ps, size_t __dstlen) __asm__ ("" "__wcsnrtombs_chk") __attribute__ ((__nothrow__ , __leaf__))





     __attribute__((__warning__ ("wcsnrtombs called with dst buffer smaller than len")));

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) size_t
__attribute__ ((__nothrow__ , __leaf__)) wcsnrtombs (char *__restrict __dst, const wchar_t **__restrict __src, size_t __nwc, size_t __len, mbstate_t *__restrict __ps)

{
  return ((((__typeof (__len)) 0 < (__typeof (__len)) -1 || (__builtin_constant_p (__len) && (__len) > 0)) && __builtin_constant_p ((((long unsigned int) (__len)) <= (__builtin_object_size (__dst, 2 > 1)) / (sizeof (char)))) && (((long unsigned int) (__len)) <= (__builtin_object_size (__dst, 2 > 1)) / (sizeof (char)))) ? __wcsnrtombs_alias (__dst, __src, __nwc, __len, __ps) : ((((__typeof (__len)) 0 < (__typeof (__len)) -1 || (__builtin_constant_p (__len) && (__len) > 0)) && __builtin_constant_p ((((long unsigned int) (__len)) <= (__builtin_object_size (__dst, 2 > 1)) / (sizeof (char)))) && !(((long unsigned int) (__len)) <= (__builtin_object_size (__dst, 2 > 1)) / (sizeof (char)))) ? __wcsnrtombs_chk_warn (__dst, __src, __nwc, __len, __ps, __builtin_object_size (__dst, 2 > 1)) : __wcsnrtombs_chk (__dst, __src, __nwc, __len, __ps, __builtin_object_size (__dst, 2 > 1))))

                                      ;
}
# 868 "/usr/include/wchar.h" 2 3 4








# 239 "stress-ng.h" 2
# 281 "stress-ng.h"
# 1 "/usr/include/aarch64-linux-gnu/sys/file.h" 1 3 4
# 27 "/usr/include/aarch64-linux-gnu/sys/file.h" 3 4

# 50 "/usr/include/aarch64-linux-gnu/sys/file.h" 3 4
extern int flock (int __fd, int __operation) __attribute__ ((__nothrow__ , __leaf__));



# 282 "stress-ng.h" 2
# 1 "/usr/include/aarch64-linux-gnu/sys/mman.h" 1 3 4
# 25 "/usr/include/aarch64-linux-gnu/sys/mman.h" 3 4
# 1 "/usr/lib/gcc/aarch64-linux-gnu/11/include/stddef.h" 1 3 4
# 26 "/usr/include/aarch64-linux-gnu/sys/mman.h" 2 3 4
# 41 "/usr/include/aarch64-linux-gnu/sys/mman.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/mman.h" 1 3 4
# 29 "/usr/include/aarch64-linux-gnu/bits/mman.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/mman-map-flags-generic.h" 1 3 4
# 30 "/usr/include/aarch64-linux-gnu/bits/mman.h" 2 3 4


# 1 "/usr/include/aarch64-linux-gnu/bits/mman-linux.h" 1 3 4
# 117 "/usr/include/aarch64-linux-gnu/bits/mman-linux.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/mman-shared.h" 1 3 4
# 47 "/usr/include/aarch64-linux-gnu/bits/mman-shared.h" 3 4




int memfd_create (const char *__name, unsigned int __flags) __attribute__ ((__nothrow__ , __leaf__));



int mlock2 (const void *__addr, size_t __length, unsigned int __flags) __attribute__ ((__nothrow__ , __leaf__));





int pkey_alloc (unsigned int __flags, unsigned int __access_rights) __attribute__ ((__nothrow__ , __leaf__));



int pkey_set (int __key, unsigned int __access_rights) __attribute__ ((__nothrow__ , __leaf__));



int pkey_get (int __key) __attribute__ ((__nothrow__ , __leaf__));



int pkey_free (int __key) __attribute__ ((__nothrow__ , __leaf__));



int pkey_mprotect (void *__addr, size_t __len, int __prot, int __pkey) __attribute__ ((__nothrow__ , __leaf__));


# 118 "/usr/include/aarch64-linux-gnu/bits/mman-linux.h" 2 3 4
# 33 "/usr/include/aarch64-linux-gnu/bits/mman.h" 2 3 4
# 42 "/usr/include/aarch64-linux-gnu/sys/mman.h" 2 3 4





# 61 "/usr/include/aarch64-linux-gnu/sys/mman.h" 3 4
extern void * mmap (void *__addr, size_t __len, int __prot, int __flags, int __fd, __off64_t __offset) __asm__ ("" "mmap64") __attribute__ ((__nothrow__ , __leaf__))


                ;





extern void *mmap64 (void *__addr, size_t __len, int __prot,
       int __flags, int __fd, __off64_t __offset) __attribute__ ((__nothrow__ , __leaf__));




extern int munmap (void *__addr, size_t __len) __attribute__ ((__nothrow__ , __leaf__));




extern int mprotect (void *__addr, size_t __len, int __prot) __attribute__ ((__nothrow__ , __leaf__));







extern int msync (void *__addr, size_t __len, int __flags);




extern int madvise (void *__addr, size_t __len, int __advice) __attribute__ ((__nothrow__ , __leaf__));



extern int posix_madvise (void *__addr, size_t __len, int __advice) __attribute__ ((__nothrow__ , __leaf__));




extern int mlock (const void *__addr, size_t __len) __attribute__ ((__nothrow__ , __leaf__));


extern int munlock (const void *__addr, size_t __len) __attribute__ ((__nothrow__ , __leaf__));




extern int mlockall (int __flags) __attribute__ ((__nothrow__ , __leaf__));



extern int munlockall (void) __attribute__ ((__nothrow__ , __leaf__));







extern int mincore (void *__start, size_t __len, unsigned char *__vec)
     __attribute__ ((__nothrow__ , __leaf__));
# 133 "/usr/include/aarch64-linux-gnu/sys/mman.h" 3 4
extern void *mremap (void *__addr, size_t __old_len, size_t __new_len,
       int __flags, ...) __attribute__ ((__nothrow__ , __leaf__));



extern int remap_file_pages (void *__start, size_t __size, int __prot,
        size_t __pgoff, int __flags) __attribute__ ((__nothrow__ , __leaf__));




extern int shm_open (const char *__name, int __oflag, mode_t __mode);


extern int shm_unlink (const char *__name);


# 283 "stress-ng.h" 2
# 1 "/usr/include/aarch64-linux-gnu/sys/resource.h" 1 3 4
# 24 "/usr/include/aarch64-linux-gnu/sys/resource.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/resource.h" 1 3 4
# 31 "/usr/include/aarch64-linux-gnu/bits/resource.h" 3 4
enum __rlimit_resource
{

  RLIMIT_CPU = 0,



  RLIMIT_FSIZE = 1,



  RLIMIT_DATA = 2,



  RLIMIT_STACK = 3,



  RLIMIT_CORE = 4,






  __RLIMIT_RSS = 5,



  RLIMIT_NOFILE = 7,
  __RLIMIT_OFILE = RLIMIT_NOFILE,




  RLIMIT_AS = 9,



  __RLIMIT_NPROC = 6,



  __RLIMIT_MEMLOCK = 8,



  __RLIMIT_LOCKS = 10,



  __RLIMIT_SIGPENDING = 11,



  __RLIMIT_MSGQUEUE = 12,





  __RLIMIT_NICE = 13,




  __RLIMIT_RTPRIO = 14,





  __RLIMIT_RTTIME = 15,


  __RLIMIT_NLIMITS = 16,
  __RLIM_NLIMITS = __RLIMIT_NLIMITS


};
# 133 "/usr/include/aarch64-linux-gnu/bits/resource.h" 3 4
typedef __rlim64_t rlim_t;


typedef __rlim64_t rlim64_t;


struct rlimit
  {

    rlim_t rlim_cur;

    rlim_t rlim_max;
  };


struct rlimit64
  {

    rlim64_t rlim_cur;

    rlim64_t rlim_max;
 };



enum __rusage_who
{

  RUSAGE_SELF = 0,



  RUSAGE_CHILDREN = -1



  ,

  RUSAGE_THREAD = 1




};


# 1 "/usr/include/aarch64-linux-gnu/bits/types/struct_rusage.h" 1 3 4
# 33 "/usr/include/aarch64-linux-gnu/bits/types/struct_rusage.h" 3 4
struct rusage
  {

    struct timeval ru_utime;

    struct timeval ru_stime;

    __extension__ union
      {
 long int ru_maxrss;
 __syscall_slong_t __ru_maxrss_word;
      };


    __extension__ union
      {
 long int ru_ixrss;
 __syscall_slong_t __ru_ixrss_word;
      };

    __extension__ union
      {
 long int ru_idrss;
 __syscall_slong_t __ru_idrss_word;
      };

    __extension__ union
      {
 long int ru_isrss;
  __syscall_slong_t __ru_isrss_word;
      };


    __extension__ union
      {
 long int ru_minflt;
 __syscall_slong_t __ru_minflt_word;
      };

    __extension__ union
      {
 long int ru_majflt;
 __syscall_slong_t __ru_majflt_word;
      };

    __extension__ union
      {
 long int ru_nswap;
 __syscall_slong_t __ru_nswap_word;
      };


    __extension__ union
      {
 long int ru_inblock;
 __syscall_slong_t __ru_inblock_word;
      };

    __extension__ union
      {
 long int ru_oublock;
 __syscall_slong_t __ru_oublock_word;
      };

    __extension__ union
      {
 long int ru_msgsnd;
 __syscall_slong_t __ru_msgsnd_word;
      };

    __extension__ union
      {
 long int ru_msgrcv;
 __syscall_slong_t __ru_msgrcv_word;
      };

    __extension__ union
      {
 long int ru_nsignals;
 __syscall_slong_t __ru_nsignals_word;
      };



    __extension__ union
      {
 long int ru_nvcsw;
 __syscall_slong_t __ru_nvcsw_word;
      };


    __extension__ union
      {
 long int ru_nivcsw;
 __syscall_slong_t __ru_nivcsw_word;
      };
  };
# 180 "/usr/include/aarch64-linux-gnu/bits/resource.h" 2 3 4







enum __priority_which
{
  PRIO_PROCESS = 0,

  PRIO_PGRP = 1,

  PRIO_USER = 2

};



# 208 "/usr/include/aarch64-linux-gnu/bits/resource.h" 3 4
extern int prlimit (__pid_t __pid, enum __rlimit_resource __resource, const struct rlimit *__new_limit, struct rlimit *__old_limit) __asm__ ("" "prlimit64") __attribute__ ((__nothrow__ , __leaf__))


                                                ;





extern int prlimit64 (__pid_t __pid, enum __rlimit_resource __resource,
        const struct rlimit64 *__new_limit,
        struct rlimit64 *__old_limit) __attribute__ ((__nothrow__ , __leaf__));




# 25 "/usr/include/aarch64-linux-gnu/sys/resource.h" 2 3 4













typedef enum __rlimit_resource __rlimit_resource_t;
typedef enum __rusage_who __rusage_who_t;
typedef enum __priority_which __priority_which_t;
# 54 "/usr/include/aarch64-linux-gnu/sys/resource.h" 3 4
extern int getrlimit (__rlimit_resource_t __resource, struct rlimit *__rlimits) __asm__ ("" "getrlimit64") __attribute__ ((__nothrow__ , __leaf__))

           __attribute__ ((__nonnull__ (2)));





extern int getrlimit64 (__rlimit_resource_t __resource,
   struct rlimit64 *__rlimits) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));
# 74 "/usr/include/aarch64-linux-gnu/sys/resource.h" 3 4
extern int setrlimit (__rlimit_resource_t __resource, const struct rlimit *__rlimits) __asm__ ("" "setrlimit64") __attribute__ ((__nothrow__ , __leaf__))

                   __attribute__ ((__nonnull__ (2)));





extern int setrlimit64 (__rlimit_resource_t __resource,
   const struct rlimit64 *__rlimits) __attribute__ ((__nothrow__ , __leaf__))
   __attribute__ ((__nonnull__ (2)));




extern int getrusage (__rusage_who_t __who, struct rusage *__usage) __attribute__ ((__nothrow__ , __leaf__));
# 105 "/usr/include/aarch64-linux-gnu/sys/resource.h" 3 4
extern int getpriority (__priority_which_t __which, id_t __who) __attribute__ ((__nothrow__ , __leaf__));



extern int setpriority (__priority_which_t __which, id_t __who, int __prio)
     __attribute__ ((__nothrow__ , __leaf__));


# 284 "stress-ng.h" 2

# 1 "/usr/include/aarch64-linux-gnu/sys/stat.h" 1 3 4
# 99 "/usr/include/aarch64-linux-gnu/sys/stat.h" 3 4


# 1 "/usr/include/aarch64-linux-gnu/bits/stat.h" 1 3 4
# 102 "/usr/include/aarch64-linux-gnu/sys/stat.h" 2 3 4
# 227 "/usr/include/aarch64-linux-gnu/sys/stat.h" 3 4
extern int stat (const char *__restrict __file, struct stat *__restrict __buf) __asm__ ("" "stat64") __attribute__ ((__nothrow__ , __leaf__))

     __attribute__ ((__nonnull__ (1, 2)));
extern int fstat (int __fd, struct stat *__buf) __asm__ ("" "fstat64") __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__nonnull__ (2)));
# 240 "/usr/include/aarch64-linux-gnu/sys/stat.h" 3 4
extern int stat64 (const char *__restrict __file,
     struct stat64 *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int fstat64 (int __fd, struct stat64 *__buf) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));
# 279 "/usr/include/aarch64-linux-gnu/sys/stat.h" 3 4
extern int fstatat (int __fd, const char *__restrict __file, struct stat *__restrict __buf, int __flag) __asm__ ("" "fstatat64") __attribute__ ((__nothrow__ , __leaf__))


                 __attribute__ ((__nonnull__ (2, 3)));
# 291 "/usr/include/aarch64-linux-gnu/sys/stat.h" 3 4
extern int fstatat64 (int __fd, const char *__restrict __file,
        struct stat64 *__restrict __buf, int __flag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));
# 327 "/usr/include/aarch64-linux-gnu/sys/stat.h" 3 4
extern int lstat (const char *__restrict __file, struct stat *__restrict __buf) __asm__ ("" "lstat64") __attribute__ ((__nothrow__ , __leaf__))


     __attribute__ ((__nonnull__ (1, 2)));







extern int lstat64 (const char *__restrict __file,
      struct stat64 *__restrict __buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
# 352 "/usr/include/aarch64-linux-gnu/sys/stat.h" 3 4
extern int chmod (const char *__file, __mode_t __mode)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int lchmod (const char *__file, __mode_t __mode)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));




extern int fchmod (int __fd, __mode_t __mode) __attribute__ ((__nothrow__ , __leaf__));





extern int fchmodat (int __fd, const char *__file, __mode_t __mode,
       int __flag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2))) __attribute__ ((__warn_unused_result__));






extern __mode_t umask (__mode_t __mask) __attribute__ ((__nothrow__ , __leaf__));




extern __mode_t getumask (void) __attribute__ ((__nothrow__ , __leaf__));



extern int mkdir (const char *__path, __mode_t __mode)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int mkdirat (int __fd, const char *__path, __mode_t __mode)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));






extern int mknod (const char *__path, __mode_t __mode, __dev_t __dev)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int mknodat (int __fd, const char *__path, __mode_t __mode,
      __dev_t __dev) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));





extern int mkfifo (const char *__path, __mode_t __mode)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int mkfifoat (int __fd, const char *__path, __mode_t __mode)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));






extern int utimensat (int __fd, const char *__path,
        const struct timespec __times[2],
        int __flags)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));
# 452 "/usr/include/aarch64-linux-gnu/sys/stat.h" 3 4
extern int futimens (int __fd, const struct timespec __times[2]) __attribute__ ((__nothrow__ , __leaf__));
# 465 "/usr/include/aarch64-linux-gnu/sys/stat.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/statx.h" 1 3 4
# 31 "/usr/include/aarch64-linux-gnu/bits/statx.h" 3 4
# 1 "/usr/include/linux/stat.h" 1 3 4
# 56 "/usr/include/linux/stat.h" 3 4
struct statx_timestamp {
 __s64 tv_sec;
 __u32 tv_nsec;
 __s32 __reserved;
};
# 99 "/usr/include/linux/stat.h" 3 4
struct statx {

 __u32 stx_mask;
 __u32 stx_blksize;
 __u64 stx_attributes;

 __u32 stx_nlink;
 __u32 stx_uid;
 __u32 stx_gid;
 __u16 stx_mode;
 __u16 __spare0[1];

 __u64 stx_ino;
 __u64 stx_size;
 __u64 stx_blocks;
 __u64 stx_attributes_mask;

 struct statx_timestamp stx_atime;
 struct statx_timestamp stx_btime;
 struct statx_timestamp stx_ctime;
 struct statx_timestamp stx_mtime;

 __u32 stx_rdev_major;
 __u32 stx_rdev_minor;
 __u32 stx_dev_major;
 __u32 stx_dev_minor;

 __u64 stx_mnt_id;
 __u64 __spare2;

 __u64 __spare3[12];

};
# 32 "/usr/include/aarch64-linux-gnu/bits/statx.h" 2 3 4







# 1 "/usr/include/aarch64-linux-gnu/bits/statx-generic.h" 1 3 4
# 25 "/usr/include/aarch64-linux-gnu/bits/statx-generic.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/types/struct_statx_timestamp.h" 1 3 4
# 26 "/usr/include/aarch64-linux-gnu/bits/statx-generic.h" 2 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/types/struct_statx.h" 1 3 4
# 27 "/usr/include/aarch64-linux-gnu/bits/statx-generic.h" 2 3 4
# 57 "/usr/include/aarch64-linux-gnu/bits/statx-generic.h" 3 4



int statx (int __dirfd, const char *__restrict __path, int __flags,
           unsigned int __mask, struct statx *__restrict __buf)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 5)));


# 40 "/usr/include/aarch64-linux-gnu/bits/statx.h" 2 3 4
# 466 "/usr/include/aarch64-linux-gnu/sys/stat.h" 2 3 4



# 286 "stress-ng.h" 2

# 1 "/usr/include/aarch64-linux-gnu/sys/times.h" 1 3 4
# 29 "/usr/include/aarch64-linux-gnu/sys/times.h" 3 4



struct tms
  {
    clock_t tms_utime;
    clock_t tms_stime;

    clock_t tms_cutime;
    clock_t tms_cstime;
  };






extern clock_t times (struct tms *__buffer) __attribute__ ((__nothrow__ , __leaf__));


# 288 "stress-ng.h" 2

# 1 "/usr/include/aarch64-linux-gnu/sys/wait.h" 1 3 4
# 27 "/usr/include/aarch64-linux-gnu/sys/wait.h" 3 4

# 74 "/usr/include/aarch64-linux-gnu/sys/wait.h" 3 4
typedef enum
{
  P_ALL,
  P_PID,
  P_PGID
} idtype_t;
# 88 "/usr/include/aarch64-linux-gnu/sys/wait.h" 3 4
extern __pid_t wait (int *__stat_loc);
# 111 "/usr/include/aarch64-linux-gnu/sys/wait.h" 3 4
extern __pid_t waitpid (__pid_t __pid, int *__stat_loc, int __options);
# 132 "/usr/include/aarch64-linux-gnu/sys/wait.h" 3 4
extern int waitid (idtype_t __idtype, __id_t __id, siginfo_t *__infop,
     int __options);






struct rusage;







extern __pid_t wait3 (int *__stat_loc, int __options,
        struct rusage * __usage) __attribute__ ((__nothrow__));
# 164 "/usr/include/aarch64-linux-gnu/sys/wait.h" 3 4
extern __pid_t wait4 (__pid_t __pid, int *__stat_loc, int __options,
        struct rusage *__usage) __attribute__ ((__nothrow__));
# 178 "/usr/include/aarch64-linux-gnu/sys/wait.h" 3 4

# 290 "stress-ng.h" 2






# 1 "/usr/include/aarch64-linux-gnu/sys/auxv.h" 1 3 4
# 24 "/usr/include/aarch64-linux-gnu/sys/auxv.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/hwcap.h" 1 3 4
# 25 "/usr/include/aarch64-linux-gnu/sys/auxv.h" 2 3 4






extern unsigned long int getauxval (unsigned long int __type)
  __attribute__ ((__nothrow__ , __leaf__));


# 297 "stress-ng.h" 2







# 1 "/usr/include/aarch64-linux-gnu/sys/epoll.h" 1 3 4
# 28 "/usr/include/aarch64-linux-gnu/sys/epoll.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/epoll.h" 1 3 4
# 23 "/usr/include/aarch64-linux-gnu/bits/epoll.h" 3 4
enum
  {
    EPOLL_CLOEXEC = 02000000

  };
# 29 "/usr/include/aarch64-linux-gnu/sys/epoll.h" 2 3 4






enum EPOLL_EVENTS
  {
    EPOLLIN = 0x001,

    EPOLLPRI = 0x002,

    EPOLLOUT = 0x004,

    EPOLLRDNORM = 0x040,

    EPOLLRDBAND = 0x080,

    EPOLLWRNORM = 0x100,

    EPOLLWRBAND = 0x200,

    EPOLLMSG = 0x400,

    EPOLLERR = 0x008,

    EPOLLHUP = 0x010,

    EPOLLRDHUP = 0x2000,

    EPOLLEXCLUSIVE = 1u << 28,

    EPOLLWAKEUP = 1u << 29,

    EPOLLONESHOT = 1u << 30,

    EPOLLET = 1u << 31

  };
# 76 "/usr/include/aarch64-linux-gnu/sys/epoll.h" 3 4
typedef union epoll_data
{
  void *ptr;
  int fd;
  uint32_t u32;
  uint64_t u64;
} epoll_data_t;

struct epoll_event
{
  uint32_t events;
  epoll_data_t data;
} ;








extern int epoll_create (int __size) __attribute__ ((__nothrow__ , __leaf__));



extern int epoll_create1 (int __flags) __attribute__ ((__nothrow__ , __leaf__));
# 110 "/usr/include/aarch64-linux-gnu/sys/epoll.h" 3 4
extern int epoll_ctl (int __epfd, int __op, int __fd,
        struct epoll_event *__event) __attribute__ ((__nothrow__ , __leaf__));
# 124 "/usr/include/aarch64-linux-gnu/sys/epoll.h" 3 4
extern int epoll_wait (int __epfd, struct epoll_event *__events,
         int __maxevents, int __timeout);







extern int epoll_pwait (int __epfd, struct epoll_event *__events,
   int __maxevents, int __timeout,
   const __sigset_t *__ss);






extern int epoll_pwait2 (int __epfd, struct epoll_event *__events,
    int __maxevents, const struct timespec *__timeout,
    const __sigset_t *__ss);
# 157 "/usr/include/aarch64-linux-gnu/sys/epoll.h" 3 4

# 305 "stress-ng.h" 2



# 1 "/usr/include/aarch64-linux-gnu/sys/eventfd.h" 1 3 4
# 24 "/usr/include/aarch64-linux-gnu/sys/eventfd.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/eventfd.h" 1 3 4
# 23 "/usr/include/aarch64-linux-gnu/bits/eventfd.h" 3 4
enum
  {
    EFD_SEMAPHORE = 00000001,

    EFD_CLOEXEC = 02000000,

    EFD_NONBLOCK = 00004000

  };
# 25 "/usr/include/aarch64-linux-gnu/sys/eventfd.h" 2 3 4


typedef uint64_t eventfd_t;






extern int eventfd (unsigned int __count, int __flags) __attribute__ ((__nothrow__ , __leaf__));


extern int eventfd_read (int __fd, eventfd_t *__value);


extern int eventfd_write (int __fd, eventfd_t __value);


# 309 "stress-ng.h" 2



# 1 "/usr/include/aarch64-linux-gnu/sys/fanotify.h" 1 3 4
# 22 "/usr/include/aarch64-linux-gnu/sys/fanotify.h" 3 4
# 1 "/usr/include/linux/fanotify.h" 1 3 4
# 114 "/usr/include/linux/fanotify.h" 3 4
struct fanotify_event_metadata {
 __u32 event_len;
 __u8 vers;
 __u8 reserved;
 __u16 metadata_len;
 __u64 __attribute__((aligned(8))) mask;
 __s32 fd;
 __s32 pid;
};







struct fanotify_event_info_header {
 __u8 info_type;
 __u8 pad;
 __u16 len;
};
# 143 "/usr/include/linux/fanotify.h" 3 4
struct fanotify_event_info_fid {
 struct fanotify_event_info_header hdr;
 __kernel_fsid_t fsid;




 unsigned char handle[0];
};





struct fanotify_event_info_pidfd {
 struct fanotify_event_info_header hdr;
 __s32 pidfd;
};

struct fanotify_response {
 __s32 fd;
 __u32 response;
};
# 23 "/usr/include/aarch64-linux-gnu/sys/fanotify.h" 2 3 4





extern int fanotify_init (unsigned int __flags, unsigned int __event_f_flags)
  __attribute__ ((__nothrow__ , __leaf__));


extern int fanotify_mark (int __fanotify_fd, unsigned int __flags,
     uint64_t __mask, int __dfd, const char *__pathname)
     __attribute__ ((__nothrow__ , __leaf__));


# 313 "stress-ng.h" 2



# 1 "/usr/include/aarch64-linux-gnu/sys/fsuid.h" 1 3 4
# 24 "/usr/include/aarch64-linux-gnu/sys/fsuid.h" 3 4




extern int setfsuid (__uid_t __uid) __attribute__ ((__nothrow__ , __leaf__));


extern int setfsgid (__gid_t __gid) __attribute__ ((__nothrow__ , __leaf__));


# 317 "stress-ng.h" 2







# 1 "/usr/include/aarch64-linux-gnu/sys/ipc.h" 1 3 4
# 24 "/usr/include/aarch64-linux-gnu/sys/ipc.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/ipctypes.h" 1 3 4
# 32 "/usr/include/aarch64-linux-gnu/bits/ipctypes.h" 3 4
typedef int __ipc_pid_t;
# 25 "/usr/include/aarch64-linux-gnu/sys/ipc.h" 2 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/ipc.h" 1 3 4
# 40 "/usr/include/aarch64-linux-gnu/bits/ipc.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/ipc-perm.h" 1 3 4
# 28 "/usr/include/aarch64-linux-gnu/bits/ipc-perm.h" 3 4
struct ipc_perm
{
  __key_t __key;
  __uid_t uid;
  __gid_t gid;
  __uid_t cuid;
  __gid_t cgid;
  __mode_t mode;
  unsigned short int __seq;
  unsigned short int __pad2;
  __syscall_ulong_t __glibc_reserved1;
  __syscall_ulong_t __glibc_reserved2;
};
# 41 "/usr/include/aarch64-linux-gnu/bits/ipc.h" 2 3 4
# 26 "/usr/include/aarch64-linux-gnu/sys/ipc.h" 2 3 4
# 47 "/usr/include/aarch64-linux-gnu/sys/ipc.h" 3 4



extern key_t ftok (const char *__pathname, int __proj_id) __attribute__ ((__nothrow__ , __leaf__));


# 325 "stress-ng.h" 2



# 1 "/usr/include/aarch64-linux-gnu/sys/inotify.h" 1 3 4
# 24 "/usr/include/aarch64-linux-gnu/sys/inotify.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/inotify.h" 1 3 4
# 23 "/usr/include/aarch64-linux-gnu/bits/inotify.h" 3 4
enum
  {
    IN_CLOEXEC = 02000000,

    IN_NONBLOCK = 00004000

  };
# 25 "/usr/include/aarch64-linux-gnu/sys/inotify.h" 2 3 4



struct inotify_event
{
  int wd;
  uint32_t mask;
  uint32_t cookie;
  uint32_t len;
  char name [];
};
# 82 "/usr/include/aarch64-linux-gnu/sys/inotify.h" 3 4



extern int inotify_init (void) __attribute__ ((__nothrow__ , __leaf__));


extern int inotify_init1 (int __flags) __attribute__ ((__nothrow__ , __leaf__));



extern int inotify_add_watch (int __fd, const char *__name, uint32_t __mask)
  __attribute__ ((__nothrow__ , __leaf__));


extern int inotify_rm_watch (int __fd, int __wd) __attribute__ ((__nothrow__ , __leaf__));


# 329 "stress-ng.h" 2



# 1 "/usr/include/aarch64-linux-gnu/sys/mount.h" 1 3 4
# 33 "/usr/include/aarch64-linux-gnu/sys/mount.h" 3 4
enum
{
  MS_RDONLY = 1,

  MS_NOSUID = 2,

  MS_NODEV = 4,

  MS_NOEXEC = 8,

  MS_SYNCHRONOUS = 16,

  MS_REMOUNT = 32,

  MS_MANDLOCK = 64,

  MS_DIRSYNC = 128,

  MS_NOSYMFOLLOW = 256,

  MS_NOATIME = 1024,

  MS_NODIRATIME = 2048,

  MS_BIND = 4096,

  MS_MOVE = 8192,

  MS_REC = 16384,

  MS_SILENT = 32768,

  MS_POSIXACL = 1 << 16,

  MS_UNBINDABLE = 1 << 17,

  MS_PRIVATE = 1 << 18,

  MS_SLAVE = 1 << 19,

  MS_SHARED = 1 << 20,

  MS_RELATIME = 1 << 21,

  MS_KERNMOUNT = 1 << 22,

  MS_I_VERSION = 1 << 23,

  MS_STRICTATIME = 1 << 24,

  MS_LAZYTIME = 1 << 25,

  MS_ACTIVE = 1 << 30,

  MS_NOUSER = 1 << 31

};
# 124 "/usr/include/aarch64-linux-gnu/sys/mount.h" 3 4
enum
{
  MNT_FORCE = 1,

  MNT_DETACH = 2,

  MNT_EXPIRE = 4,

  UMOUNT_NOFOLLOW = 8

};





extern int mount (const char *__special_file, const char *__dir,
    const char *__fstype, unsigned long int __rwflag,
    const void *__data) __attribute__ ((__nothrow__ , __leaf__));


extern int umount (const char *__special_file) __attribute__ ((__nothrow__ , __leaf__));


extern int umount2 (const char *__special_file, int __flags) __attribute__ ((__nothrow__ , __leaf__));


# 333 "stress-ng.h" 2



# 1 "/usr/include/aarch64-linux-gnu/sys/msg.h" 1 3 4
# 24 "/usr/include/aarch64-linux-gnu/sys/msg.h" 3 4
# 1 "/usr/lib/gcc/aarch64-linux-gnu/11/include/stddef.h" 1 3 4
# 25 "/usr/include/aarch64-linux-gnu/sys/msg.h" 2 3 4





# 1 "/usr/include/aarch64-linux-gnu/bits/msq.h" 1 3 4
# 25 "/usr/include/aarch64-linux-gnu/bits/msq.h" 3 4
typedef __syscall_ulong_t msgqnum_t;
typedef __syscall_ulong_t msglen_t;

# 1 "/usr/include/aarch64-linux-gnu/bits/types/struct_msqid_ds.h" 1 3 4
# 27 "/usr/include/aarch64-linux-gnu/bits/types/struct_msqid_ds.h" 3 4
struct msqid_ds
{



  struct ipc_perm msg_perm;
# 41 "/usr/include/aarch64-linux-gnu/bits/types/struct_msqid_ds.h" 3 4
  __time_t msg_stime;
  __time_t msg_rtime;
  __time_t msg_ctime;

  __syscall_ulong_t __msg_cbytes;
  msgqnum_t msg_qnum;
  msglen_t msg_qbytes;
  __pid_t msg_lspid;
  __pid_t msg_lrpid;
  __syscall_ulong_t __glibc_reserved4;
  __syscall_ulong_t __glibc_reserved5;

};
# 29 "/usr/include/aarch64-linux-gnu/bits/msq.h" 2 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/types/struct_msqid64_ds.h" 1 3 4
# 30 "/usr/include/aarch64-linux-gnu/bits/msq.h" 2 3 4
# 48 "/usr/include/aarch64-linux-gnu/bits/msq.h" 3 4
struct msginfo
  {
    int msgpool;
    int msgmap;
    int msgmax;
    int msgmnb;
    int msgmni;
    int msgssz;
    int msgtql;
    unsigned short int msgseg;
  };
# 31 "/usr/include/aarch64-linux-gnu/sys/msg.h" 2 3 4
# 50 "/usr/include/aarch64-linux-gnu/sys/msg.h" 3 4
struct msgbuf
  {
    __syscall_slong_t mtype;
    char mtext[1];
  };







extern int msgctl (int __msqid, int __cmd, struct msqid_ds *__buf) __attribute__ ((__nothrow__ , __leaf__));
# 74 "/usr/include/aarch64-linux-gnu/sys/msg.h" 3 4
extern int msgget (key_t __key, int __msgflg) __attribute__ ((__nothrow__ , __leaf__));





extern ssize_t msgrcv (int __msqid, void *__msgp, size_t __msgsz,
         long int __msgtyp, int __msgflg);





extern int msgsnd (int __msqid, const void *__msgp, size_t __msgsz,
     int __msgflg);


# 337 "stress-ng.h" 2



# 1 "/usr/include/aarch64-linux-gnu/sys/param.h" 1 3 4
# 23 "/usr/include/aarch64-linux-gnu/sys/param.h" 3 4
# 1 "/usr/lib/gcc/aarch64-linux-gnu/11/include/stddef.h" 1 3 4
# 24 "/usr/include/aarch64-linux-gnu/sys/param.h" 2 3 4


# 1 "/usr/lib/gcc/aarch64-linux-gnu/11/include/limits.h" 1 3 4
# 27 "/usr/include/aarch64-linux-gnu/sys/param.h" 2 3 4




# 1 "/usr/include/aarch64-linux-gnu/bits/param.h" 1 3 4
# 28 "/usr/include/aarch64-linux-gnu/bits/param.h" 3 4
# 1 "/usr/include/linux/param.h" 1 3 4




# 1 "/usr/include/aarch64-linux-gnu/asm/param.h" 1 3 4
# 22 "/usr/include/aarch64-linux-gnu/asm/param.h" 3 4
# 1 "/usr/include/asm-generic/param.h" 1 3 4
# 23 "/usr/include/aarch64-linux-gnu/asm/param.h" 2 3 4
# 6 "/usr/include/linux/param.h" 2 3 4
# 29 "/usr/include/aarch64-linux-gnu/bits/param.h" 2 3 4
# 32 "/usr/include/aarch64-linux-gnu/sys/param.h" 2 3 4
# 341 "stress-ng.h" 2



# 1 "/usr/include/aarch64-linux-gnu/sys/personality.h" 1 3 4
# 27 "/usr/include/aarch64-linux-gnu/sys/personality.h" 3 4
enum
  {
    UNAME26 = 0x0020000,
    ADDR_NO_RANDOMIZE = 0x0040000,
    FDPIC_FUNCPTRS = 0x0080000,
    MMAP_PAGE_ZERO = 0x0100000,
    ADDR_COMPAT_LAYOUT = 0x0200000,
    READ_IMPLIES_EXEC = 0x0400000,
    ADDR_LIMIT_32BIT = 0x0800000,
    SHORT_INODE = 0x1000000,
    WHOLE_SECONDS = 0x2000000,
    STICKY_TIMEOUTS = 0x4000000,
    ADDR_LIMIT_3GB = 0x8000000
  };





enum
  {
    PER_LINUX = 0x0000,
    PER_LINUX_32BIT = 0x0000 | ADDR_LIMIT_32BIT,
    PER_LINUX_FDPIC = 0x0000 | FDPIC_FUNCPTRS,
    PER_SVR4 = 0x0001 | STICKY_TIMEOUTS | MMAP_PAGE_ZERO,
    PER_SVR3 = 0x0002 | STICKY_TIMEOUTS | SHORT_INODE,
    PER_SCOSVR3 = 0x0003 | STICKY_TIMEOUTS | WHOLE_SECONDS | SHORT_INODE,
    PER_OSR5 = 0x0003 | STICKY_TIMEOUTS | WHOLE_SECONDS,
    PER_WYSEV386 = 0x0004 | STICKY_TIMEOUTS | SHORT_INODE,
    PER_ISCR4 = 0x0005 | STICKY_TIMEOUTS,
    PER_BSD = 0x0006,
    PER_SUNOS = 0x0006 | STICKY_TIMEOUTS,
    PER_XENIX = 0x0007 | STICKY_TIMEOUTS | SHORT_INODE,
    PER_LINUX32 = 0x0008,
    PER_LINUX32_3GB = 0x0008 | ADDR_LIMIT_3GB,
    PER_IRIX32 = 0x0009 | STICKY_TIMEOUTS,
    PER_IRIXN32 = 0x000a | STICKY_TIMEOUTS,
    PER_IRIX64 = 0x000b | STICKY_TIMEOUTS,
    PER_RISCOS = 0x000c,
    PER_SOLARIS = 0x000d | STICKY_TIMEOUTS,
    PER_UW7 = 0x000e | STICKY_TIMEOUTS | MMAP_PAGE_ZERO,
    PER_OSF4 = 0x000f,
    PER_HPUX = 0x0010,
    PER_MASK = 0x00ff,
  };




extern int personality (unsigned long int __persona) __attribute__ ((__nothrow__ , __leaf__));


# 345 "stress-ng.h" 2



# 1 "/usr/include/aarch64-linux-gnu/sys/prctl.h" 1 3 4
# 22 "/usr/include/aarch64-linux-gnu/sys/prctl.h" 3 4
# 1 "/usr/include/linux/prctl.h" 1 3 4
# 134 "/usr/include/linux/prctl.h" 3 4
struct prctl_mm_map {
 __u64 start_code;
 __u64 end_code;
 __u64 start_data;
 __u64 end_data;
 __u64 start_brk;
 __u64 brk;
 __u64 start_stack;
 __u64 arg_start;
 __u64 arg_end;
 __u64 env_start;
 __u64 env_end;
 __u64 *auxv;
 __u32 auxv_size;
 __u32 exe_fd;
};
# 23 "/usr/include/aarch64-linux-gnu/sys/prctl.h" 2 3 4
# 38 "/usr/include/aarch64-linux-gnu/sys/prctl.h" 3 4




extern int prctl (int __option, ...) __attribute__ ((__nothrow__ , __leaf__));
# 53 "/usr/include/aarch64-linux-gnu/sys/prctl.h" 3 4

# 349 "stress-ng.h" 2







# 1 "/usr/include/aarch64-linux-gnu/sys/ptrace.h" 1 3 4
# 26 "/usr/include/aarch64-linux-gnu/sys/ptrace.h" 3 4

# 64 "/usr/include/aarch64-linux-gnu/sys/ptrace.h" 3 4
enum __ptrace_request
{



  PTRACE_TRACEME = 0,



  PTRACE_PEEKTEXT = 1,



  PTRACE_PEEKDATA = 2,



  PTRACE_PEEKUSER = 3,



  PTRACE_POKETEXT = 4,



  PTRACE_POKEDATA = 5,



  PTRACE_POKEUSER = 6,



  PTRACE_CONT = 7,



  PTRACE_KILL = 8,



  PTRACE_SINGLESTEP = 9,



  PTRACE_ATTACH = 16,



  PTRACE_DETACH = 17,



  PTRACE_SYSCALL = 24,



  PTRACE_SYSEMU = 31,



  PTRACE_SYSEMU_SINGLESTEP = 32,



  PTRACE_PEEKMTETAGS = 33,



  PTRACE_POKEMTETAGS = 34,



  PTRACE_SETOPTIONS = 0x4200,



  PTRACE_GETEVENTMSG = 0x4201,



  PTRACE_GETSIGINFO = 0x4202,



  PTRACE_SETSIGINFO = 0x4203,



  PTRACE_GETREGSET = 0x4204,



  PTRACE_SETREGSET = 0x4205,




  PTRACE_SEIZE = 0x4206,



  PTRACE_INTERRUPT = 0x4207,



  PTRACE_LISTEN = 0x4208,



  PTRACE_PEEKSIGINFO = 0x4209,



  PTRACE_GETSIGMASK = 0x420a,



  PTRACE_SETSIGMASK = 0x420b,



  PTRACE_SECCOMP_GET_FILTER = 0x420c,



  PTRACE_SECCOMP_GET_METADATA = 0x420d,



  PTRACE_GET_SYSCALL_INFO = 0x420e,



  PTRACE_GET_RSEQ_CONFIGURATION = 0x420f

};


# 1 "/usr/include/aarch64-linux-gnu/bits/ptrace-shared.h" 1 3 4
# 26 "/usr/include/aarch64-linux-gnu/bits/ptrace-shared.h" 3 4
enum __ptrace_setoptions
{
  PTRACE_O_TRACESYSGOOD = 0x00000001,
  PTRACE_O_TRACEFORK = 0x00000002,
  PTRACE_O_TRACEVFORK = 0x00000004,
  PTRACE_O_TRACECLONE = 0x00000008,
  PTRACE_O_TRACEEXEC = 0x00000010,
  PTRACE_O_TRACEVFORKDONE = 0x00000020,
  PTRACE_O_TRACEEXIT = 0x00000040,
  PTRACE_O_TRACESECCOMP = 0x00000080,
  PTRACE_O_EXITKILL = 0x00100000,
  PTRACE_O_SUSPEND_SECCOMP = 0x00200000,
  PTRACE_O_MASK = 0x003000ff
};

enum __ptrace_eventcodes
{

  PTRACE_EVENT_FORK = 1,
  PTRACE_EVENT_VFORK = 2,
  PTRACE_EVENT_CLONE = 3,
  PTRACE_EVENT_EXEC = 4,
  PTRACE_EVENT_VFORK_DONE = 5,
  PTRACE_EVENT_EXIT = 6,
  PTRACE_EVENT_SECCOMP = 7,

  PTRACE_EVENT_STOP = 128
};


enum __ptrace_get_syscall_info_op
{
  PTRACE_SYSCALL_INFO_NONE = 0,
  PTRACE_SYSCALL_INFO_ENTRY = 1,
  PTRACE_SYSCALL_INFO_EXIT = 2,
  PTRACE_SYSCALL_INFO_SECCOMP = 3
};


struct __ptrace_peeksiginfo_args
{
  __uint64_t off;
  __uint32_t flags;
  __int32_t nr;
};

enum __ptrace_peeksiginfo_flags
{

  PTRACE_PEEKSIGINFO_SHARED = (1 << 0)
};


struct __ptrace_seccomp_metadata
{
  __uint64_t filter_off;
  __uint64_t flags;
};


struct __ptrace_syscall_info
{
  __uint8_t op;


  __uint32_t arch __attribute__ ((__aligned__ (4)));

  __uint64_t instruction_pointer;
  __uint64_t stack_pointer;
  union
  {


    struct
    {
      __uint64_t nr;
      __uint64_t args[6];
    } entry;


    struct
    {
      __int64_t rval;
      __uint8_t is_error;
    } exit;



    struct
    {
      __uint64_t nr;
      __uint64_t args[6];
      __uint32_t ret_data;
    } seccomp;
  };
};


struct __ptrace_rseq_configuration
{
  __uint64_t rseq_abi_pointer;
  __uint32_t rseq_abi_size;
  __uint32_t signature;
  __uint32_t flags;
  __uint32_t pad;
};
# 142 "/usr/include/aarch64-linux-gnu/bits/ptrace-shared.h" 3 4
extern long int ptrace (enum __ptrace_request __request, ...) __attribute__ ((__nothrow__ , __leaf__));
# 204 "/usr/include/aarch64-linux-gnu/sys/ptrace.h" 2 3 4


# 357 "stress-ng.h" 2



# 1 "/usr/include/aarch64-linux-gnu/sys/quota.h" 1 3 4
# 57 "/usr/include/aarch64-linux-gnu/sys/quota.h" 3 4
# 1 "/usr/include/linux/quota.h" 1 3 4
# 90 "/usr/include/linux/quota.h" 3 4
enum {
 QIF_BLIMITS_B = 0,
 QIF_SPACE_B,
 QIF_ILIMITS_B,
 QIF_INODES_B,
 QIF_BTIME_B,
 QIF_ITIME_B,
};
# 110 "/usr/include/linux/quota.h" 3 4
struct if_dqblk {
 __u64 dqb_bhardlimit;
 __u64 dqb_bsoftlimit;
 __u64 dqb_curspace;
 __u64 dqb_ihardlimit;
 __u64 dqb_isoftlimit;
 __u64 dqb_curinodes;
 __u64 dqb_btime;
 __u64 dqb_itime;
 __u32 dqb_valid;
};

struct if_nextdqblk {
 __u64 dqb_bhardlimit;
 __u64 dqb_bsoftlimit;
 __u64 dqb_curspace;
 __u64 dqb_ihardlimit;
 __u64 dqb_isoftlimit;
 __u64 dqb_curinodes;
 __u64 dqb_btime;
 __u64 dqb_itime;
 __u32 dqb_valid;
 __u32 dqb_id;
};
# 144 "/usr/include/linux/quota.h" 3 4
enum {
 DQF_ROOT_SQUASH_B = 0,
 DQF_SYS_FILE_B = 16,

 DQF_PRIVATE
};






struct if_dqinfo {
 __u64 dqi_bgrace;
 __u64 dqi_igrace;
 __u32 dqi_flags;
 __u32 dqi_valid;
};
# 178 "/usr/include/linux/quota.h" 3 4
enum {
 QUOTA_NL_C_UNSPEC,
 QUOTA_NL_C_WARNING,
 __QUOTA_NL_C_MAX,
};


enum {
 QUOTA_NL_A_UNSPEC,
 QUOTA_NL_A_QTYPE,
 QUOTA_NL_A_EXCESS_ID,
 QUOTA_NL_A_WARNING,
 QUOTA_NL_A_DEV_MAJOR,
 QUOTA_NL_A_DEV_MINOR,
 QUOTA_NL_A_CAUSED_ID,
 QUOTA_NL_A_PAD,
 __QUOTA_NL_A_MAX,
};
# 58 "/usr/include/aarch64-linux-gnu/sys/quota.h" 2 3 4
# 91 "/usr/include/aarch64-linux-gnu/sys/quota.h" 3 4
struct dqblk
  {
    __uint64_t dqb_bhardlimit;
    __uint64_t dqb_bsoftlimit;
    __uint64_t dqb_curspace;
    __uint64_t dqb_ihardlimit;
    __uint64_t dqb_isoftlimit;
    __uint64_t dqb_curinodes;
    __uint64_t dqb_btime;
    __uint64_t dqb_itime;
    __uint32_t dqb_valid;
  };
# 120 "/usr/include/aarch64-linux-gnu/sys/quota.h" 3 4
struct dqinfo
  {
    __uint64_t dqi_bgrace;
    __uint64_t dqi_igrace;
    __uint32_t dqi_flags;
    __uint32_t dqi_valid;
  };



extern int quotactl (int __cmd, const char *__special, int __id,
       __caddr_t __addr) __attribute__ ((__nothrow__ , __leaf__));


# 361 "stress-ng.h" 2
# 372 "stress-ng.h"
# 1 "/usr/include/aarch64-linux-gnu/sys/sem.h" 1 3 4
# 24 "/usr/include/aarch64-linux-gnu/sys/sem.h" 3 4
# 1 "/usr/lib/gcc/aarch64-linux-gnu/11/include/stddef.h" 1 3 4
# 25 "/usr/include/aarch64-linux-gnu/sys/sem.h" 2 3 4





# 1 "/usr/include/aarch64-linux-gnu/bits/sem.h" 1 3 4
# 23 "/usr/include/aarch64-linux-gnu/bits/sem.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/timesize.h" 1 3 4
# 24 "/usr/include/aarch64-linux-gnu/bits/sem.h" 2 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/types/struct_semid_ds.h" 1 3 4
# 24 "/usr/include/aarch64-linux-gnu/bits/types/struct_semid_ds.h" 3 4
struct semid_ds
{



  struct ipc_perm sem_perm;






  __time_t sem_otime;
  __time_t sem_ctime;

  __syscall_ulong_t sem_nsems;
  __syscall_ulong_t __glibc_reserved3;
  __syscall_ulong_t __glibc_reserved4;

};
# 25 "/usr/include/aarch64-linux-gnu/bits/sem.h" 2 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/types/struct_semid64_ds.h" 1 3 4
# 26 "/usr/include/aarch64-linux-gnu/bits/sem.h" 2 3 4
# 62 "/usr/include/aarch64-linux-gnu/bits/sem.h" 3 4
struct seminfo
{
  int semmap;
  int semmni;
  int semmns;
  int semmnu;
  int semmsl;
  int semopm;
  int semume;
  int semusz;
  int semvmx;
  int semaem;
};
# 31 "/usr/include/aarch64-linux-gnu/sys/sem.h" 2 3 4
# 40 "/usr/include/aarch64-linux-gnu/sys/sem.h" 3 4
struct sembuf
{
  unsigned short int sem_num;
  short int sem_op;
  short int sem_flg;
};






extern int semctl (int __semid, int __semnum, int __cmd, ...) __attribute__ ((__nothrow__ , __leaf__));
# 64 "/usr/include/aarch64-linux-gnu/sys/sem.h" 3 4
extern int semget (key_t __key, int __nsems, int __semflg) __attribute__ ((__nothrow__ , __leaf__));


extern int semop (int __semid, struct sembuf *__sops, size_t __nsops) __attribute__ ((__nothrow__ , __leaf__));




extern int semtimedop (int __semid, struct sembuf *__sops, size_t __nsops,
         const struct timespec *__timeout) __attribute__ ((__nothrow__ , __leaf__));
# 86 "/usr/include/aarch64-linux-gnu/sys/sem.h" 3 4

# 373 "stress-ng.h" 2



# 1 "/usr/include/aarch64-linux-gnu/sys/sendfile.h" 1 3 4
# 25 "/usr/include/aarch64-linux-gnu/sys/sendfile.h" 3 4

# 37 "/usr/include/aarch64-linux-gnu/sys/sendfile.h" 3 4
extern ssize_t sendfile (int __out_fd, int __in_fd, __off64_t *__offset, size_t __count) __asm__ ("" "sendfile64") __attribute__ ((__nothrow__ , __leaf__))

                                ;





extern ssize_t sendfile64 (int __out_fd, int __in_fd, __off64_t *__offset,
      size_t __count) __attribute__ ((__nothrow__ , __leaf__));



# 377 "stress-ng.h" 2



# 1 "/usr/include/aarch64-linux-gnu/sys/shm.h" 1 3 4
# 24 "/usr/include/aarch64-linux-gnu/sys/shm.h" 3 4
# 1 "/usr/lib/gcc/aarch64-linux-gnu/11/include/stddef.h" 1 3 4
# 25 "/usr/include/aarch64-linux-gnu/sys/shm.h" 2 3 4





# 1 "/usr/include/aarch64-linux-gnu/bits/shm.h" 1 3 4
# 23 "/usr/include/aarch64-linux-gnu/bits/shm.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/wordsize.h" 1 3 4
# 24 "/usr/include/aarch64-linux-gnu/bits/shm.h" 2 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/shmlba.h" 1 3 4
# 23 "/usr/include/aarch64-linux-gnu/bits/shmlba.h" 3 4




extern int __getpagesize (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


# 25 "/usr/include/aarch64-linux-gnu/bits/shm.h" 2 3 4
# 40 "/usr/include/aarch64-linux-gnu/bits/shm.h" 3 4



typedef __syscall_ulong_t shmatt_t;

# 1 "/usr/include/aarch64-linux-gnu/bits/types/struct_shmid_ds.h" 1 3 4
# 24 "/usr/include/aarch64-linux-gnu/bits/types/struct_shmid_ds.h" 3 4
struct shmid_ds
  {



    struct ipc_perm shm_perm;
    size_t shm_segsz;
# 39 "/usr/include/aarch64-linux-gnu/bits/types/struct_shmid_ds.h" 3 4
    __time_t shm_atime;
    __time_t shm_dtime;
    __time_t shm_ctime;

    __pid_t shm_cpid;
    __pid_t shm_lpid;
    shmatt_t shm_nattch;
    __syscall_ulong_t __glibc_reserved5;
    __syscall_ulong_t __glibc_reserved6;

  };
# 46 "/usr/include/aarch64-linux-gnu/bits/shm.h" 2 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/types/struct_shmid64_ds.h" 1 3 4
# 47 "/usr/include/aarch64-linux-gnu/bits/shm.h" 2 3 4
# 61 "/usr/include/aarch64-linux-gnu/bits/shm.h" 3 4
struct shminfo
  {
    __syscall_ulong_t shmmax;
    __syscall_ulong_t shmmin;
    __syscall_ulong_t shmmni;
    __syscall_ulong_t shmseg;
    __syscall_ulong_t shmall;
    __syscall_ulong_t __glibc_reserved1;
    __syscall_ulong_t __glibc_reserved2;
    __syscall_ulong_t __glibc_reserved3;
    __syscall_ulong_t __glibc_reserved4;
  };

struct shm_info
  {
    int used_ids;
    __syscall_ulong_t shm_tot;
    __syscall_ulong_t shm_rss;
    __syscall_ulong_t shm_swp;
    __syscall_ulong_t swap_attempts;
    __syscall_ulong_t swap_successes;
  };




# 31 "/usr/include/aarch64-linux-gnu/sys/shm.h" 2 3 4
# 43 "/usr/include/aarch64-linux-gnu/sys/shm.h" 3 4







extern int shmctl (int __shmid, int __cmd, struct shmid_ds *__buf) __attribute__ ((__nothrow__ , __leaf__));
# 62 "/usr/include/aarch64-linux-gnu/sys/shm.h" 3 4
extern int shmget (key_t __key, size_t __size, int __shmflg) __attribute__ ((__nothrow__ , __leaf__));


extern void *shmat (int __shmid, const void *__shmaddr, int __shmflg)
     __attribute__ ((__nothrow__ , __leaf__));


extern int shmdt (const void *__shmaddr) __attribute__ ((__nothrow__ , __leaf__));


# 381 "stress-ng.h" 2



# 1 "/usr/include/aarch64-linux-gnu/sys/signalfd.h" 1 3 4
# 25 "/usr/include/aarch64-linux-gnu/sys/signalfd.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/signalfd.h" 1 3 4
# 23 "/usr/include/aarch64-linux-gnu/bits/signalfd.h" 3 4
enum
  {
    SFD_CLOEXEC = 02000000,

    SFD_NONBLOCK = 00004000

  };
# 26 "/usr/include/aarch64-linux-gnu/sys/signalfd.h" 2 3 4

struct signalfd_siginfo
{
  uint32_t ssi_signo;
  int32_t ssi_errno;
  int32_t ssi_code;
  uint32_t ssi_pid;
  uint32_t ssi_uid;
  int32_t ssi_fd;
  uint32_t ssi_tid;
  uint32_t ssi_band;
  uint32_t ssi_overrun;
  uint32_t ssi_trapno;
  int32_t ssi_status;
  int32_t ssi_int;
  uint64_t ssi_ptr;
  uint64_t ssi_utime;
  uint64_t ssi_stime;
  uint64_t ssi_addr;
  uint16_t ssi_addr_lsb;
  uint16_t __pad2;
  int32_t ssi_syscall;
  uint64_t ssi_call_addr;
  uint32_t ssi_arch;
  uint8_t __pad[28];
};





extern int signalfd (int __fd, const sigset_t *__mask, int __flags)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));


# 385 "stress-ng.h" 2



# 1 "/usr/include/aarch64-linux-gnu/sys/statfs.h" 1 3 4
# 25 "/usr/include/aarch64-linux-gnu/sys/statfs.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/statfs.h" 1 3 4
# 24 "/usr/include/aarch64-linux-gnu/bits/statfs.h" 3 4
struct statfs
  {
    __fsword_t f_type;
    __fsword_t f_bsize;







    __fsblkcnt64_t f_blocks;
    __fsblkcnt64_t f_bfree;
    __fsblkcnt64_t f_bavail;
    __fsfilcnt64_t f_files;
    __fsfilcnt64_t f_ffree;

    __fsid_t f_fsid;
    __fsword_t f_namelen;
    __fsword_t f_frsize;
    __fsword_t f_flags;
    __fsword_t f_spare[4];
  };


struct statfs64
  {
    __fsword_t f_type;
    __fsword_t f_bsize;
    __fsblkcnt64_t f_blocks;
    __fsblkcnt64_t f_bfree;
    __fsblkcnt64_t f_bavail;
    __fsfilcnt64_t f_files;
    __fsfilcnt64_t f_ffree;
    __fsid_t f_fsid;
    __fsword_t f_namelen;
    __fsword_t f_frsize;
    __fsword_t f_flags;
    __fsword_t f_spare[4];
  };
# 26 "/usr/include/aarch64-linux-gnu/sys/statfs.h" 2 3 4









extern int statfs (const char *__file, struct statfs *__buf) __asm__ ("" "statfs64") __attribute__ ((__nothrow__ , __leaf__))

                __attribute__ ((__nonnull__ (1, 2)));





extern int statfs64 (const char *__file, struct statfs64 *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
# 54 "/usr/include/aarch64-linux-gnu/sys/statfs.h" 3 4
extern int fstatfs (int __fildes, struct statfs *__buf) __asm__ ("" "fstatfs64") __attribute__ ((__nothrow__ , __leaf__))
                 __attribute__ ((__nonnull__ (2)));





extern int fstatfs64 (int __fildes, struct statfs64 *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



# 389 "stress-ng.h" 2



# 1 "/usr/include/aarch64-linux-gnu/sys/statvfs.h" 1 3 4
# 25 "/usr/include/aarch64-linux-gnu/sys/statvfs.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/statvfs.h" 1 3 4
# 29 "/usr/include/aarch64-linux-gnu/bits/statvfs.h" 3 4
struct statvfs
  {
    unsigned long int f_bsize;
    unsigned long int f_frsize;
# 41 "/usr/include/aarch64-linux-gnu/bits/statvfs.h" 3 4
    __fsblkcnt64_t f_blocks;
    __fsblkcnt64_t f_bfree;
    __fsblkcnt64_t f_bavail;
    __fsfilcnt64_t f_files;
    __fsfilcnt64_t f_ffree;
    __fsfilcnt64_t f_favail;

    unsigned long int f_fsid;



    unsigned long int f_flag;
    unsigned long int f_namemax;
    int __f_spare[6];
  };


struct statvfs64
  {
    unsigned long int f_bsize;
    unsigned long int f_frsize;
    __fsblkcnt64_t f_blocks;
    __fsblkcnt64_t f_bfree;
    __fsblkcnt64_t f_bavail;
    __fsfilcnt64_t f_files;
    __fsfilcnt64_t f_ffree;
    __fsfilcnt64_t f_favail;
    unsigned long int f_fsid;



    unsigned long int f_flag;
    unsigned long int f_namemax;
    int __f_spare[6];
  };




enum
{
  ST_RDONLY = 1,

  ST_NOSUID = 2


  ,
  ST_NODEV = 4,

  ST_NOEXEC = 8,

  ST_SYNCHRONOUS = 16,

  ST_MANDLOCK = 64,

  ST_WRITE = 128,

  ST_APPEND = 256,

  ST_IMMUTABLE = 512,

  ST_NOATIME = 1024,

  ST_NODIRATIME = 2048,

  ST_RELATIME = 4096


};
# 26 "/usr/include/aarch64-linux-gnu/sys/statvfs.h" 2 3 4
# 47 "/usr/include/aarch64-linux-gnu/sys/statvfs.h" 3 4

# 56 "/usr/include/aarch64-linux-gnu/sys/statvfs.h" 3 4
extern int statvfs (const char *__restrict __file, struct statvfs *__restrict __buf) __asm__ ("" "statvfs64") __attribute__ ((__nothrow__ , __leaf__))


     __attribute__ ((__nonnull__ (1, 2)));





extern int statvfs64 (const char *__restrict __file,
        struct statvfs64 *__restrict __buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
# 77 "/usr/include/aarch64-linux-gnu/sys/statvfs.h" 3 4
extern int fstatvfs (int __fildes, struct statvfs *__buf) __asm__ ("" "fstatvfs64") __attribute__ ((__nothrow__ , __leaf__))
                  __attribute__ ((__nonnull__ (2)));





extern int fstatvfs64 (int __fildes, struct statvfs64 *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



# 393 "stress-ng.h" 2







# 1 "/usr/include/aarch64-linux-gnu/sys/swap.h" 1 3 4
# 32 "/usr/include/aarch64-linux-gnu/sys/swap.h" 3 4




extern int swapon (const char *__path, int __flags) __attribute__ ((__nothrow__ , __leaf__));


extern int swapoff (const char *__path) __attribute__ ((__nothrow__ , __leaf__));


# 401 "stress-ng.h" 2



# 1 "/usr/include/aarch64-linux-gnu/sys/syscall.h" 1 3 4
# 24 "/usr/include/aarch64-linux-gnu/sys/syscall.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/asm/unistd.h" 1 3 4
# 25 "/usr/include/aarch64-linux-gnu/asm/unistd.h" 3 4
# 1 "/usr/include/asm-generic/unistd.h" 1 3 4
# 34 "/usr/include/asm-generic/unistd.h" 3 4























































































































































































































































































































































































































































































































































































































































































# 707 "/usr/include/asm-generic/unistd.h" 3 4










































































# 826 "/usr/include/asm-generic/unistd.h" 3 4
























































# 26 "/usr/include/aarch64-linux-gnu/asm/unistd.h" 2 3 4
# 25 "/usr/include/aarch64-linux-gnu/sys/syscall.h" 2 3 4




# 1 "/usr/include/aarch64-linux-gnu/bits/syscall.h" 1 3 4
# 30 "/usr/include/aarch64-linux-gnu/sys/syscall.h" 2 3 4
# 405 "stress-ng.h" 2



# 1 "/usr/include/aarch64-linux-gnu/sys/sysinfo.h" 1 3 4
# 24 "/usr/include/aarch64-linux-gnu/sys/sysinfo.h" 3 4
# 1 "/usr/include/linux/kernel.h" 1 3 4




# 1 "/usr/include/linux/sysinfo.h" 1 3 4







struct sysinfo {
 __kernel_long_t uptime;
 __kernel_ulong_t loads[3];
 __kernel_ulong_t totalram;
 __kernel_ulong_t freeram;
 __kernel_ulong_t sharedram;
 __kernel_ulong_t bufferram;
 __kernel_ulong_t totalswap;
 __kernel_ulong_t freeswap;
 __u16 procs;
 __u16 pad;
 __kernel_ulong_t totalhigh;
 __kernel_ulong_t freehigh;
 __u32 mem_unit;
 char _f[20-2*sizeof(__kernel_ulong_t)-sizeof(__u32)];
};
# 6 "/usr/include/linux/kernel.h" 2 3 4
# 1 "/usr/include/linux/const.h" 1 3 4
# 7 "/usr/include/linux/kernel.h" 2 3 4
# 25 "/usr/include/aarch64-linux-gnu/sys/sysinfo.h" 2 3 4




extern int sysinfo (struct sysinfo *__info) __attribute__ ((__nothrow__ , __leaf__));



extern int get_nprocs_conf (void) __attribute__ ((__nothrow__ , __leaf__));


extern int get_nprocs (void) __attribute__ ((__nothrow__ , __leaf__));



extern long int get_phys_pages (void) __attribute__ ((__nothrow__ , __leaf__));


extern long int get_avphys_pages (void) __attribute__ ((__nothrow__ , __leaf__));


# 409 "stress-ng.h" 2
# 417 "stress-ng.h"
# 1 "/usr/include/aarch64-linux-gnu/sys/sysmacros.h" 1 3 4
# 24 "/usr/include/aarch64-linux-gnu/sys/sysmacros.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/sysmacros.h" 1 3 4
# 25 "/usr/include/aarch64-linux-gnu/sys/sysmacros.h" 2 3 4
# 33 "/usr/include/aarch64-linux-gnu/sys/sysmacros.h" 3 4


extern unsigned int gnu_dev_major (__dev_t __dev) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
extern unsigned int gnu_dev_minor (__dev_t __dev) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
extern __dev_t gnu_dev_makedev (unsigned int __major, unsigned int __minor) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



__extension__ extern __inline __attribute__ ((__gnu_inline__)) __attribute__ ((__const__)) unsigned int __attribute__ ((__nothrow__ , __leaf__)) gnu_dev_major (__dev_t __dev) { unsigned int __major; __major = ((__dev & (__dev_t) 0x00000000000fff00u) >> 8); __major |= ((__dev & (__dev_t) 0xfffff00000000000u) >> 32); return __major; }
__extension__ extern __inline __attribute__ ((__gnu_inline__)) __attribute__ ((__const__)) unsigned int __attribute__ ((__nothrow__ , __leaf__)) gnu_dev_minor (__dev_t __dev) { unsigned int __minor; __minor = ((__dev & (__dev_t) 0x00000000000000ffu) >> 0); __minor |= ((__dev & (__dev_t) 0x00000ffffff00000u) >> 12); return __minor; }
__extension__ extern __inline __attribute__ ((__gnu_inline__)) __attribute__ ((__const__)) __dev_t __attribute__ ((__nothrow__ , __leaf__)) gnu_dev_makedev (unsigned int __major, unsigned int __minor) { __dev_t __dev; __dev = (((__dev_t) (__major & 0x00000fffu)) << 8); __dev |= (((__dev_t) (__major & 0xfffff000u)) << 32); __dev |= (((__dev_t) (__minor & 0x000000ffu)) << 0); __dev |= (((__dev_t) (__minor & 0xffffff00u)) << 12); return __dev; }




# 418 "stress-ng.h" 2



# 1 "/usr/include/aarch64-linux-gnu/sys/timex.h" 1 3 4
# 30 "/usr/include/aarch64-linux-gnu/sys/timex.h" 3 4
struct ntptimeval
{
  struct timeval time;
  long int maxerror;
  long int esterror;
  long int tai;

  long int __glibc_reserved1;
  long int __glibc_reserved2;
  long int __glibc_reserved3;
  long int __glibc_reserved4;
};
# 55 "/usr/include/aarch64-linux-gnu/sys/timex.h" 3 4



extern int adjtimex (struct timex *__ntx) __attribute__ ((__nothrow__ , __leaf__));
extern int ntp_gettimex (struct ntptimeval *__ntv) __attribute__ ((__nothrow__ , __leaf__));


extern int ntp_gettime (struct ntptimeval *__ntv) __asm__ ("" "ntp_gettimex") __attribute__ ((__nothrow__ , __leaf__))
                                        ;



extern int ntp_adjtime (struct timex *__tntx) __attribute__ ((__nothrow__ , __leaf__));
# 86 "/usr/include/aarch64-linux-gnu/sys/timex.h" 3 4

# 422 "stress-ng.h" 2



# 1 "/usr/include/aarch64-linux-gnu/sys/timerfd.h" 1 3 4
# 25 "/usr/include/aarch64-linux-gnu/sys/timerfd.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/timerfd.h" 1 3 4
# 23 "/usr/include/aarch64-linux-gnu/bits/timerfd.h" 3 4
enum
  {
    TFD_CLOEXEC = 02000000,

    TFD_NONBLOCK = 00004000

  };
# 26 "/usr/include/aarch64-linux-gnu/sys/timerfd.h" 2 3 4



enum
  {
    TFD_TIMER_ABSTIME = 1 << 0,

    TFD_TIMER_CANCEL_ON_SET = 1 << 1

  };





extern int timerfd_create (__clockid_t __clock_id, int __flags) __attribute__ ((__nothrow__ , __leaf__));




extern int timerfd_settime (int __ufd, int __flags,
       const struct itimerspec *__utmr,
       struct itimerspec *__otmr) __attribute__ ((__nothrow__ , __leaf__));
# 63 "/usr/include/aarch64-linux-gnu/sys/timerfd.h" 3 4
extern int timerfd_gettime (int __ufd, struct itimerspec *__otmr) __attribute__ ((__nothrow__ , __leaf__));
# 75 "/usr/include/aarch64-linux-gnu/sys/timerfd.h" 3 4

# 426 "stress-ng.h" 2







# 1 "/usr/include/aarch64-linux-gnu/sys/uio.h" 1 3 4
# 31 "/usr/include/aarch64-linux-gnu/sys/uio.h" 3 4

# 41 "/usr/include/aarch64-linux-gnu/sys/uio.h" 3 4
extern ssize_t readv (int __fd, const struct iovec *__iovec, int __count)
  __attribute__ ((__warn_unused_result__)) __attribute__ ((__access__ (__read_only__, 2, 3)));
# 52 "/usr/include/aarch64-linux-gnu/sys/uio.h" 3 4
extern ssize_t writev (int __fd, const struct iovec *__iovec, int __count)
  __attribute__ ((__warn_unused_result__)) __attribute__ ((__access__ (__read_only__, 2, 3)));
# 86 "/usr/include/aarch64-linux-gnu/sys/uio.h" 3 4
extern ssize_t preadv (int __fd, const struct iovec *__iovec, int __count, __off64_t __offset) __asm__ ("" "preadv64")


  __attribute__ ((__warn_unused_result__)) __attribute__ ((__access__ (__read_only__, 2, 3)));
extern ssize_t pwritev (int __fd, const struct iovec *__iovec, int __count, __off64_t __offset) __asm__ ("" "pwritev64")


  __attribute__ ((__warn_unused_result__)) __attribute__ ((__access__ (__read_only__, 2, 3)));
# 110 "/usr/include/aarch64-linux-gnu/sys/uio.h" 3 4
extern ssize_t preadv64 (int __fd, const struct iovec *__iovec, int __count,
    __off64_t __offset)
  __attribute__ ((__warn_unused_result__)) __attribute__ ((__access__ (__read_only__, 2, 3)));
# 123 "/usr/include/aarch64-linux-gnu/sys/uio.h" 3 4
extern ssize_t pwritev64 (int __fd, const struct iovec *__iovec, int __count,
     __off64_t __offset)
  __attribute__ ((__warn_unused_result__)) __attribute__ ((__access__ (__read_only__, 2, 3)));
# 143 "/usr/include/aarch64-linux-gnu/sys/uio.h" 3 4
extern ssize_t pwritev2 (int __fd, const struct iovec *__iovec, int __count, __off64_t __offset, int __flags) __asm__ ("" "pwritev64v2")



  __attribute__ ((__warn_unused_result__)) __attribute__ ((__access__ (__read_only__, 2, 3)));
extern ssize_t preadv2 (int __fd, const struct iovec *__iovec, int __count, __off64_t __offset, int __flags) __asm__ ("" "preadv64v2")



  __attribute__ ((__warn_unused_result__)) __attribute__ ((__access__ (__read_only__, 2, 3)));
# 161 "/usr/include/aarch64-linux-gnu/sys/uio.h" 3 4
extern ssize_t preadv64v2 (int __fp, const struct iovec *__iovec,
      int __count, __off64_t __offset,
      int ___flags)
  __attribute__ ((__warn_unused_result__)) __attribute__ ((__access__ (__read_only__, 2, 3)));


extern ssize_t pwritev64v2 (int __fd, const struct iovec *__iodev,
       int __count, __off64_t __offset,
       int __flags)
  __attribute__ ((__warn_unused_result__)) __attribute__ ((__access__ (__read_only__, 2, 3)));








# 1 "/usr/include/aarch64-linux-gnu/bits/uio-ext.h" 1 3 4
# 26 "/usr/include/aarch64-linux-gnu/bits/uio-ext.h" 3 4



extern ssize_t process_vm_readv (pid_t __pid, const struct iovec *__lvec,
     unsigned long int __liovcnt,
     const struct iovec *__rvec,
     unsigned long int __riovcnt,
     unsigned long int __flags)
  __attribute__ ((__nothrow__ , __leaf__));


extern ssize_t process_vm_writev (pid_t __pid, const struct iovec *__lvec,
      unsigned long int __liovcnt,
      const struct iovec *__rvec,
      unsigned long int __riovcnt,
      unsigned long int __flags)
  __attribute__ ((__nothrow__ , __leaf__));
# 51 "/usr/include/aarch64-linux-gnu/bits/uio-ext.h" 3 4

# 180 "/usr/include/aarch64-linux-gnu/sys/uio.h" 2 3 4
# 434 "stress-ng.h" 2



# 1 "/usr/include/aarch64-linux-gnu/sys/un.h" 1 3 4
# 26 "/usr/include/aarch64-linux-gnu/sys/un.h" 3 4



struct sockaddr_un
  {
    sa_family_t sun_family;
    char sun_path[108];
  };
# 44 "/usr/include/aarch64-linux-gnu/sys/un.h" 3 4

# 438 "stress-ng.h" 2



# 1 "/usr/include/aarch64-linux-gnu/sys/utsname.h" 1 3 4
# 27 "/usr/include/aarch64-linux-gnu/sys/utsname.h" 3 4


# 1 "/usr/include/aarch64-linux-gnu/bits/utsname.h" 1 3 4
# 30 "/usr/include/aarch64-linux-gnu/sys/utsname.h" 2 3 4
# 48 "/usr/include/aarch64-linux-gnu/sys/utsname.h" 3 4
struct utsname
  {

    char sysname[65];


    char nodename[65];


    char release[65];

    char version[65];


    char machine[65];




    char domainname[65];




  };
# 81 "/usr/include/aarch64-linux-gnu/sys/utsname.h" 3 4
extern int uname (struct utsname *__name) __attribute__ ((__nothrow__ , __leaf__));



# 442 "stress-ng.h" 2



# 1 "/usr/include/aarch64-linux-gnu/sys/vfs.h" 1 3 4
# 446 "stress-ng.h" 2







# 1 "/usr/include/scsi/scsi.h" 1 3 4
# 160 "/usr/include/scsi/scsi.h" 3 4
struct ccs_modesel_head
  {
    unsigned char _r1;
    unsigned char medium;
    unsigned char _r2;
    unsigned char block_desc_length;
    unsigned char density;
    unsigned char number_blocks_hi;

    unsigned char number_blocks_med;
    unsigned char number_blocks_lo;
    unsigned char _r3;
    unsigned char block_length_hi;

    unsigned char block_length_med;
    unsigned char block_length_lo;
  };
# 454 "stress-ng.h" 2



# 1 "/usr/include/scsi/sg.h" 1 3 4
# 30 "/usr/include/scsi/sg.h" 3 4
# 1 "/usr/lib/gcc/aarch64-linux-gnu/11/include/stddef.h" 1 3 4
# 31 "/usr/include/scsi/sg.h" 2 3 4






typedef struct sg_iovec
{
  void * iov_base;
  size_t iov_len;
} sg_iovec_t;


typedef struct sg_io_hdr
{
  int interface_id;
  int dxfer_direction;
  unsigned char cmd_len;
  unsigned char mx_sb_len;
  unsigned short int iovec_count;
  unsigned int dxfer_len;
  void * dxferp;

  unsigned char * cmdp;
  unsigned char * sbp;
  unsigned int timeout;
  unsigned int flags;
  int pack_id;
  void * usr_ptr;
  unsigned char status;
  unsigned char masked_status;
  unsigned char msg_status;
  unsigned char sb_len_wr;
  unsigned short int host_status;
  unsigned short int driver_status;
  int resid;
  unsigned int duration;
  unsigned int info;
} sg_io_hdr_t;
# 102 "/usr/include/scsi/sg.h" 3 4
struct sg_scsi_id {

  int host_no;
  int channel;

  int scsi_id;
  int lun;

  int scsi_type;

  short int h_cmd_per_lun;

  short int d_queue_depth;

  int unused[2];
};


typedef struct sg_req_info {
    char req_state;
    char orphan;
    char sg_io_owned;
    char problem;
    int pack_id;
    void * usr_ptr;
    unsigned int duration;

    int unused;
} sg_req_info_t;
# 210 "/usr/include/scsi/sg.h" 3 4
typedef struct sg_io_hdr Sg_io_hdr;
typedef struct sg_io_vec Sg_io_vec;
typedef struct sg_scsi_id Sg_scsi_id;
typedef struct sg_req_info Sg_req_info;
# 222 "/usr/include/scsi/sg.h" 3 4
struct sg_header
 {

   int pack_len;

   int reply_len;

   int pack_id;

   int result;

   unsigned int twelve_byte:1;

   unsigned int target_status:5;

   unsigned int host_status:8;

   unsigned int driver_status:8;

   unsigned int other_flags:10;




   unsigned char sense_buffer[16];
 };
# 458 "stress-ng.h" 2






# 1 "/usr/include/linux/android/binder.h" 1 3 4
# 31 "/usr/include/linux/android/binder.h" 3 4
enum {
 BINDER_TYPE_BINDER = (((('s')<<24)) | ((('b')<<16)) | ((('*')<<8)) | (0x85)),
 BINDER_TYPE_WEAK_BINDER = (((('w')<<24)) | ((('b')<<16)) | ((('*')<<8)) | (0x85)),
 BINDER_TYPE_HANDLE = (((('s')<<24)) | ((('h')<<16)) | ((('*')<<8)) | (0x85)),
 BINDER_TYPE_WEAK_HANDLE = (((('w')<<24)) | ((('h')<<16)) | ((('*')<<8)) | (0x85)),
 BINDER_TYPE_FD = (((('f')<<24)) | ((('d')<<16)) | ((('*')<<8)) | (0x85)),
 BINDER_TYPE_FDA = (((('f')<<24)) | ((('d')<<16)) | ((('a')<<8)) | (0x85)),
 BINDER_TYPE_PTR = (((('p')<<24)) | ((('t')<<16)) | ((('*')<<8)) | (0x85)),
};

enum {
 FLAT_BINDER_FLAG_PRIORITY_MASK = 0xff,
 FLAT_BINDER_FLAG_ACCEPTS_FDS = 0x100,







 FLAT_BINDER_FLAG_TXN_SECURITY_CTX = 0x1000,
};





typedef __u64 binder_size_t;
typedef __u64 binder_uintptr_t;






struct binder_object_header {
 __u32 type;
};
# 77 "/usr/include/linux/android/binder.h" 3 4
struct flat_binder_object {
 struct binder_object_header hdr;
 __u32 flags;


 union {
  binder_uintptr_t binder;
  __u32 handle;
 };


 binder_uintptr_t cookie;
};
# 99 "/usr/include/linux/android/binder.h" 3 4
struct binder_fd_object {
 struct binder_object_header hdr;
 __u32 pad_flags;
 union {
  binder_uintptr_t pad_binder;
  __u32 fd;
 };

 binder_uintptr_t cookie;
};
# 129 "/usr/include/linux/android/binder.h" 3 4
struct binder_buffer_object {
 struct binder_object_header hdr;
 __u32 flags;
 binder_uintptr_t buffer;
 binder_size_t length;
 binder_size_t parent;
 binder_size_t parent_offset;
};

enum {
 BINDER_BUFFER_FLAG_HAS_PARENT = 0x01,
};
# 163 "/usr/include/linux/android/binder.h" 3 4
struct binder_fd_array_object {
 struct binder_object_header hdr;
 __u32 pad;
 binder_size_t num_fds;
 binder_size_t parent;
 binder_size_t parent_offset;
};






struct binder_write_read {
 binder_size_t write_size;
 binder_size_t write_consumed;
 binder_uintptr_t write_buffer;
 binder_size_t read_size;
 binder_size_t read_consumed;
 binder_uintptr_t read_buffer;
};


struct binder_version {

 __s32 protocol_version;
};
# 204 "/usr/include/linux/android/binder.h" 3 4
struct binder_node_debug_info {
 binder_uintptr_t ptr;
 binder_uintptr_t cookie;
 __u32 has_strong_ref;
 __u32 has_weak_ref;
};

struct binder_node_info_for_ref {
 __u32 handle;
 __u32 strong_count;
 __u32 weak_count;
 __u32 reserved1;
 __u32 reserved2;
 __u32 reserved3;
};

struct binder_freeze_info {
 __u32 pid;
 __u32 enable;
 __u32 timeout_ms;
};

struct binder_frozen_status_info {
 __u32 pid;





 __u32 sync_recv;


 __u32 async_recv;
};
# 268 "/usr/include/linux/android/binder.h" 3 4
enum transaction_flags {
 TF_ONE_WAY = 0x01,
 TF_ROOT_OBJECT = 0x04,
 TF_STATUS_CODE = 0x08,
 TF_ACCEPT_FDS = 0x10,
 TF_CLEAR_BUF = 0x20,
};

struct binder_transaction_data {



 union {

  __u32 handle;

  binder_uintptr_t ptr;
 } target;
 binder_uintptr_t cookie;
 __u32 code;


 __u32 flags;
 pid_t sender_pid;
 uid_t sender_euid;
 binder_size_t data_size;
 binder_size_t offsets_size;





 union {
  struct {

   binder_uintptr_t buffer;

   binder_uintptr_t offsets;
  } ptr;
  __u8 buf[8];
 } data;
};

struct binder_transaction_data_secctx {
 struct binder_transaction_data transaction_data;
 binder_uintptr_t secctx;
};

struct binder_transaction_data_sg {
 struct binder_transaction_data transaction_data;
 binder_size_t buffers_size;
};

struct binder_ptr_cookie {
 binder_uintptr_t ptr;
 binder_uintptr_t cookie;
};

struct binder_handle_cookie {
 __u32 handle;
 binder_uintptr_t cookie;
} __attribute__((packed));

struct binder_pri_desc {
 __s32 priority;
 __u32 desc;
};

struct binder_pri_ptr_cookie {
 __s32 priority;
 binder_uintptr_t ptr;
 binder_uintptr_t cookie;
};

enum binder_driver_return_protocol {
 BR_ERROR = (((2U) << (((0 +8)+8)+14)) | ((('r')) << (0 +8)) | (((0)) << 0) | ((((sizeof(__s32)))) << ((0 +8)+8))),




 BR_OK = (((0U) << (((0 +8)+8)+14)) | ((('r')) << (0 +8)) | (((1)) << 0) | ((0) << ((0 +8)+8))),


 BR_TRANSACTION_SEC_CTX = (((2U) << (((0 +8)+8)+14)) | ((('r')) << (0 +8)) | (((2)) << 0) | ((((sizeof(struct binder_transaction_data_secctx)))) << ((0 +8)+8)))
                                                ,



 BR_TRANSACTION = (((2U) << (((0 +8)+8)+14)) | ((('r')) << (0 +8)) | (((2)) << 0) | ((((sizeof(struct binder_transaction_data)))) << ((0 +8)+8))),
 BR_REPLY = (((2U) << (((0 +8)+8)+14)) | ((('r')) << (0 +8)) | (((3)) << 0) | ((((sizeof(struct binder_transaction_data)))) << ((0 +8)+8))),




 BR_ACQUIRE_RESULT = (((2U) << (((0 +8)+8)+14)) | ((('r')) << (0 +8)) | (((4)) << 0) | ((((sizeof(__s32)))) << ((0 +8)+8))),






 BR_DEAD_REPLY = (((0U) << (((0 +8)+8)+14)) | ((('r')) << (0 +8)) | (((5)) << 0) | ((0) << ((0 +8)+8))),





 BR_TRANSACTION_COMPLETE = (((0U) << (((0 +8)+8)+14)) | ((('r')) << (0 +8)) | (((6)) << 0) | ((0) << ((0 +8)+8))),






 BR_INCREFS = (((2U) << (((0 +8)+8)+14)) | ((('r')) << (0 +8)) | (((7)) << 0) | ((((sizeof(struct binder_ptr_cookie)))) << ((0 +8)+8))),
 BR_ACQUIRE = (((2U) << (((0 +8)+8)+14)) | ((('r')) << (0 +8)) | (((8)) << 0) | ((((sizeof(struct binder_ptr_cookie)))) << ((0 +8)+8))),
 BR_RELEASE = (((2U) << (((0 +8)+8)+14)) | ((('r')) << (0 +8)) | (((9)) << 0) | ((((sizeof(struct binder_ptr_cookie)))) << ((0 +8)+8))),
 BR_DECREFS = (((2U) << (((0 +8)+8)+14)) | ((('r')) << (0 +8)) | (((10)) << 0) | ((((sizeof(struct binder_ptr_cookie)))) << ((0 +8)+8))),





 BR_ATTEMPT_ACQUIRE = (((2U) << (((0 +8)+8)+14)) | ((('r')) << (0 +8)) | (((11)) << 0) | ((((sizeof(struct binder_pri_ptr_cookie)))) << ((0 +8)+8))),







 BR_NOOP = (((0U) << (((0 +8)+8)+14)) | ((('r')) << (0 +8)) | (((12)) << 0) | ((0) << ((0 +8)+8))),





 BR_SPAWN_LOOPER = (((0U) << (((0 +8)+8)+14)) | ((('r')) << (0 +8)) | (((13)) << 0) | ((0) << ((0 +8)+8))),







 BR_FINISHED = (((0U) << (((0 +8)+8)+14)) | ((('r')) << (0 +8)) | (((14)) << 0) | ((0) << ((0 +8)+8))),





 BR_DEAD_BINDER = (((2U) << (((0 +8)+8)+14)) | ((('r')) << (0 +8)) | (((15)) << 0) | ((((sizeof(binder_uintptr_t)))) << ((0 +8)+8))),



 BR_CLEAR_DEATH_NOTIFICATION_DONE = (((2U) << (((0 +8)+8)+14)) | ((('r')) << (0 +8)) | (((16)) << 0) | ((((sizeof(binder_uintptr_t)))) << ((0 +8)+8))),




 BR_FAILED_REPLY = (((0U) << (((0 +8)+8)+14)) | ((('r')) << (0 +8)) | (((17)) << 0) | ((0) << ((0 +8)+8))),





 BR_FROZEN_REPLY = (((0U) << (((0 +8)+8)+14)) | ((('r')) << (0 +8)) | (((18)) << 0) | ((0) << ((0 +8)+8))),





 BR_ONEWAY_SPAM_SUSPECT = (((0U) << (((0 +8)+8)+14)) | ((('r')) << (0 +8)) | (((19)) << 0) | ((0) << ((0 +8)+8))),





};

enum binder_driver_command_protocol {
 BC_TRANSACTION = (((1U) << (((0 +8)+8)+14)) | ((('c')) << (0 +8)) | (((0)) << 0) | ((((sizeof(struct binder_transaction_data)))) << ((0 +8)+8))),
 BC_REPLY = (((1U) << (((0 +8)+8)+14)) | ((('c')) << (0 +8)) | (((1)) << 0) | ((((sizeof(struct binder_transaction_data)))) << ((0 +8)+8))),




 BC_ACQUIRE_RESULT = (((1U) << (((0 +8)+8)+14)) | ((('c')) << (0 +8)) | (((2)) << 0) | ((((sizeof(__s32)))) << ((0 +8)+8))),






 BC_FREE_BUFFER = (((1U) << (((0 +8)+8)+14)) | ((('c')) << (0 +8)) | (((3)) << 0) | ((((sizeof(binder_uintptr_t)))) << ((0 +8)+8))),




 BC_INCREFS = (((1U) << (((0 +8)+8)+14)) | ((('c')) << (0 +8)) | (((4)) << 0) | ((((sizeof(__u32)))) << ((0 +8)+8))),
 BC_ACQUIRE = (((1U) << (((0 +8)+8)+14)) | ((('c')) << (0 +8)) | (((5)) << 0) | ((((sizeof(__u32)))) << ((0 +8)+8))),
 BC_RELEASE = (((1U) << (((0 +8)+8)+14)) | ((('c')) << (0 +8)) | (((6)) << 0) | ((((sizeof(__u32)))) << ((0 +8)+8))),
 BC_DECREFS = (((1U) << (((0 +8)+8)+14)) | ((('c')) << (0 +8)) | (((7)) << 0) | ((((sizeof(__u32)))) << ((0 +8)+8))),




 BC_INCREFS_DONE = (((1U) << (((0 +8)+8)+14)) | ((('c')) << (0 +8)) | (((8)) << 0) | ((((sizeof(struct binder_ptr_cookie)))) << ((0 +8)+8))),
 BC_ACQUIRE_DONE = (((1U) << (((0 +8)+8)+14)) | ((('c')) << (0 +8)) | (((9)) << 0) | ((((sizeof(struct binder_ptr_cookie)))) << ((0 +8)+8))),





 BC_ATTEMPT_ACQUIRE = (((1U) << (((0 +8)+8)+14)) | ((('c')) << (0 +8)) | (((10)) << 0) | ((((sizeof(struct binder_pri_desc)))) << ((0 +8)+8))),






 BC_REGISTER_LOOPER = (((0U) << (((0 +8)+8)+14)) | ((('c')) << (0 +8)) | (((11)) << 0) | ((0) << ((0 +8)+8))),





 BC_ENTER_LOOPER = (((0U) << (((0 +8)+8)+14)) | ((('c')) << (0 +8)) | (((12)) << 0) | ((0) << ((0 +8)+8))),
 BC_EXIT_LOOPER = (((0U) << (((0 +8)+8)+14)) | ((('c')) << (0 +8)) | (((13)) << 0) | ((0) << ((0 +8)+8))),
# 505 "/usr/include/linux/android/binder.h" 3 4
 BC_REQUEST_DEATH_NOTIFICATION = (((1U) << (((0 +8)+8)+14)) | ((('c')) << (0 +8)) | (((14)) << 0) | ((((sizeof(struct binder_handle_cookie)))) << ((0 +8)+8)))
                                  ,





 BC_CLEAR_DEATH_NOTIFICATION = (((1U) << (((0 +8)+8)+14)) | ((('c')) << (0 +8)) | (((15)) << 0) | ((((sizeof(struct binder_handle_cookie)))) << ((0 +8)+8)))
                                  ,





 BC_DEAD_BINDER_DONE = (((1U) << (((0 +8)+8)+14)) | ((('c')) << (0 +8)) | (((16)) << 0) | ((((sizeof(binder_uintptr_t)))) << ((0 +8)+8))),




 BC_TRANSACTION_SG = (((1U) << (((0 +8)+8)+14)) | ((('c')) << (0 +8)) | (((17)) << 0) | ((((sizeof(struct binder_transaction_data_sg)))) << ((0 +8)+8))),
 BC_REPLY_SG = (((1U) << (((0 +8)+8)+14)) | ((('c')) << (0 +8)) | (((18)) << 0) | ((((sizeof(struct binder_transaction_data_sg)))) << ((0 +8)+8))),



};
# 465 "stress-ng.h" 2



# 1 "/usr/include/linux/android/binderfs.h" 1 3 4
# 23 "/usr/include/linux/android/binderfs.h" 3 4
struct binderfs_device {
 char name[255 + 1];
 __u32 major;
 __u32 minor;
};
# 469 "stress-ng.h" 2



# 1 "/usr/include/linux/audit.h" 1 3 4
# 29 "/usr/include/linux/audit.h" 3 4
# 1 "/usr/include/linux/elf-em.h" 1 3 4
# 30 "/usr/include/linux/audit.h" 2 3 4
# 325 "/usr/include/linux/audit.h" 3 4
enum {
 Audit_equal,
 Audit_not_equal,
 Audit_bitmask,
 Audit_bittest,
 Audit_lt,
 Audit_gt,
 Audit_le,
 Audit_ge,
 Audit_bad
};
# 452 "/usr/include/linux/audit.h" 3 4
enum audit_nlgrps {
 AUDIT_NLGRP_NONE,
 AUDIT_NLGRP_READLOG,
 __AUDIT_NLGRP_MAX
};


struct audit_status {
 __u32 mask;
 __u32 enabled;
 __u32 failure;
 __u32 pid;
 __u32 rate_limit;
 __u32 backlog_limit;
 __u32 lost;
 __u32 backlog;
 union {
  __u32 version;
  __u32 feature_bitmap;
 };
 __u32 backlog_wait_time;
 __u32 backlog_wait_time_actual;


};

struct audit_features {

 __u32 vers;
 __u32 mask;
 __u32 features;
 __u32 lock;
};
# 493 "/usr/include/linux/audit.h" 3 4
struct audit_tty_status {
 __u32 enabled;
 __u32 log_passwd;
};
# 505 "/usr/include/linux/audit.h" 3 4
struct audit_rule_data {
 __u32 flags;
 __u32 action;
 __u32 field_count;
 __u32 mask[64];
 __u32 fields[64];
 __u32 values[64];
 __u32 fieldflags[64];
 __u32 buflen;
 char buf[0];
};
# 473 "stress-ng.h" 2



# 1 "/usr/include/linux/cdrom.h" 1 3 4
# 155 "/usr/include/linux/cdrom.h" 3 4
struct cdrom_msf0
{
 __u8 minute;
 __u8 second;
 __u8 frame;
};


union cdrom_addr
{
 struct cdrom_msf0 msf;
 int lba;
};


struct cdrom_msf
{
 __u8 cdmsf_min0;
 __u8 cdmsf_sec0;
 __u8 cdmsf_frame0;
 __u8 cdmsf_min1;
 __u8 cdmsf_sec1;
 __u8 cdmsf_frame1;
};


struct cdrom_ti
{
 __u8 cdti_trk0;
 __u8 cdti_ind0;
 __u8 cdti_trk1;
 __u8 cdti_ind1;
};


struct cdrom_tochdr
{
 __u8 cdth_trk0;
 __u8 cdth_trk1;
};


struct cdrom_volctrl
{
 __u8 channel0;
 __u8 channel1;
 __u8 channel2;
 __u8 channel3;
};


struct cdrom_subchnl
{
 __u8 cdsc_format;
 __u8 cdsc_audiostatus;
 __u8 cdsc_adr: 4;
 __u8 cdsc_ctrl: 4;
 __u8 cdsc_trk;
 __u8 cdsc_ind;
 union cdrom_addr cdsc_absaddr;
 union cdrom_addr cdsc_reladdr;
};



struct cdrom_tocentry
{
 __u8 cdte_track;
 __u8 cdte_adr :4;
 __u8 cdte_ctrl :4;
 __u8 cdte_format;
 union cdrom_addr cdte_addr;
 __u8 cdte_datamode;
};


struct cdrom_read
{
 int cdread_lba;
 char *cdread_bufaddr;
 int cdread_buflen;
};


struct cdrom_read_audio
{
 union cdrom_addr addr;
 __u8 addr_format;
 int nframes;
 __u8 *buf;
};


struct cdrom_multisession
{
 union cdrom_addr addr;


 __u8 xa_flag;
 __u8 addr_format;
};






struct cdrom_mcn
{
  __u8 medium_catalog_number[14];
};


struct cdrom_blk
{
 unsigned from;
 unsigned short len;
};
# 282 "/usr/include/linux/cdrom.h" 3 4
struct cdrom_generic_command
{
 unsigned char cmd[12];
 unsigned char *buffer;
 unsigned int buflen;
 int stat;
 struct request_sense *sense;
 unsigned char data_direction;
 int quiet;
 int timeout;
 union {
  void *reserved[1];
  void *unused;
 };
};
# 530 "/usr/include/linux/cdrom.h" 3 4
struct dvd_layer {
 __u8 book_version : 4;
 __u8 book_type : 4;
 __u8 min_rate : 4;
 __u8 disc_size : 4;
 __u8 layer_type : 4;
 __u8 track_path : 1;
 __u8 nlayers : 2;
 __u8 track_density : 4;
 __u8 linear_density : 4;
 __u8 bca : 1;
 __u32 start_sector;
 __u32 end_sector;
 __u32 end_sector_l0;
};



struct dvd_physical {
 __u8 type;
 __u8 layer_num;
 struct dvd_layer layer[4];
};

struct dvd_copyright {
 __u8 type;

 __u8 layer_num;
 __u8 cpst;
 __u8 rmi;
};

struct dvd_disckey {
 __u8 type;

 unsigned agid : 2;
 __u8 value[2048];
};

struct dvd_bca {
 __u8 type;

 int len;
 __u8 value[188];
};

struct dvd_manufact {
 __u8 type;

 __u8 layer_num;
 int len;
 __u8 value[2048];
};

typedef union {
 __u8 type;

 struct dvd_physical physical;
 struct dvd_copyright copyright;
 struct dvd_disckey disckey;
 struct dvd_bca bca;
 struct dvd_manufact manufact;
} dvd_struct;
# 617 "/usr/include/linux/cdrom.h" 3 4
typedef __u8 dvd_key[5];
typedef __u8 dvd_challenge[10];

struct dvd_lu_send_agid {
 __u8 type;
 unsigned agid : 2;
};

struct dvd_host_send_challenge {
 __u8 type;
 unsigned agid : 2;

 dvd_challenge chal;
};

struct dvd_send_key {
 __u8 type;
 unsigned agid : 2;

 dvd_key key;
};

struct dvd_lu_send_challenge {
 __u8 type;
 unsigned agid : 2;

 dvd_challenge chal;
};
# 656 "/usr/include/linux/cdrom.h" 3 4
struct dvd_lu_send_title_key {
 __u8 type;
 unsigned agid : 2;

 dvd_key title_key;
 int lba;
 unsigned cpm : 1;
 unsigned cp_sec : 1;
 unsigned cgms : 2;
};

struct dvd_lu_send_asf {
 __u8 type;
 unsigned agid : 2;

 unsigned asf : 1;
};

struct dvd_host_send_rpcstate {
 __u8 type;
 __u8 pdrc;
};

struct dvd_lu_send_rpcstate {
 __u8 type : 2;
 __u8 vra : 3;
 __u8 ucca : 3;
 __u8 region_mask;
 __u8 rpc_scheme;
};

typedef union {
 __u8 type;

 struct dvd_lu_send_agid lsa;
 struct dvd_host_send_challenge hsc;
 struct dvd_send_key lsk;
 struct dvd_lu_send_challenge lsc;
 struct dvd_send_key hsk;
 struct dvd_lu_send_title_key lstk;
 struct dvd_lu_send_asf lsasf;
 struct dvd_host_send_rpcstate hrpcs;
 struct dvd_lu_send_rpcstate lrpcs;
} dvd_authinfo;

struct request_sense {




 __u8 error_code : 7;
 __u8 valid : 1;

 __u8 segment_number;






 __u8 sense_key : 4;
 __u8 reserved2 : 1;
 __u8 ili : 1;
 __u8 reserved1 : 2;

 __u8 information[4];
 __u8 add_sense_len;
 __u8 command_info[4];
 __u8 asc;
 __u8 ascq;
 __u8 fruc;
 __u8 sks[3];
 __u8 asb[46];
};
# 759 "/usr/include/linux/cdrom.h" 3 4
struct mrw_feature_desc {
 __be16 feature_code;






 __u8 curr : 1;
 __u8 persistent : 1;
 __u8 feature_version : 4;
 __u8 reserved1 : 2;

 __u8 add_len;




 __u8 write : 1;
 __u8 reserved2 : 7;

 __u8 reserved3;
 __u8 reserved4;
 __u8 reserved5;
};


struct rwrt_feature_desc {
 __be16 feature_code;






 __u8 curr : 1;
 __u8 persistent : 1;
 __u8 feature_version : 4;
 __u8 reserved1 : 2;

 __u8 add_len;
 __u32 last_lba;
 __u32 block_size;
 __u16 blocking;




 __u8 page_present : 1;
 __u8 reserved2 : 7;

 __u8 reserved3;
};

typedef struct {
 __be16 disc_information_length;






        __u8 disc_status : 2;
        __u8 border_status : 2;
        __u8 erasable : 1;
 __u8 reserved1 : 3;



 __u8 n_first_track;
 __u8 n_sessions_lsb;
 __u8 first_track_lsb;
 __u8 last_track_lsb;
# 840 "/usr/include/linux/cdrom.h" 3 4
 __u8 mrw_status : 2;
 __u8 dbit : 1;
        __u8 reserved2 : 2;
        __u8 uru : 1;
        __u8 dbc_v : 1;
 __u8 did_v : 1;

 __u8 disc_type;
 __u8 n_sessions_msb;
 __u8 first_track_msb;
 __u8 last_track_msb;
 __u32 disc_id;
 __u32 lead_in;
 __u32 lead_out;
 __u8 disc_bar_code[8];
 __u8 reserved3;
 __u8 n_opc;
} disc_information;

typedef struct {
 __be16 track_information_length;
 __u8 track_lsb;
 __u8 session_lsb;
 __u8 reserved1;
# 878 "/usr/include/linux/cdrom.h" 3 4
        __u8 track_mode : 4;
        __u8 copy : 1;
        __u8 damage : 1;
 __u8 reserved2 : 2;
 __u8 data_mode : 4;
 __u8 fp : 1;
 __u8 packet : 1;
 __u8 blank : 1;
 __u8 rt : 1;
 __u8 nwa_v : 1;
 __u8 lra_v : 1;
 __u8 reserved3 : 6;

 __be32 track_start;
 __be32 next_writable;
 __be32 free_blocks;
 __be32 fixed_packet_size;
 __be32 track_size;
 __be32 last_rec_address;
} track_information;

struct feature_header {
 __u32 data_len;
 __u8 reserved1;
 __u8 reserved2;
 __u16 curr_profile;
};

struct mode_page_header {
 __be16 mode_data_length;
 __u8 medium_type;
 __u8 reserved1;
 __u8 reserved2;
 __u8 reserved3;
 __be16 desc_length;
};


struct rm_feature_desc {
 __be16 feature_code;






 __u8 curr:1;
 __u8 persistent:1;
 __u8 feature_version:4;
 __u8 reserved1:2;

 __u8 add_len;
# 938 "/usr/include/linux/cdrom.h" 3 4
 __u8 lock:1;
 __u8 dbml:1;
 __u8 pvnt_jmpr:1;
 __u8 eject:1;
 __u8 load:1;
 __u8 mech_type:3;

 __u8 reserved2;
 __u8 reserved3;
 __u8 reserved4;
};
# 477 "stress-ng.h" 2



# 1 "/usr/include/linux/cn_proc.h" 1 3 4
# 28 "/usr/include/linux/cn_proc.h" 3 4
enum proc_cn_mcast_op {
 PROC_CN_MCAST_LISTEN = 1,
 PROC_CN_MCAST_IGNORE = 2
};
# 46 "/usr/include/linux/cn_proc.h" 3 4
struct proc_event {
 enum what {



  PROC_EVENT_NONE = 0x00000000,
  PROC_EVENT_FORK = 0x00000001,
  PROC_EVENT_EXEC = 0x00000002,
  PROC_EVENT_UID = 0x00000004,
  PROC_EVENT_GID = 0x00000040,
  PROC_EVENT_SID = 0x00000080,
  PROC_EVENT_PTRACE = 0x00000100,
  PROC_EVENT_COMM = 0x00000200,



  PROC_EVENT_COREDUMP = 0x40000000,
  PROC_EVENT_EXIT = 0x80000000
 } what;
 __u32 cpu;
 __u64 __attribute__((aligned(8))) timestamp_ns;

 union {
  struct {
   __u32 err;
  } ack;

  struct fork_proc_event {
   __kernel_pid_t parent_pid;
   __kernel_pid_t parent_tgid;
   __kernel_pid_t child_pid;
   __kernel_pid_t child_tgid;
  } fork;

  struct exec_proc_event {
   __kernel_pid_t process_pid;
   __kernel_pid_t process_tgid;
  } exec;

  struct id_proc_event {
   __kernel_pid_t process_pid;
   __kernel_pid_t process_tgid;
   union {
    __u32 ruid;
    __u32 rgid;
   } r;
   union {
    __u32 euid;
    __u32 egid;
   } e;
  } id;

  struct sid_proc_event {
   __kernel_pid_t process_pid;
   __kernel_pid_t process_tgid;
  } sid;

  struct ptrace_proc_event {
   __kernel_pid_t process_pid;
   __kernel_pid_t process_tgid;
   __kernel_pid_t tracer_pid;
   __kernel_pid_t tracer_tgid;
  } ptrace;

  struct comm_proc_event {
   __kernel_pid_t process_pid;
   __kernel_pid_t process_tgid;
   char comm[16];
  } comm;

  struct coredump_proc_event {
   __kernel_pid_t process_pid;
   __kernel_pid_t process_tgid;
   __kernel_pid_t parent_pid;
   __kernel_pid_t parent_tgid;
  } coredump;

  struct exit_proc_event {
   __kernel_pid_t process_pid;
   __kernel_pid_t process_tgid;
   __u32 exit_code, exit_signal;
   __kernel_pid_t parent_pid;
   __kernel_pid_t parent_tgid;
  } exit;

 } event_data;
};
# 481 "stress-ng.h" 2



# 1 "/usr/include/linux/connector.h" 1 3 4
# 65 "/usr/include/linux/connector.h" 3 4
struct cb_id {
 __u32 idx;
 __u32 val;
};

struct cn_msg {
 struct cb_id id;

 __u32 seq;
 __u32 ack;

 __u16 len;
 __u16 flags;
 __u8 data[0];
};
# 485 "stress-ng.h" 2



# 1 "/usr/include/linux/dm-ioctl.h" 1 3 4
# 103 "/usr/include/linux/dm-ioctl.h" 3 4
struct dm_ioctl {
# 118 "/usr/include/linux/dm-ioctl.h" 3 4
 __u32 version[3];
 __u32 data_size;


 __u32 data_start;


 __u32 target_count;
 __s32 open_count;
 __u32 flags;
# 138 "/usr/include/linux/dm-ioctl.h" 3 4
 __u32 event_nr;
 __u32 padding;

 __u64 dev;

 char name[128];
 char uuid[129];

 char data[7];
};





struct dm_target_spec {
 __u64 sector_start;
 __u64 length;
 __s32 status;
# 168 "/usr/include/linux/dm-ioctl.h" 3 4
 __u32 next;

 char target_type[16];






};




struct dm_target_deps {
 __u32 count;
 __u32 padding;
 __u64 dev[0];
};




struct dm_name_list {
 __u64 dev;
 __u32 next;

 char name[0];
# 207 "/usr/include/linux/dm-ioctl.h" 3 4
};







struct dm_target_versions {
        __u32 next;
        __u32 version[3];

        char name[0];
};




struct dm_target_msg {
 __u64 sector;

 char message[0];
};





enum {

 DM_VERSION_CMD = 0,
 DM_REMOVE_ALL_CMD,
 DM_LIST_DEVICES_CMD,


 DM_DEV_CREATE_CMD,
 DM_DEV_REMOVE_CMD,
 DM_DEV_RENAME_CMD,
 DM_DEV_SUSPEND_CMD,
 DM_DEV_STATUS_CMD,
 DM_DEV_WAIT_CMD,


 DM_TABLE_LOAD_CMD,
 DM_TABLE_CLEAR_CMD,
 DM_TABLE_DEPS_CMD,
 DM_TABLE_STATUS_CMD,


 DM_LIST_VERSIONS_CMD,
 DM_TARGET_MSG_CMD,
 DM_DEV_SET_GEOMETRY_CMD,
 DM_DEV_ARM_POLL_CMD,
 DM_GET_TARGET_VERSION_CMD,
};
# 489 "stress-ng.h" 2



# 1 "/usr/include/linux/genetlink.h" 1 3 4





# 1 "/usr/include/linux/netlink.h" 1 3 4





# 1 "/usr/include/linux/socket.h" 1 3 4
# 10 "/usr/include/linux/socket.h" 3 4
typedef unsigned short __kernel_sa_family_t;





struct __kernel_sockaddr_storage {
 union {
  struct {
   __kernel_sa_family_t ss_family;

   char __data[128 - sizeof(unsigned short)];


  };
  void *__align;
 };
};
# 7 "/usr/include/linux/netlink.h" 2 3 4
# 37 "/usr/include/linux/netlink.h" 3 4
struct sockaddr_nl {
 __kernel_sa_family_t nl_family;
 unsigned short nl_pad;
 __u32 nl_pid;
        __u32 nl_groups;
};

struct nlmsghdr {
 __u32 nlmsg_len;
 __u16 nlmsg_type;
 __u16 nlmsg_flags;
 __u32 nlmsg_seq;
 __u32 nlmsg_pid;
};
# 110 "/usr/include/linux/netlink.h" 3 4
struct nlmsgerr {
 int error;
 struct nlmsghdr msg;
# 122 "/usr/include/linux/netlink.h" 3 4
};
# 137 "/usr/include/linux/netlink.h" 3 4
enum nlmsgerr_attrs {
 NLMSGERR_ATTR_UNUSED,
 NLMSGERR_ATTR_MSG,
 NLMSGERR_ATTR_OFFS,
 NLMSGERR_ATTR_COOKIE,
 NLMSGERR_ATTR_POLICY,

 __NLMSGERR_ATTR_MAX,
 NLMSGERR_ATTR_MAX = __NLMSGERR_ATTR_MAX - 1
};
# 161 "/usr/include/linux/netlink.h" 3 4
struct nl_pktinfo {
 __u32 group;
};

struct nl_mmap_req {
 unsigned int nm_block_size;
 unsigned int nm_block_nr;
 unsigned int nm_frame_size;
 unsigned int nm_frame_nr;
};

struct nl_mmap_hdr {
 unsigned int nm_status;
 unsigned int nm_len;
 __u32 nm_group;

 __u32 nm_pid;
 __u32 nm_uid;
 __u32 nm_gid;
};

enum nl_mmap_status {
 NL_MMAP_STATUS_UNUSED,
 NL_MMAP_STATUS_RESERVED,
 NL_MMAP_STATUS_VALID,
 NL_MMAP_STATUS_COPY,
 NL_MMAP_STATUS_SKIP,
};







enum {
 NETLINK_UNCONNECTED = 0,
 NETLINK_CONNECTED,
};
# 210 "/usr/include/linux/netlink.h" 3 4
struct nlattr {
 __u16 nla_len;
 __u16 nla_type;
};
# 246 "/usr/include/linux/netlink.h" 3 4
struct nla_bitfield32 {
 __u32 value;
 __u32 selector;
};
# 283 "/usr/include/linux/netlink.h" 3 4
enum netlink_attribute_type {
 NL_ATTR_TYPE_INVALID,

 NL_ATTR_TYPE_FLAG,

 NL_ATTR_TYPE_U8,
 NL_ATTR_TYPE_U16,
 NL_ATTR_TYPE_U32,
 NL_ATTR_TYPE_U64,

 NL_ATTR_TYPE_S8,
 NL_ATTR_TYPE_S16,
 NL_ATTR_TYPE_S32,
 NL_ATTR_TYPE_S64,

 NL_ATTR_TYPE_BINARY,
 NL_ATTR_TYPE_STRING,
 NL_ATTR_TYPE_NUL_STRING,

 NL_ATTR_TYPE_NESTED,
 NL_ATTR_TYPE_NESTED_ARRAY,

 NL_ATTR_TYPE_BITFIELD32,
};
# 336 "/usr/include/linux/netlink.h" 3 4
enum netlink_policy_type_attr {
 NL_POLICY_TYPE_ATTR_UNSPEC,
 NL_POLICY_TYPE_ATTR_TYPE,
 NL_POLICY_TYPE_ATTR_MIN_VALUE_S,
 NL_POLICY_TYPE_ATTR_MAX_VALUE_S,
 NL_POLICY_TYPE_ATTR_MIN_VALUE_U,
 NL_POLICY_TYPE_ATTR_MAX_VALUE_U,
 NL_POLICY_TYPE_ATTR_MIN_LENGTH,
 NL_POLICY_TYPE_ATTR_MAX_LENGTH,
 NL_POLICY_TYPE_ATTR_POLICY_IDX,
 NL_POLICY_TYPE_ATTR_POLICY_MAXTYPE,
 NL_POLICY_TYPE_ATTR_BITFIELD32_MASK,
 NL_POLICY_TYPE_ATTR_PAD,
 NL_POLICY_TYPE_ATTR_MASK,


 __NL_POLICY_TYPE_ATTR_MAX,
 NL_POLICY_TYPE_ATTR_MAX = __NL_POLICY_TYPE_ATTR_MAX - 1
};
# 7 "/usr/include/linux/genetlink.h" 2 3 4






struct genlmsghdr {
 __u8 cmd;
 __u8 version;
 __u16 reserved;
};
# 40 "/usr/include/linux/genetlink.h" 3 4
enum {
 CTRL_CMD_UNSPEC,
 CTRL_CMD_NEWFAMILY,
 CTRL_CMD_DELFAMILY,
 CTRL_CMD_GETFAMILY,
 CTRL_CMD_NEWOPS,
 CTRL_CMD_DELOPS,
 CTRL_CMD_GETOPS,
 CTRL_CMD_NEWMCAST_GRP,
 CTRL_CMD_DELMCAST_GRP,
 CTRL_CMD_GETMCAST_GRP,
 CTRL_CMD_GETPOLICY,
 __CTRL_CMD_MAX,
};



enum {
 CTRL_ATTR_UNSPEC,
 CTRL_ATTR_FAMILY_ID,
 CTRL_ATTR_FAMILY_NAME,
 CTRL_ATTR_VERSION,
 CTRL_ATTR_HDRSIZE,
 CTRL_ATTR_MAXATTR,
 CTRL_ATTR_OPS,
 CTRL_ATTR_MCAST_GROUPS,
 CTRL_ATTR_POLICY,
 CTRL_ATTR_OP_POLICY,
 CTRL_ATTR_OP,
 __CTRL_ATTR_MAX,
};



enum {
 CTRL_ATTR_OP_UNSPEC,
 CTRL_ATTR_OP_ID,
 CTRL_ATTR_OP_FLAGS,
 __CTRL_ATTR_OP_MAX,
};



enum {
 CTRL_ATTR_MCAST_GRP_UNSPEC,
 CTRL_ATTR_MCAST_GRP_NAME,
 CTRL_ATTR_MCAST_GRP_ID,
 __CTRL_ATTR_MCAST_GRP_MAX,
};

enum {
 CTRL_ATTR_POLICY_UNSPEC,
 CTRL_ATTR_POLICY_DO,
 CTRL_ATTR_POLICY_DUMP,

 __CTRL_ATTR_POLICY_DUMP_MAX,
 CTRL_ATTR_POLICY_DUMP_MAX = __CTRL_ATTR_POLICY_DUMP_MAX - 1
};
# 493 "stress-ng.h" 2



# 1 "/usr/include/linux/hdreg.h" 1 3 4
# 30 "/usr/include/linux/hdreg.h" 3 4
typedef unsigned char task_ioreg_t;
typedef unsigned long sata_ioreg_t;

typedef union ide_reg_valid_s {
 unsigned all : 16;
 struct {
  unsigned data : 1;
  unsigned error_feature : 1;
  unsigned sector : 1;
  unsigned nsector : 1;
  unsigned lcyl : 1;
  unsigned hcyl : 1;
  unsigned select : 1;
  unsigned status_command : 1;

  unsigned data_hob : 1;
  unsigned error_feature_hob : 1;
  unsigned sector_hob : 1;
  unsigned nsector_hob : 1;
  unsigned lcyl_hob : 1;
  unsigned hcyl_hob : 1;
  unsigned select_hob : 1;
  unsigned control_hob : 1;
 } b;
} ide_reg_valid_t;

typedef struct ide_task_request_s {
 __u8 io_ports[8];
 __u8 hob_ports[8];
 ide_reg_valid_t out_flags;
 ide_reg_valid_t in_flags;
 int data_phase;
 int req_cmd;
 unsigned long out_size;
 unsigned long in_size;
} ide_task_request_t;

typedef struct ide_ioctl_request_s {
 ide_task_request_t *task_request;
 unsigned char *out_buffer;
 unsigned char *in_buffer;
} ide_ioctl_request_t;

struct hd_drive_cmd_hdr {
 __u8 command;
 __u8 sector_number;
 __u8 feature;
 __u8 sector_count;
};

typedef struct hd_drive_task_hdr {
 __u8 data;
 __u8 feature;
 __u8 sector_count;
 __u8 sector_number;
 __u8 low_cylinder;
 __u8 high_cylinder;
 __u8 device_head;
 __u8 command;
} task_struct_t;

typedef struct hd_drive_hob_hdr {
 __u8 data;
 __u8 feature;
 __u8 sector_count;
 __u8 sector_number;
 __u8 low_cylinder;
 __u8 high_cylinder;
 __u8 device_head;
 __u8 control;
} hob_struct_t;
# 314 "/usr/include/linux/hdreg.h" 3 4
struct hd_geometry {
      unsigned char heads;
      unsigned char sectors;
      unsigned short cylinders;
      unsigned long start;
};
# 366 "/usr/include/linux/hdreg.h" 3 4
enum {
 BUSSTATE_OFF = 0,
 BUSSTATE_ON,
 BUSSTATE_TRISTATE
};
# 386 "/usr/include/linux/hdreg.h" 3 4
struct hd_driveid {
 unsigned short config;
 unsigned short cyls;
 unsigned short reserved2;
 unsigned short heads;
 unsigned short track_bytes;
 unsigned short sector_bytes;
 unsigned short sectors;
 unsigned short vendor0;
 unsigned short vendor1;
 unsigned short vendor2;
 unsigned char serial_no[20];
 unsigned short buf_type;
 unsigned short buf_size;


 unsigned short ecc_bytes;
 unsigned char fw_rev[8];
 unsigned char model[40];
 unsigned char max_multsect;
 unsigned char vendor3;
 unsigned short dword_io;
 unsigned char vendor4;
 unsigned char capability;





 unsigned short reserved50;
 unsigned char vendor5;
 unsigned char tPIO;
 unsigned char vendor6;
 unsigned char tDMA;
 unsigned short field_valid;




 unsigned short cur_cyls;
 unsigned short cur_heads;
 unsigned short cur_sectors;
 unsigned short cur_capacity0;
 unsigned short cur_capacity1;
 unsigned char multsect;
 unsigned char multsect_valid;
 unsigned int lba_capacity;
 unsigned short dma_1word;
 unsigned short dma_mword;
 unsigned short eide_pio_modes;
 unsigned short eide_dma_min;
 unsigned short eide_dma_time;
 unsigned short eide_pio;
 unsigned short eide_pio_iordy;
 unsigned short words69_70[2];


 unsigned short words71_74[4];


 unsigned short queue_depth;



 unsigned short words76_79[4];
 unsigned short major_rev_num;
 unsigned short minor_rev_num;
 unsigned short command_set_1;
# 471 "/usr/include/linux/hdreg.h" 3 4
 unsigned short command_set_2;
# 489 "/usr/include/linux/hdreg.h" 3 4
 unsigned short cfsse;
# 501 "/usr/include/linux/hdreg.h" 3 4
 unsigned short cfs_enable_1;
# 520 "/usr/include/linux/hdreg.h" 3 4
 unsigned short cfs_enable_2;
# 539 "/usr/include/linux/hdreg.h" 3 4
 unsigned short csf_default;
# 551 "/usr/include/linux/hdreg.h" 3 4
 unsigned short dma_ultra;
 unsigned short trseuc;
 unsigned short trsEuc;
 unsigned short CurAPMvalues;
 unsigned short mprc;
 unsigned short hw_config;
# 574 "/usr/include/linux/hdreg.h" 3 4
 unsigned short acoustic;



 unsigned short msrqs;
 unsigned short sxfert;
 unsigned short sal;
 unsigned int spg;
 unsigned long long lba_capacity_2;
 unsigned short words104_125[22];
 unsigned short last_lun;
 unsigned short word127;







 unsigned short dlf;
# 605 "/usr/include/linux/hdreg.h" 3 4
 unsigned short csfo;







 unsigned short words130_155[26];
 unsigned short word156;
 unsigned short words157_159[3];
 unsigned short cfa_power;






 unsigned short words161_175[15];
 unsigned short words176_205[30];
 unsigned short words206_254[49];
 unsigned short integrity_word;



};
# 497 "stress-ng.h" 2



# 1 "/usr/include/linux/if_alg.h" 1 3 4
# 19 "/usr/include/linux/if_alg.h" 3 4
struct sockaddr_alg {
 __u16 salg_family;
 __u8 salg_type[14];
 __u32 salg_feat;
 __u32 salg_mask;
 __u8 salg_name[64];
};
# 35 "/usr/include/linux/if_alg.h" 3 4
struct sockaddr_alg_new {
 __u16 salg_family;
 __u8 salg_type[14];
 __u32 salg_feat;
 __u32 salg_mask;
 __u8 salg_name[];
};

struct af_alg_iv {
 __u32 ivlen;
 __u8 iv[0];
};
# 501 "stress-ng.h" 2



# 1 "/usr/include/linux/if_packet.h" 1 3 4







struct sockaddr_pkt {
 unsigned short spkt_family;
 unsigned char spkt_device[14];
 __be16 spkt_protocol;
};

struct sockaddr_ll {
 unsigned short sll_family;
 __be16 sll_protocol;
 int sll_ifindex;
 unsigned short sll_hatype;
 unsigned char sll_pkttype;
 unsigned char sll_halen;
 unsigned char sll_addr[8];
};
# 75 "/usr/include/linux/if_packet.h" 3 4
struct tpacket_stats {
 unsigned int tp_packets;
 unsigned int tp_drops;
};

struct tpacket_stats_v3 {
 unsigned int tp_packets;
 unsigned int tp_drops;
 unsigned int tp_freeze_q_cnt;
};

struct tpacket_rollover_stats {
 __u64 __attribute__((aligned(8))) tp_all;
 __u64 __attribute__((aligned(8))) tp_huge;
 __u64 __attribute__((aligned(8))) tp_failed;
};

union tpacket_stats_u {
 struct tpacket_stats stats1;
 struct tpacket_stats_v3 stats3;
};

struct tpacket_auxdata {
 __u32 tp_status;
 __u32 tp_len;
 __u32 tp_snaplen;
 __u16 tp_mac;
 __u16 tp_net;
 __u16 tp_vlan_tci;
 __u16 tp_vlan_tpid;
};
# 132 "/usr/include/linux/if_packet.h" 3 4
struct tpacket_hdr {
 unsigned long tp_status;
 unsigned int tp_len;
 unsigned int tp_snaplen;
 unsigned short tp_mac;
 unsigned short tp_net;
 unsigned int tp_sec;
 unsigned int tp_usec;
};





struct tpacket2_hdr {
 __u32 tp_status;
 __u32 tp_len;
 __u32 tp_snaplen;
 __u16 tp_mac;
 __u16 tp_net;
 __u32 tp_sec;
 __u32 tp_nsec;
 __u16 tp_vlan_tci;
 __u16 tp_vlan_tpid;
 __u8 tp_padding[4];
};

struct tpacket_hdr_variant1 {
 __u32 tp_rxhash;
 __u32 tp_vlan_tci;
 __u16 tp_vlan_tpid;
 __u16 tp_padding;
};

struct tpacket3_hdr {
 __u32 tp_next_offset;
 __u32 tp_sec;
 __u32 tp_nsec;
 __u32 tp_snaplen;
 __u32 tp_len;
 __u32 tp_status;
 __u16 tp_mac;
 __u16 tp_net;

 union {
  struct tpacket_hdr_variant1 hv1;
 };
 __u8 tp_padding[8];
};

struct tpacket_bd_ts {
 unsigned int ts_sec;
 union {
  unsigned int ts_usec;
  unsigned int ts_nsec;
 };
};

struct tpacket_hdr_v1 {
 __u32 block_status;
 __u32 num_pkts;
 __u32 offset_to_first_pkt;




 __u32 blk_len;
# 209 "/usr/include/linux/if_packet.h" 3 4
 __u64 __attribute__((aligned(8))) seq_num;
# 236 "/usr/include/linux/if_packet.h" 3 4
 struct tpacket_bd_ts ts_first_pkt, ts_last_pkt;
};

union tpacket_bd_header_u {
 struct tpacket_hdr_v1 bh1;
};

struct tpacket_block_desc {
 __u32 version;
 __u32 offset_to_priv;
 union tpacket_bd_header_u hdr;
};




enum tpacket_versions {
 TPACKET_V1,
 TPACKET_V2,
 TPACKET_V3
};
# 271 "/usr/include/linux/if_packet.h" 3 4
struct tpacket_req {
 unsigned int tp_block_size;
 unsigned int tp_block_nr;
 unsigned int tp_frame_size;
 unsigned int tp_frame_nr;
};

struct tpacket_req3 {
 unsigned int tp_block_size;
 unsigned int tp_block_nr;
 unsigned int tp_frame_size;
 unsigned int tp_frame_nr;
 unsigned int tp_retire_blk_tov;
 unsigned int tp_sizeof_priv;
 unsigned int tp_feature_req_word;
};

union tpacket_req_u {
 struct tpacket_req req;
 struct tpacket_req3 req3;
};

struct packet_mreq {
 int mr_ifindex;
 unsigned short mr_type;
 unsigned short mr_alen;
 unsigned char mr_address[8];
};

struct fanout_args {

 __u16 id;
 __u16 type_flags;




 __u32 max_num_members;
};
# 505 "stress-ng.h" 2



# 1 "/usr/include/linux/if_tun.h" 1 3 4
# 21 "/usr/include/linux/if_tun.h" 3 4
# 1 "/usr/include/linux/if_ether.h" 1 3 4
# 168 "/usr/include/linux/if_ether.h" 3 4
struct ethhdr {
 unsigned char h_dest[6];
 unsigned char h_source[6];
 __be16 h_proto;
} __attribute__((packed));
# 22 "/usr/include/linux/if_tun.h" 2 3 4
# 1 "/usr/include/linux/filter.h" 1 3 4
# 11 "/usr/include/linux/filter.h" 3 4
# 1 "/usr/include/linux/bpf_common.h" 1 3 4
# 12 "/usr/include/linux/filter.h" 2 3 4
# 24 "/usr/include/linux/filter.h" 3 4
struct sock_filter {
 __u16 code;
 __u8 jt;
 __u8 jf;
 __u32 k;
};

struct sock_fprog {
 unsigned short len;
 struct sock_filter *filter;
};
# 23 "/usr/include/linux/if_tun.h" 2 3 4
# 94 "/usr/include/linux/if_tun.h" 3 4
struct tun_pi {
 __u16 flags;
 __be16 proto;
};
# 108 "/usr/include/linux/if_tun.h" 3 4
struct tun_filter {
 __u16 flags;
 __u16 count;
 __u8 addr[0][6];
};
# 509 "stress-ng.h" 2



# 1 "/usr/include/linux/io_uring.h" 1 3 4
# 11 "/usr/include/linux/io_uring.h" 3 4
# 1 "/usr/include/linux/fs.h" 1 3 4
# 16 "/usr/include/linux/fs.h" 3 4
# 1 "/usr/include/linux/fscrypt.h" 1 3 4
# 40 "/usr/include/linux/fscrypt.h" 3 4
struct fscrypt_policy_v1 {
 __u8 version;
 __u8 contents_encryption_mode;
 __u8 filenames_encryption_mode;
 __u8 flags;
 __u8 master_key_descriptor[8];
};
# 55 "/usr/include/linux/fscrypt.h" 3 4
struct fscrypt_key {
 __u32 mode;
 __u8 raw[64];
 __u32 size;
};






struct fscrypt_policy_v2 {
 __u8 version;
 __u8 contents_encryption_mode;
 __u8 filenames_encryption_mode;
 __u8 flags;
 __u8 __reserved[4];
 __u8 master_key_identifier[16];
};


struct fscrypt_get_policy_ex_arg {
 __u64 policy_size;
 union {
  __u8 version;
  struct fscrypt_policy_v1 v1;
  struct fscrypt_policy_v2 v2;
 } policy;
};
# 102 "/usr/include/linux/fscrypt.h" 3 4
struct fscrypt_key_specifier {
 __u32 type;
 __u32 __reserved;
 union {
  __u8 __reserved[32];
  __u8 descriptor[8];
  __u8 identifier[16];
 } u;
};





struct fscrypt_provisioning_key_payload {
 __u32 type;
 __u32 __reserved;
 __u8 raw[];
};


struct fscrypt_add_key_arg {
 struct fscrypt_key_specifier key_spec;
 __u32 raw_size;
 __u32 key_id;
 __u32 __reserved[8];
 __u8 raw[];
};


struct fscrypt_remove_key_arg {
 struct fscrypt_key_specifier key_spec;


 __u32 removal_status_flags;
 __u32 __reserved[5];
};


struct fscrypt_get_key_status_arg {

 struct fscrypt_key_specifier key_spec;
 __u32 __reserved[6];





 __u32 status;

 __u32 status_flags;
 __u32 user_count;
 __u32 __out_reserved[13];
};
# 17 "/usr/include/linux/fs.h" 2 3 4


# 1 "/usr/include/linux/mount.h" 1 3 4
# 95 "/usr/include/linux/mount.h" 3 4
enum fsconfig_command {
 FSCONFIG_SET_FLAG = 0,
 FSCONFIG_SET_STRING = 1,
 FSCONFIG_SET_BINARY = 2,
 FSCONFIG_SET_PATH = 3,
 FSCONFIG_SET_PATH_EMPTY = 4,
 FSCONFIG_SET_FD = 5,
 FSCONFIG_CMD_CREATE = 6,
 FSCONFIG_CMD_RECONFIGURE = 7,
};
# 129 "/usr/include/linux/mount.h" 3 4
struct mount_attr {
 __u64 attr_set;
 __u64 attr_clr;
 __u64 propagation;
 __u64 userns_fd;
};
# 20 "/usr/include/linux/fs.h" 2 3 4
# 50 "/usr/include/linux/fs.h" 3 4
struct file_clone_range {
 __s64 src_fd;
 __u64 src_offset;
 __u64 src_length;
 __u64 dest_offset;
};

struct fstrim_range {
 __u64 start;
 __u64 len;
 __u64 minlen;
};






struct file_dedupe_range_info {
 __s64 dest_fd;
 __u64 dest_offset;
 __u64 bytes_deduped;






 __s32 status;
 __u32 reserved;
};


struct file_dedupe_range {
 __u64 src_offset;
 __u64 src_length;
 __u16 dest_count;
 __u16 reserved1;
 __u32 reserved2;
 struct file_dedupe_range_info info[0];
};


struct files_stat_struct {
 unsigned long nr_files;
 unsigned long nr_free_files;
 unsigned long max_files;
};

struct inodes_stat_t {
 long nr_inodes;
 long nr_unused;
 long dummy[5];
};







struct fsxattr {
 __u32 fsx_xflags;
 __u32 fsx_extsize;
 __u32 fsx_nextents;
 __u32 fsx_projid;
 __u32 fsx_cowextsize;
 unsigned char fsx_pad[8];
};
# 283 "/usr/include/linux/fs.h" 3 4
typedef int __kernel_rwf_t;
# 12 "/usr/include/linux/io_uring.h" 2 3 4





struct io_uring_sqe {
 __u8 opcode;
 __u8 flags;
 __u16 ioprio;
 __s32 fd;
 union {
  __u64 off;
  __u64 addr2;
 };
 union {
  __u64 addr;
  __u64 splice_off_in;
 };
 __u32 len;
 union {
  __kernel_rwf_t rw_flags;
  __u32 fsync_flags;
  __u16 poll_events;
  __u32 poll32_events;
  __u32 sync_range_flags;
  __u32 msg_flags;
  __u32 timeout_flags;
  __u32 accept_flags;
  __u32 cancel_flags;
  __u32 open_flags;
  __u32 statx_flags;
  __u32 fadvise_advice;
  __u32 splice_flags;
  __u32 rename_flags;
  __u32 unlink_flags;
  __u32 hardlink_flags;
 };
 __u64 user_data;

 union {

  __u16 buf_index;

  __u16 buf_group;
 } __attribute__((packed));

 __u16 personality;
 union {
  __s32 splice_fd_in;
  __u32 file_index;
 };
 __u64 __pad2[2];
};

enum {
 IOSQE_FIXED_FILE_BIT,
 IOSQE_IO_DRAIN_BIT,
 IOSQE_IO_LINK_BIT,
 IOSQE_IO_HARDLINK_BIT,
 IOSQE_ASYNC_BIT,
 IOSQE_BUFFER_SELECT_BIT,
};
# 102 "/usr/include/linux/io_uring.h" 3 4
enum {
 IORING_OP_NOP,
 IORING_OP_READV,
 IORING_OP_WRITEV,
 IORING_OP_FSYNC,
 IORING_OP_READ_FIXED,
 IORING_OP_WRITE_FIXED,
 IORING_OP_POLL_ADD,
 IORING_OP_POLL_REMOVE,
 IORING_OP_SYNC_FILE_RANGE,
 IORING_OP_SENDMSG,
 IORING_OP_RECVMSG,
 IORING_OP_TIMEOUT,
 IORING_OP_TIMEOUT_REMOVE,
 IORING_OP_ACCEPT,
 IORING_OP_ASYNC_CANCEL,
 IORING_OP_LINK_TIMEOUT,
 IORING_OP_CONNECT,
 IORING_OP_FALLOCATE,
 IORING_OP_OPENAT,
 IORING_OP_CLOSE,
 IORING_OP_FILES_UPDATE,
 IORING_OP_STATX,
 IORING_OP_READ,
 IORING_OP_WRITE,
 IORING_OP_FADVISE,
 IORING_OP_MADVISE,
 IORING_OP_SEND,
 IORING_OP_RECV,
 IORING_OP_OPENAT2,
 IORING_OP_EPOLL_CTL,
 IORING_OP_SPLICE,
 IORING_OP_PROVIDE_BUFFERS,
 IORING_OP_REMOVE_BUFFERS,
 IORING_OP_TEE,
 IORING_OP_SHUTDOWN,
 IORING_OP_RENAMEAT,
 IORING_OP_UNLINKAT,
 IORING_OP_MKDIRAT,
 IORING_OP_SYMLINKAT,
 IORING_OP_LINKAT,


 IORING_OP_LAST,
};
# 187 "/usr/include/linux/io_uring.h" 3 4
struct io_uring_cqe {
 __u64 user_data;
 __s32 res;
 __u32 flags;
};
# 202 "/usr/include/linux/io_uring.h" 3 4
enum {
 IORING_CQE_BUFFER_SHIFT = 16,
};
# 216 "/usr/include/linux/io_uring.h" 3 4
struct io_sqring_offsets {
 __u32 head;
 __u32 tail;
 __u32 ring_mask;
 __u32 ring_entries;
 __u32 flags;
 __u32 dropped;
 __u32 array;
 __u32 resv1;
 __u64 resv2;
};







struct io_cqring_offsets {
 __u32 head;
 __u32 tail;
 __u32 ring_mask;
 __u32 ring_entries;
 __u32 overflow;
 __u32 cqes;
 __u32 flags;
 __u32 resv1;
 __u64 resv2;
};
# 264 "/usr/include/linux/io_uring.h" 3 4
struct io_uring_params {
 __u32 sq_entries;
 __u32 cq_entries;
 __u32 flags;
 __u32 sq_thread_cpu;
 __u32 sq_thread_idle;
 __u32 features;
 __u32 wq_fd;
 __u32 resv[3];
 struct io_sqring_offsets sq_off;
 struct io_cqring_offsets cq_off;
};
# 295 "/usr/include/linux/io_uring.h" 3 4
enum {
 IORING_REGISTER_BUFFERS = 0,
 IORING_UNREGISTER_BUFFERS = 1,
 IORING_REGISTER_FILES = 2,
 IORING_UNREGISTER_FILES = 3,
 IORING_REGISTER_EVENTFD = 4,
 IORING_UNREGISTER_EVENTFD = 5,
 IORING_REGISTER_FILES_UPDATE = 6,
 IORING_REGISTER_EVENTFD_ASYNC = 7,
 IORING_REGISTER_PROBE = 8,
 IORING_REGISTER_PERSONALITY = 9,
 IORING_UNREGISTER_PERSONALITY = 10,
 IORING_REGISTER_RESTRICTIONS = 11,
 IORING_REGISTER_ENABLE_RINGS = 12,


 IORING_REGISTER_FILES2 = 13,
 IORING_REGISTER_FILES_UPDATE2 = 14,
 IORING_REGISTER_BUFFERS2 = 15,
 IORING_REGISTER_BUFFERS_UPDATE = 16,


 IORING_REGISTER_IOWQ_AFF = 17,
 IORING_UNREGISTER_IOWQ_AFF = 18,


 IORING_REGISTER_IOWQ_MAX_WORKERS = 19,


 IORING_REGISTER_LAST
};


enum {
 IO_WQ_BOUND,
 IO_WQ_UNBOUND,
};


struct io_uring_files_update {
 __u32 offset;
 __u32 resv;
 __u64 __attribute__((aligned(8))) fds;
};

struct io_uring_rsrc_register {
 __u32 nr;
 __u32 resv;
 __u64 resv2;
 __u64 __attribute__((aligned(8))) data;
 __u64 __attribute__((aligned(8))) tags;
};

struct io_uring_rsrc_update {
 __u32 offset;
 __u32 resv;
 __u64 __attribute__((aligned(8))) data;
};

struct io_uring_rsrc_update2 {
 __u32 offset;
 __u32 resv;
 __u64 __attribute__((aligned(8))) data;
 __u64 __attribute__((aligned(8))) tags;
 __u32 nr;
 __u32 resv2;
};






struct io_uring_probe_op {
 __u8 op;
 __u8 resv;
 __u16 flags;
 __u32 resv2;
};

struct io_uring_probe {
 __u8 last_op;
 __u8 ops_len;
 __u16 resv;
 __u32 resv2[3];
 struct io_uring_probe_op ops[0];
};

struct io_uring_restriction {
 __u16 opcode;
 union {
  __u8 register_op;
  __u8 sqe_op;
  __u8 sqe_flags;
 };
 __u8 resv;
 __u32 resv2[3];
};




enum {

 IORING_RESTRICTION_REGISTER_OP = 0,


 IORING_RESTRICTION_SQE_OP = 1,


 IORING_RESTRICTION_SQE_FLAGS_ALLOWED = 2,


 IORING_RESTRICTION_SQE_FLAGS_REQUIRED = 3,

 IORING_RESTRICTION_LAST
};

struct io_uring_getevents_arg {
 __u64 sigmask;
 __u32 sigmask_sz;
 __u32 pad;
 __u64 ts;
};
# 513 "stress-ng.h" 2



# 1 "/usr/include/linux/fiemap.h" 1 3 4
# 17 "/usr/include/linux/fiemap.h" 3 4
struct fiemap_extent {
 __u64 fe_logical;

 __u64 fe_physical;

 __u64 fe_length;
 __u64 fe_reserved64[2];
 __u32 fe_flags;
 __u32 fe_reserved[3];
};

struct fiemap {
 __u64 fm_start;

 __u64 fm_length;

 __u32 fm_flags;
 __u32 fm_mapped_extents;
 __u32 fm_extent_count;
 __u32 fm_reserved;
 struct fiemap_extent fm_extents[0];
};
# 517 "stress-ng.h" 2
# 528 "stress-ng.h"
# 1 "/usr/include/linux/fsverity.h" 1 3 4
# 19 "/usr/include/linux/fsverity.h" 3 4
struct fsverity_enable_arg {
 __u32 version;
 __u32 hash_algorithm;
 __u32 block_size;
 __u32 salt_size;
 __u64 salt_ptr;
 __u32 sig_size;
 __u32 __reserved1;
 __u64 sig_ptr;
 __u64 __reserved2[11];
};

struct fsverity_digest {
 __u16 digest_algorithm;
 __u16 digest_size;
 __u8 digest[];
};
# 47 "/usr/include/linux/fsverity.h" 3 4
struct fsverity_descriptor {
 __u8 version;
 __u8 hash_algorithm;
 __u8 log_blocksize;
 __u8 salt_size;
 __le32 __reserved_0x04;
 __le64 data_size;
 __u8 root_hash[64];
 __u8 salt[32];
 __u8 __reserved[144];
};
# 72 "/usr/include/linux/fsverity.h" 3 4
struct fsverity_formatted_digest {
 char magic[8];
 __le16 digest_algorithm;
 __le16 digest_size;
 __u8 digest[];
};





struct fsverity_read_metadata_arg {
 __u64 metadata_type;
 __u64 offset;
 __u64 length;
 __u64 buf_ptr;
 __u64 __reserved;
};
# 529 "stress-ng.h" 2



# 1 "/usr/include/linux/futex.h" 1 3 4
# 60 "/usr/include/linux/futex.h" 3 4
struct robust_list {
 struct robust_list *next;
};
# 72 "/usr/include/linux/futex.h" 3 4
struct robust_list_head {



 struct robust_list list;







 long futex_offset;
# 96 "/usr/include/linux/futex.h" 3 4
 struct robust_list *list_op_pending;
};
# 533 "stress-ng.h" 2



# 1 "/usr/include/linux/hpet.h" 1 3 4







struct hpet_info {
 unsigned long hi_ireqfreq;
 unsigned long hi_flags;
 unsigned short hi_hpet;
 unsigned short hi_timer;
};
# 537 "stress-ng.h" 2



# 1 "/usr/include/linux/kd.h" 1 3 4
# 14 "/usr/include/linux/kd.h" 3 4
struct consolefontdesc {
 unsigned short charcount;
 unsigned short charheight;
 char *chardata;
};
# 54 "/usr/include/linux/kd.h" 3 4
typedef char scrnmap_t;







struct unipair {
 unsigned short unicode;
 unsigned short fontpos;
};
struct unimapdesc {
 unsigned short entry_ct;
 struct unipair *entries;
};


struct unimapinit {
 unsigned short advised_hashsize;
 unsigned short advised_hashstep;
 unsigned short advised_hashlevel;
};
# 100 "/usr/include/linux/kd.h" 3 4
struct kbentry {
 unsigned char kb_table;
 unsigned char kb_index;
 unsigned short kb_value;
};
# 113 "/usr/include/linux/kd.h" 3 4
struct kbsentry {
 unsigned char kb_func;
 unsigned char kb_string[512];
};



struct kbdiacr {
        unsigned char diacr, base, result;
};
struct kbdiacrs {
        unsigned int kb_cnt;
 struct kbdiacr kbdiacr[256];
};



struct kbdiacruc {
 unsigned int diacr, base, result;
};
struct kbdiacrsuc {
        unsigned int kb_cnt;
 struct kbdiacruc kbdiacruc[256];
};



struct kbkeycode {
 unsigned int scancode, keycode;
};





struct kbd_repeat {
 int delay;
 int period;

};






struct console_font_op {
 unsigned int op;
 unsigned int flags;
 unsigned int width, height;
 unsigned int charcount;
 unsigned char *data;
};

struct console_font {
 unsigned int width, height;
 unsigned int charcount;
 unsigned char *data;
};
# 541 "stress-ng.h" 2



# 1 "/usr/include/linux/loop.h" 1 3 4
# 21 "/usr/include/linux/loop.h" 3 4
enum {
 LO_FLAGS_READ_ONLY = 1,
 LO_FLAGS_AUTOCLEAR = 4,
 LO_FLAGS_PARTSCAN = 8,
 LO_FLAGS_DIRECT_IO = 16,
};
# 42 "/usr/include/linux/loop.h" 3 4
struct loop_info {
 int lo_number;
 __kernel_old_dev_t lo_device;
 unsigned long lo_inode;
 __kernel_old_dev_t lo_rdevice;
 int lo_offset;
 int lo_encrypt_type;
 int lo_encrypt_key_size;
 int lo_flags;
 char lo_name[64];
 unsigned char lo_encrypt_key[32];
 unsigned long lo_init[2];
 char reserved[4];
};

struct loop_info64 {
 __u64 lo_device;
 __u64 lo_inode;
 __u64 lo_rdevice;
 __u64 lo_offset;
 __u64 lo_sizelimit;
 __u32 lo_number;
 __u32 lo_encrypt_type;
 __u32 lo_encrypt_key_size;
 __u32 lo_flags;
 __u8 lo_file_name[64];
 __u8 lo_crypt_name[64];
 __u8 lo_encrypt_key[32];
 __u64 lo_init[2];
};
# 82 "/usr/include/linux/loop.h" 3 4
struct loop_config {
 __u32 fd;
 __u32 block_size;
 struct loop_info64 info;
 __u64 __reserved[8];
};
# 545 "stress-ng.h" 2



# 1 "/usr/include/linux/media.h" 1 3 4
# 27 "/usr/include/linux/media.h" 3 4
struct media_device_info {
 char driver[16];
 char model[32];
 char serial[40];
 char bus_info[32];
 __u32 media_version;
 __u32 hw_revision;
 __u32 driver_version;
 __u32 reserved[31];
};
# 150 "/usr/include/linux/media.h" 3 4
struct media_entity_desc {
 __u32 id;
 char name[32];
 __u32 type;
 __u32 revision;
 __u32 flags;
 __u32 group_id;
 __u16 pads;
 __u16 links;

 __u32 reserved[4];

 union {

  struct {
   __u32 major;
   __u32 minor;
  } dev;
# 180 "/usr/include/linux/media.h" 3 4
  struct {
   __u32 card;
   __u32 device;
   __u32 subdevice;
  } alsa;






  struct {
   __u32 major;
   __u32 minor;
  } v4l;
  struct {
   __u32 major;
   __u32 minor;
  } fb;
  int dvb;



  __u8 raw[184];
 };
};





struct media_pad_desc {
 __u32 entity;
 __u16 index;
 __u32 flags;
 __u32 reserved[2];
};
# 226 "/usr/include/linux/media.h" 3 4
struct media_link_desc {
 struct media_pad_desc source;
 struct media_pad_desc sink;
 __u32 flags;
 __u32 reserved[2];
};

struct media_links_enum {
 __u32 entity;

 struct media_pad_desc *pads;

 struct media_link_desc *links;
 __u32 reserved[4];
};
# 281 "/usr/include/linux/media.h" 3 4
struct media_v2_entity {
 __u32 id;
 char name[64];
 __u32 function;
 __u32 flags;
 __u32 reserved[5];
} __attribute__ ((packed));


struct media_v2_intf_devnode {
 __u32 major;
 __u32 minor;
} __attribute__ ((packed));

struct media_v2_interface {
 __u32 id;
 __u32 intf_type;
 __u32 flags;
 __u32 reserved[9];

 union {
  struct media_v2_intf_devnode devnode;
  __u32 raw[16];
 };
} __attribute__ ((packed));
# 316 "/usr/include/linux/media.h" 3 4
struct media_v2_pad {
 __u32 id;
 __u32 entity_id;
 __u32 flags;
 __u32 index;
 __u32 reserved[4];
} __attribute__ ((packed));

struct media_v2_link {
 __u32 id;
 __u32 source_id;
 __u32 sink_id;
 __u32 flags;
 __u32 reserved[6];
} __attribute__ ((packed));

struct media_v2_topology {
 __u64 topology_version;

 __u32 num_entities;
 __u32 reserved1;
 __u64 ptr_entities;

 __u32 num_interfaces;
 __u32 reserved2;
 __u64 ptr_interfaces;

 __u32 num_pads;
 __u32 reserved3;
 __u64 ptr_pads;

 __u32 num_links;
 __u32 reserved4;
 __u64 ptr_links;
} __attribute__ ((packed));
# 549 "stress-ng.h" 2



# 1 "/usr/include/linux/membarrier.h" 1 3 4
# 145 "/usr/include/linux/membarrier.h" 3 4
enum membarrier_cmd {
 MEMBARRIER_CMD_QUERY = 0,
 MEMBARRIER_CMD_GLOBAL = (1 << 0),
 MEMBARRIER_CMD_GLOBAL_EXPEDITED = (1 << 1),
 MEMBARRIER_CMD_REGISTER_GLOBAL_EXPEDITED = (1 << 2),
 MEMBARRIER_CMD_PRIVATE_EXPEDITED = (1 << 3),
 MEMBARRIER_CMD_REGISTER_PRIVATE_EXPEDITED = (1 << 4),
 MEMBARRIER_CMD_PRIVATE_EXPEDITED_SYNC_CORE = (1 << 5),
 MEMBARRIER_CMD_REGISTER_PRIVATE_EXPEDITED_SYNC_CORE = (1 << 6),
 MEMBARRIER_CMD_PRIVATE_EXPEDITED_RSEQ = (1 << 7),
 MEMBARRIER_CMD_REGISTER_PRIVATE_EXPEDITED_RSEQ = (1 << 8),


 MEMBARRIER_CMD_SHARED = MEMBARRIER_CMD_GLOBAL,
};

enum membarrier_cmd_flag {
 MEMBARRIER_CMD_FLAG_CPU = (1 << 0),
};
# 553 "stress-ng.h" 2



# 1 "/usr/include/linux/mempolicy.h" 1 3 4
# 9 "/usr/include/linux/mempolicy.h" 3 4
# 1 "/usr/include/linux/errno.h" 1 3 4
# 1 "/usr/include/aarch64-linux-gnu/asm/errno.h" 1 3 4
# 2 "/usr/include/linux/errno.h" 2 3 4
# 10 "/usr/include/linux/mempolicy.h" 2 3 4
# 19 "/usr/include/linux/mempolicy.h" 3 4
enum {
 MPOL_DEFAULT,
 MPOL_PREFERRED,
 MPOL_BIND,
 MPOL_INTERLEAVE,
 MPOL_LOCAL,
 MPOL_PREFERRED_MANY,
 MPOL_MAX,
};
# 557 "stress-ng.h" 2







# 1 "/usr/include/linux/openat2.h" 1 3 4
# 19 "/usr/include/linux/openat2.h" 3 4
struct open_how {
 __u64 flags;
 __u64 mode;
 __u64 resolve;
};
# 565 "stress-ng.h" 2



# 1 "/usr/include/linux/pci.h" 1 3 4
# 21 "/usr/include/linux/pci.h" 3 4
# 1 "/usr/include/linux/pci_regs.h" 1 3 4
# 22 "/usr/include/linux/pci.h" 2 3 4
# 569 "stress-ng.h" 2



# 1 "/usr/include/linux/perf_event.h" 1 3 4
# 29 "/usr/include/linux/perf_event.h" 3 4
enum perf_type_id {
 PERF_TYPE_HARDWARE = 0,
 PERF_TYPE_SOFTWARE = 1,
 PERF_TYPE_TRACEPOINT = 2,
 PERF_TYPE_HW_CACHE = 3,
 PERF_TYPE_RAW = 4,
 PERF_TYPE_BREAKPOINT = 5,

 PERF_TYPE_MAX,
};
# 60 "/usr/include/linux/perf_event.h" 3 4
enum perf_hw_id {



 PERF_COUNT_HW_CPU_CYCLES = 0,
 PERF_COUNT_HW_INSTRUCTIONS = 1,
 PERF_COUNT_HW_CACHE_REFERENCES = 2,
 PERF_COUNT_HW_CACHE_MISSES = 3,
 PERF_COUNT_HW_BRANCH_INSTRUCTIONS = 4,
 PERF_COUNT_HW_BRANCH_MISSES = 5,
 PERF_COUNT_HW_BUS_CYCLES = 6,
 PERF_COUNT_HW_STALLED_CYCLES_FRONTEND = 7,
 PERF_COUNT_HW_STALLED_CYCLES_BACKEND = 8,
 PERF_COUNT_HW_REF_CPU_CYCLES = 9,

 PERF_COUNT_HW_MAX,
};
# 85 "/usr/include/linux/perf_event.h" 3 4
enum perf_hw_cache_id {
 PERF_COUNT_HW_CACHE_L1D = 0,
 PERF_COUNT_HW_CACHE_L1I = 1,
 PERF_COUNT_HW_CACHE_LL = 2,
 PERF_COUNT_HW_CACHE_DTLB = 3,
 PERF_COUNT_HW_CACHE_ITLB = 4,
 PERF_COUNT_HW_CACHE_BPU = 5,
 PERF_COUNT_HW_CACHE_NODE = 6,

 PERF_COUNT_HW_CACHE_MAX,
};

enum perf_hw_cache_op_id {
 PERF_COUNT_HW_CACHE_OP_READ = 0,
 PERF_COUNT_HW_CACHE_OP_WRITE = 1,
 PERF_COUNT_HW_CACHE_OP_PREFETCH = 2,

 PERF_COUNT_HW_CACHE_OP_MAX,
};

enum perf_hw_cache_op_result_id {
 PERF_COUNT_HW_CACHE_RESULT_ACCESS = 0,
 PERF_COUNT_HW_CACHE_RESULT_MISS = 1,

 PERF_COUNT_HW_CACHE_RESULT_MAX,
};







enum perf_sw_ids {
 PERF_COUNT_SW_CPU_CLOCK = 0,
 PERF_COUNT_SW_TASK_CLOCK = 1,
 PERF_COUNT_SW_PAGE_FAULTS = 2,
 PERF_COUNT_SW_CONTEXT_SWITCHES = 3,
 PERF_COUNT_SW_CPU_MIGRATIONS = 4,
 PERF_COUNT_SW_PAGE_FAULTS_MIN = 5,
 PERF_COUNT_SW_PAGE_FAULTS_MAJ = 6,
 PERF_COUNT_SW_ALIGNMENT_FAULTS = 7,
 PERF_COUNT_SW_EMULATION_FAULTS = 8,
 PERF_COUNT_SW_DUMMY = 9,
 PERF_COUNT_SW_BPF_OUTPUT = 10,
 PERF_COUNT_SW_CGROUP_SWITCHES = 11,

 PERF_COUNT_SW_MAX,
};





enum perf_event_sample_format {
 PERF_SAMPLE_IP = 1U << 0,
 PERF_SAMPLE_TID = 1U << 1,
 PERF_SAMPLE_TIME = 1U << 2,
 PERF_SAMPLE_ADDR = 1U << 3,
 PERF_SAMPLE_READ = 1U << 4,
 PERF_SAMPLE_CALLCHAIN = 1U << 5,
 PERF_SAMPLE_ID = 1U << 6,
 PERF_SAMPLE_CPU = 1U << 7,
 PERF_SAMPLE_PERIOD = 1U << 8,
 PERF_SAMPLE_STREAM_ID = 1U << 9,
 PERF_SAMPLE_RAW = 1U << 10,
 PERF_SAMPLE_BRANCH_STACK = 1U << 11,
 PERF_SAMPLE_REGS_USER = 1U << 12,
 PERF_SAMPLE_STACK_USER = 1U << 13,
 PERF_SAMPLE_WEIGHT = 1U << 14,
 PERF_SAMPLE_DATA_SRC = 1U << 15,
 PERF_SAMPLE_IDENTIFIER = 1U << 16,
 PERF_SAMPLE_TRANSACTION = 1U << 17,
 PERF_SAMPLE_REGS_INTR = 1U << 18,
 PERF_SAMPLE_PHYS_ADDR = 1U << 19,
 PERF_SAMPLE_AUX = 1U << 20,
 PERF_SAMPLE_CGROUP = 1U << 21,
 PERF_SAMPLE_DATA_PAGE_SIZE = 1U << 22,
 PERF_SAMPLE_CODE_PAGE_SIZE = 1U << 23,
 PERF_SAMPLE_WEIGHT_STRUCT = 1U << 24,

 PERF_SAMPLE_MAX = 1U << 25,

 __PERF_SAMPLE_CALLCHAIN_EARLY = 1ULL << 63,
};
# 182 "/usr/include/linux/perf_event.h" 3 4
enum perf_branch_sample_type_shift {
 PERF_SAMPLE_BRANCH_USER_SHIFT = 0,
 PERF_SAMPLE_BRANCH_KERNEL_SHIFT = 1,
 PERF_SAMPLE_BRANCH_HV_SHIFT = 2,

 PERF_SAMPLE_BRANCH_ANY_SHIFT = 3,
 PERF_SAMPLE_BRANCH_ANY_CALL_SHIFT = 4,
 PERF_SAMPLE_BRANCH_ANY_RETURN_SHIFT = 5,
 PERF_SAMPLE_BRANCH_IND_CALL_SHIFT = 6,
 PERF_SAMPLE_BRANCH_ABORT_TX_SHIFT = 7,
 PERF_SAMPLE_BRANCH_IN_TX_SHIFT = 8,
 PERF_SAMPLE_BRANCH_NO_TX_SHIFT = 9,
 PERF_SAMPLE_BRANCH_COND_SHIFT = 10,

 PERF_SAMPLE_BRANCH_CALL_STACK_SHIFT = 11,
 PERF_SAMPLE_BRANCH_IND_JUMP_SHIFT = 12,
 PERF_SAMPLE_BRANCH_CALL_SHIFT = 13,

 PERF_SAMPLE_BRANCH_NO_FLAGS_SHIFT = 14,
 PERF_SAMPLE_BRANCH_NO_CYCLES_SHIFT = 15,

 PERF_SAMPLE_BRANCH_TYPE_SAVE_SHIFT = 16,

 PERF_SAMPLE_BRANCH_HW_INDEX_SHIFT = 17,

 PERF_SAMPLE_BRANCH_MAX_SHIFT
};

enum perf_branch_sample_type {
 PERF_SAMPLE_BRANCH_USER = 1U << PERF_SAMPLE_BRANCH_USER_SHIFT,
 PERF_SAMPLE_BRANCH_KERNEL = 1U << PERF_SAMPLE_BRANCH_KERNEL_SHIFT,
 PERF_SAMPLE_BRANCH_HV = 1U << PERF_SAMPLE_BRANCH_HV_SHIFT,

 PERF_SAMPLE_BRANCH_ANY = 1U << PERF_SAMPLE_BRANCH_ANY_SHIFT,
 PERF_SAMPLE_BRANCH_ANY_CALL = 1U << PERF_SAMPLE_BRANCH_ANY_CALL_SHIFT,
 PERF_SAMPLE_BRANCH_ANY_RETURN = 1U << PERF_SAMPLE_BRANCH_ANY_RETURN_SHIFT,
 PERF_SAMPLE_BRANCH_IND_CALL = 1U << PERF_SAMPLE_BRANCH_IND_CALL_SHIFT,
 PERF_SAMPLE_BRANCH_ABORT_TX = 1U << PERF_SAMPLE_BRANCH_ABORT_TX_SHIFT,
 PERF_SAMPLE_BRANCH_IN_TX = 1U << PERF_SAMPLE_BRANCH_IN_TX_SHIFT,
 PERF_SAMPLE_BRANCH_NO_TX = 1U << PERF_SAMPLE_BRANCH_NO_TX_SHIFT,
 PERF_SAMPLE_BRANCH_COND = 1U << PERF_SAMPLE_BRANCH_COND_SHIFT,

 PERF_SAMPLE_BRANCH_CALL_STACK = 1U << PERF_SAMPLE_BRANCH_CALL_STACK_SHIFT,
 PERF_SAMPLE_BRANCH_IND_JUMP = 1U << PERF_SAMPLE_BRANCH_IND_JUMP_SHIFT,
 PERF_SAMPLE_BRANCH_CALL = 1U << PERF_SAMPLE_BRANCH_CALL_SHIFT,

 PERF_SAMPLE_BRANCH_NO_FLAGS = 1U << PERF_SAMPLE_BRANCH_NO_FLAGS_SHIFT,
 PERF_SAMPLE_BRANCH_NO_CYCLES = 1U << PERF_SAMPLE_BRANCH_NO_CYCLES_SHIFT,

 PERF_SAMPLE_BRANCH_TYPE_SAVE =
  1U << PERF_SAMPLE_BRANCH_TYPE_SAVE_SHIFT,

 PERF_SAMPLE_BRANCH_HW_INDEX = 1U << PERF_SAMPLE_BRANCH_HW_INDEX_SHIFT,

 PERF_SAMPLE_BRANCH_MAX = 1U << PERF_SAMPLE_BRANCH_MAX_SHIFT,
};




enum {
 PERF_BR_UNKNOWN = 0,
 PERF_BR_COND = 1,
 PERF_BR_UNCOND = 2,
 PERF_BR_IND = 3,
 PERF_BR_CALL = 4,
 PERF_BR_IND_CALL = 5,
 PERF_BR_RET = 6,
 PERF_BR_SYSCALL = 7,
 PERF_BR_SYSRET = 8,
 PERF_BR_COND_CALL = 9,
 PERF_BR_COND_RET = 10,
 PERF_BR_ERET = 11,
 PERF_BR_IRQ = 12,
 PERF_BR_MAX,
};
# 267 "/usr/include/linux/perf_event.h" 3 4
enum perf_sample_regs_abi {
 PERF_SAMPLE_REGS_ABI_NONE = 0,
 PERF_SAMPLE_REGS_ABI_32 = 1,
 PERF_SAMPLE_REGS_ABI_64 = 2,
};





enum {
 PERF_TXN_ELISION = (1 << 0),
 PERF_TXN_TRANSACTION = (1 << 1),
 PERF_TXN_SYNC = (1 << 2),
 PERF_TXN_ASYNC = (1 << 3),
 PERF_TXN_RETRY = (1 << 4),
 PERF_TXN_CONFLICT = (1 << 5),
 PERF_TXN_CAPACITY_WRITE = (1 << 6),
 PERF_TXN_CAPACITY_READ = (1 << 7),

 PERF_TXN_MAX = (1 << 8),



 PERF_TXN_ABORT_MASK = (0xffffffffULL << 32),
 PERF_TXN_ABORT_SHIFT = 32,
};
# 317 "/usr/include/linux/perf_event.h" 3 4
enum perf_event_read_format {
 PERF_FORMAT_TOTAL_TIME_ENABLED = 1U << 0,
 PERF_FORMAT_TOTAL_TIME_RUNNING = 1U << 1,
 PERF_FORMAT_ID = 1U << 2,
 PERF_FORMAT_GROUP = 1U << 3,
 PERF_FORMAT_LOST = 1U << 4,

 PERF_FORMAT_MAX = 1U << 5,
};
# 343 "/usr/include/linux/perf_event.h" 3 4
struct perf_event_attr {




 __u32 type;




 __u32 size;




 __u64 config;

 union {
  __u64 sample_period;
  __u64 sample_freq;
 };

 __u64 sample_type;
 __u64 read_format;

 __u64 disabled : 1,
    inherit : 1,
    pinned : 1,
    exclusive : 1,
    exclude_user : 1,
    exclude_kernel : 1,
    exclude_hv : 1,
    exclude_idle : 1,
    mmap : 1,
    comm : 1,
    freq : 1,
    inherit_stat : 1,
    enable_on_exec : 1,
    task : 1,
    watermark : 1,
# 393 "/usr/include/linux/perf_event.h" 3 4
    precise_ip : 2,
    mmap_data : 1,
    sample_id_all : 1,

    exclude_host : 1,
    exclude_guest : 1,

    exclude_callchain_kernel : 1,
    exclude_callchain_user : 1,
    mmap2 : 1,
    comm_exec : 1,
    use_clockid : 1,
    context_switch : 1,
    write_backward : 1,
    namespaces : 1,
    ksymbol : 1,
    bpf_event : 1,
    aux_output : 1,
    cgroup : 1,
    text_poke : 1,
    build_id : 1,
    inherit_thread : 1,
    remove_on_exec : 1,
    sigtrap : 1,
    __reserved_1 : 26;

 union {
  __u32 wakeup_events;
  __u32 wakeup_watermark;
 };

 __u32 bp_type;
 union {
  __u64 bp_addr;
  __u64 kprobe_func;
  __u64 uprobe_path;
  __u64 config1;
 };
 union {
  __u64 bp_len;
  __u64 kprobe_addr;
  __u64 probe_offset;
  __u64 config2;
 };
 __u64 branch_sample_type;





 __u64 sample_regs_user;




 __u32 sample_stack_user;

 __s32 clockid;
# 459 "/usr/include/linux/perf_event.h" 3 4
 __u64 sample_regs_intr;




 __u32 aux_watermark;
 __u16 sample_max_stack;
 __u16 __reserved_2;
 __u32 aux_sample_size;
 __u32 __reserved_3;





 __u64 sig_data;
};






struct perf_event_query_bpf {



 __u32 ids_len;




 __u32 prog_cnt;



 __u32 ids[0];
};
# 514 "/usr/include/linux/perf_event.h" 3 4
enum perf_event_ioc_flags {
 PERF_IOC_FLAG_GROUP = 1U << 0,
};




struct perf_event_mmap_page {
 __u32 version;
 __u32 compat_version;
# 560 "/usr/include/linux/perf_event.h" 3 4
 __u32 lock;
 __u32 index;
 __s64 offset;
 __u64 time_enabled;
 __u64 time_running;
 union {
  __u64 capabilities;
  struct {
   __u64 cap_bit0 : 1,
    cap_bit0_is_deprecated : 1,

    cap_user_rdpmc : 1,
    cap_user_time : 1,
    cap_user_time_zero : 1,
    cap_user_time_short : 1,
    cap_____res : 58;
  };
 };
# 588 "/usr/include/linux/perf_event.h" 3 4
 __u16 pmc_width;
# 614 "/usr/include/linux/perf_event.h" 3 4
 __u16 time_shift;
 __u32 time_mult;
 __u64 time_offset;
# 633 "/usr/include/linux/perf_event.h" 3 4
 __u64 time_zero;

 __u32 size;
 __u32 __reserved_1;
# 649 "/usr/include/linux/perf_event.h" 3 4
 __u64 time_cycles;
 __u64 time_mask;





 __u8 __reserved[116*8];
# 674 "/usr/include/linux/perf_event.h" 3 4
 __u64 data_head;
 __u64 data_tail;
 __u64 data_offset;
 __u64 data_size;
# 690 "/usr/include/linux/perf_event.h" 3 4
 __u64 aux_head;
 __u64 aux_tail;
 __u64 aux_offset;
 __u64 aux_size;
};
# 765 "/usr/include/linux/perf_event.h" 3 4
struct perf_event_header {
 __u32 type;
 __u16 misc;
 __u16 size;
};

struct perf_ns_link_info {
 __u64 dev;
 __u64 ino;
};

enum {
 NET_NS_INDEX = 0,
 UTS_NS_INDEX = 1,
 IPC_NS_INDEX = 2,
 PID_NS_INDEX = 3,
 USER_NS_INDEX = 4,
 MNT_NS_INDEX = 5,
 CGROUP_NS_INDEX = 6,

 NR_NAMESPACES,
};

enum perf_event_type {
# 829 "/usr/include/linux/perf_event.h" 3 4
 PERF_RECORD_MMAP = 1,
# 839 "/usr/include/linux/perf_event.h" 3 4
 PERF_RECORD_LOST = 2,
# 850 "/usr/include/linux/perf_event.h" 3 4
 PERF_RECORD_COMM = 3,
# 861 "/usr/include/linux/perf_event.h" 3 4
 PERF_RECORD_EXIT = 4,
# 872 "/usr/include/linux/perf_event.h" 3 4
 PERF_RECORD_THROTTLE = 5,
 PERF_RECORD_UNTHROTTLE = 6,
# 884 "/usr/include/linux/perf_event.h" 3 4
 PERF_RECORD_FORK = 7,
# 895 "/usr/include/linux/perf_event.h" 3 4
 PERF_RECORD_READ = 8,
# 977 "/usr/include/linux/perf_event.h" 3 4
 PERF_RECORD_SAMPLE = 9,
# 1009 "/usr/include/linux/perf_event.h" 3 4
 PERF_RECORD_MMAP2 = 10,
# 1023 "/usr/include/linux/perf_event.h" 3 4
 PERF_RECORD_AUX = 11,
# 1035 "/usr/include/linux/perf_event.h" 3 4
 PERF_RECORD_ITRACE_START = 12,
# 1047 "/usr/include/linux/perf_event.h" 3 4
 PERF_RECORD_LOST_SAMPLES = 13,
# 1059 "/usr/include/linux/perf_event.h" 3 4
 PERF_RECORD_SWITCH = 14,
# 1073 "/usr/include/linux/perf_event.h" 3 4
 PERF_RECORD_SWITCH_CPU_WIDE = 15,
# 1085 "/usr/include/linux/perf_event.h" 3 4
 PERF_RECORD_NAMESPACES = 16,
# 1100 "/usr/include/linux/perf_event.h" 3 4
 PERF_RECORD_KSYMBOL = 17,
# 1119 "/usr/include/linux/perf_event.h" 3 4
 PERF_RECORD_BPF_EVENT = 18,
# 1129 "/usr/include/linux/perf_event.h" 3 4
 PERF_RECORD_CGROUP = 19,
# 1147 "/usr/include/linux/perf_event.h" 3 4
 PERF_RECORD_TEXT_POKE = 20,

 PERF_RECORD_MAX,
};

enum perf_record_ksymbol_type {
 PERF_RECORD_KSYMBOL_TYPE_UNKNOWN = 0,
 PERF_RECORD_KSYMBOL_TYPE_BPF = 1,




 PERF_RECORD_KSYMBOL_TYPE_OOL = 2,
 PERF_RECORD_KSYMBOL_TYPE_MAX
};



enum perf_bpf_event_type {
 PERF_BPF_EVENT_UNKNOWN = 0,
 PERF_BPF_EVENT_PROG_LOAD = 1,
 PERF_BPF_EVENT_PROG_UNLOAD = 2,
 PERF_BPF_EVENT_MAX,
};




enum perf_callchain_context {
 PERF_CONTEXT_HV = (__u64)-32,
 PERF_CONTEXT_KERNEL = (__u64)-128,
 PERF_CONTEXT_USER = (__u64)-512,

 PERF_CONTEXT_GUEST = (__u64)-2048,
 PERF_CONTEXT_GUEST_KERNEL = (__u64)-2176,
 PERF_CONTEXT_GUEST_USER = (__u64)-2560,

 PERF_CONTEXT_MAX = (__u64)-4095,
};
# 1206 "/usr/include/linux/perf_event.h" 3 4
union perf_mem_data_src {
 __u64 val;
 struct {
  __u64 mem_op:5,
   mem_lvl:14,
   mem_snoop:5,
   mem_lock:2,
   mem_dtlb:7,
   mem_lvl_num:4,
   mem_remote:1,
   mem_snoopx:2,
   mem_blk:3,
   mem_rsvd:21;
 };
};
# 1334 "/usr/include/linux/perf_event.h" 3 4
struct perf_branch_entry {
 __u64 from;
 __u64 to;
 __u64 mispred:1,
  predicted:1,
  in_tx:1,
  abort:1,
  cycles:16,
  type:4,
  reserved:40;
};

union perf_sample_weight {
 __u64 full;

 struct {
  __u32 var1_dw;
  __u16 var2_w;
  __u16 var3_w;
 };
# 1363 "/usr/include/linux/perf_event.h" 3 4
};
# 573 "stress-ng.h" 2



# 1 "/usr/include/linux/ptp_clock.h" 1 3 4
# 81 "/usr/include/linux/ptp_clock.h" 3 4
struct ptp_clock_time {
 __s64 sec;
 __u32 nsec;
 __u32 reserved;
};

struct ptp_clock_caps {
 int max_adj;
 int n_alarm;
 int n_ext_ts;
 int n_per_out;
 int pps;
 int n_pins;

 int cross_timestamping;

 int adjust_phase;
 int rsv[12];
};

struct ptp_extts_request {
 unsigned int index;
 unsigned int flags;
 unsigned int rsv[2];
};

struct ptp_perout_request {
 union {




  struct ptp_clock_time start;






  struct ptp_clock_time phase;
 };
 struct ptp_clock_time period;
 unsigned int index;
 unsigned int flags;
 union {





  struct ptp_clock_time on;

  unsigned int rsv[4];
 };
};



struct ptp_sys_offset {
 unsigned int n_samples;
 unsigned int rsv[3];





 struct ptp_clock_time ts[2 * 25 + 1];
};

struct ptp_sys_offset_extended {
 unsigned int n_samples;
 unsigned int rsv[3];




 struct ptp_clock_time ts[25][3];
};

struct ptp_sys_offset_precise {
 struct ptp_clock_time device;
 struct ptp_clock_time sys_realtime;
 struct ptp_clock_time sys_monoraw;
 unsigned int rsv[4];
};

enum ptp_pin_function {
 PTP_PF_NONE,
 PTP_PF_EXTTS,
 PTP_PF_PEROUT,
 PTP_PF_PHYSYNC,
};

struct ptp_pin_desc {





 char name[64];



 unsigned int index;



 unsigned int func;





 unsigned int chan;



 unsigned int rsv[5];
};
# 227 "/usr/include/linux/ptp_clock.h" 3 4
struct ptp_extts_event {
 struct ptp_clock_time t;
 unsigned int index;
 unsigned int flags;
 unsigned int rsv[2];
};
# 577 "stress-ng.h" 2







# 1 "/usr/include/linux/random.h" 1 3 4
# 13 "/usr/include/linux/random.h" 3 4
# 1 "/usr/include/linux/irqnr.h" 1 3 4
# 14 "/usr/include/linux/random.h" 2 3 4
# 41 "/usr/include/linux/random.h" 3 4
struct rand_pool_info {
 int entropy_count;
 int buf_size;
 __u32 buf[0];
};
# 585 "stress-ng.h" 2



# 1 "/usr/include/linux/rseq.h" 1 3 4
# 16 "/usr/include/linux/rseq.h" 3 4
enum rseq_cpu_id_state {
 RSEQ_CPU_ID_UNINITIALIZED = -1,
 RSEQ_CPU_ID_REGISTRATION_FAILED = -2,
};

enum rseq_flags {
 RSEQ_FLAG_UNREGISTER = (1 << 0),
};

enum rseq_cs_flags_bit {
 RSEQ_CS_FLAG_NO_RESTART_ON_PREEMPT_BIT = 0,
 RSEQ_CS_FLAG_NO_RESTART_ON_SIGNAL_BIT = 1,
 RSEQ_CS_FLAG_NO_RESTART_ON_MIGRATE_BIT = 2,
};

enum rseq_cs_flags {
 RSEQ_CS_FLAG_NO_RESTART_ON_PREEMPT =
  (1U << RSEQ_CS_FLAG_NO_RESTART_ON_PREEMPT_BIT),
 RSEQ_CS_FLAG_NO_RESTART_ON_SIGNAL =
  (1U << RSEQ_CS_FLAG_NO_RESTART_ON_SIGNAL_BIT),
 RSEQ_CS_FLAG_NO_RESTART_ON_MIGRATE =
  (1U << RSEQ_CS_FLAG_NO_RESTART_ON_MIGRATE_BIT),
};






struct rseq_cs {

 __u32 version;

 __u32 flags;
 __u64 start_ip;

 __u64 post_commit_offset;
 __u64 abort_ip;
} __attribute__((aligned(4 * sizeof(__u64))));







struct rseq {
# 75 "/usr/include/linux/rseq.h" 3 4
 __u32 cpu_id_start;
# 90 "/usr/include/linux/rseq.h" 3 4
 __u32 cpu_id;
# 112 "/usr/include/linux/rseq.h" 3 4
 __u64 rseq_cs;
# 132 "/usr/include/linux/rseq.h" 3 4
 __u32 flags;
} __attribute__((aligned(4 * sizeof(__u64))));
# 589 "stress-ng.h" 2



# 1 "/usr/include/linux/rtc.h" 1 3 4
# 24 "/usr/include/linux/rtc.h" 3 4
struct rtc_time {
 int tm_sec;
 int tm_min;
 int tm_hour;
 int tm_mday;
 int tm_mon;
 int tm_year;
 int tm_wday;
 int tm_yday;
 int tm_isdst;
};





struct rtc_wkalrm {
 unsigned char enabled;
 unsigned char pending;
 struct rtc_time time;
};
# 59 "/usr/include/linux/rtc.h" 3 4
struct rtc_pll_info {
 int pll_ctrl;
 int pll_value;
 int pll_max;
 int pll_min;
 int pll_posmult;
 int pll_negmult;
 long pll_clock;
};
# 593 "stress-ng.h" 2



# 1 "/usr/include/linux/rtnetlink.h" 1 3 4






# 1 "/usr/include/linux/if_link.h" 1 3 4
# 9 "/usr/include/linux/if_link.h" 3 4
struct rtnl_link_stats {
 __u32 rx_packets;
 __u32 tx_packets;
 __u32 rx_bytes;
 __u32 tx_bytes;
 __u32 rx_errors;
 __u32 tx_errors;
 __u32 rx_dropped;
 __u32 tx_dropped;
 __u32 multicast;
 __u32 collisions;

 __u32 rx_length_errors;
 __u32 rx_over_errors;
 __u32 rx_crc_errors;
 __u32 rx_frame_errors;
 __u32 rx_fifo_errors;
 __u32 rx_missed_errors;


 __u32 tx_aborted_errors;
 __u32 tx_carrier_errors;
 __u32 tx_fifo_errors;
 __u32 tx_heartbeat_errors;
 __u32 tx_window_errors;


 __u32 rx_compressed;
 __u32 tx_compressed;

 __u32 rx_nohandler;
};
# 215 "/usr/include/linux/if_link.h" 3 4
struct rtnl_link_stats64 {
 __u64 rx_packets;
 __u64 tx_packets;
 __u64 rx_bytes;
 __u64 tx_bytes;
 __u64 rx_errors;
 __u64 tx_errors;
 __u64 rx_dropped;
 __u64 tx_dropped;
 __u64 multicast;
 __u64 collisions;


 __u64 rx_length_errors;
 __u64 rx_over_errors;
 __u64 rx_crc_errors;
 __u64 rx_frame_errors;
 __u64 rx_fifo_errors;
 __u64 rx_missed_errors;


 __u64 tx_aborted_errors;
 __u64 tx_carrier_errors;
 __u64 tx_fifo_errors;
 __u64 tx_heartbeat_errors;
 __u64 tx_window_errors;


 __u64 rx_compressed;
 __u64 tx_compressed;
 __u64 rx_nohandler;
};


struct rtnl_link_ifmap {
 __u64 mem_start;
 __u64 mem_end;
 __u64 base_addr;
 __u16 irq;
 __u8 dma;
 __u8 port;
};
# 276 "/usr/include/linux/if_link.h" 3 4
enum {
 IFLA_UNSPEC,
 IFLA_ADDRESS,
 IFLA_BROADCAST,
 IFLA_IFNAME,
 IFLA_MTU,
 IFLA_LINK,
 IFLA_QDISC,
 IFLA_STATS,
 IFLA_COST,

 IFLA_PRIORITY,

 IFLA_MASTER,

 IFLA_WIRELESS,

 IFLA_PROTINFO,

 IFLA_TXQLEN,

 IFLA_MAP,

 IFLA_WEIGHT,

 IFLA_OPERSTATE,
 IFLA_LINKMODE,
 IFLA_LINKINFO,

 IFLA_NET_NS_PID,
 IFLA_IFALIAS,
 IFLA_NUM_VF,
 IFLA_VFINFO_LIST,
 IFLA_STATS64,
 IFLA_VF_PORTS,
 IFLA_PORT_SELF,
 IFLA_AF_SPEC,
 IFLA_GROUP,
 IFLA_NET_NS_FD,
 IFLA_EXT_MASK,
 IFLA_PROMISCUITY,

 IFLA_NUM_TX_QUEUES,
 IFLA_NUM_RX_QUEUES,
 IFLA_CARRIER,
 IFLA_PHYS_PORT_ID,
 IFLA_CARRIER_CHANGES,
 IFLA_PHYS_SWITCH_ID,
 IFLA_LINK_NETNSID,
 IFLA_PHYS_PORT_NAME,
 IFLA_PROTO_DOWN,
 IFLA_GSO_MAX_SEGS,
 IFLA_GSO_MAX_SIZE,
 IFLA_PAD,
 IFLA_XDP,
 IFLA_EVENT,
 IFLA_NEW_NETNSID,
 IFLA_IF_NETNSID,
 IFLA_TARGET_NETNSID = IFLA_IF_NETNSID,
 IFLA_CARRIER_UP_COUNT,
 IFLA_CARRIER_DOWN_COUNT,
 IFLA_NEW_IFINDEX,
 IFLA_MIN_MTU,
 IFLA_MAX_MTU,
 IFLA_PROP_LIST,
 IFLA_ALT_IFNAME,
 IFLA_PERM_ADDRESS,
 IFLA_PROTO_DOWN_REASON,




 IFLA_PARENT_DEV_NAME,
 IFLA_PARENT_DEV_BUS_NAME,

 __IFLA_MAX
};




enum {
 IFLA_PROTO_DOWN_REASON_UNSPEC,
 IFLA_PROTO_DOWN_REASON_MASK,
 IFLA_PROTO_DOWN_REASON_VALUE,

 __IFLA_PROTO_DOWN_REASON_CNT,
 IFLA_PROTO_DOWN_REASON_MAX = __IFLA_PROTO_DOWN_REASON_CNT - 1
};





enum {
 IFLA_INET_UNSPEC,
 IFLA_INET_CONF,
 __IFLA_INET_MAX,
};
# 408 "/usr/include/linux/if_link.h" 3 4
enum {
 IFLA_INET6_UNSPEC,
 IFLA_INET6_FLAGS,
 IFLA_INET6_CONF,
 IFLA_INET6_STATS,
 IFLA_INET6_MCAST,
 IFLA_INET6_CACHEINFO,
 IFLA_INET6_ICMP6STATS,
 IFLA_INET6_TOKEN,
 IFLA_INET6_ADDR_GEN_MODE,
 IFLA_INET6_RA_MTU,
 __IFLA_INET6_MAX
};



enum in6_addr_gen_mode {
 IN6_ADDR_GEN_MODE_EUI64,
 IN6_ADDR_GEN_MODE_NONE,
 IN6_ADDR_GEN_MODE_STABLE_PRIVACY,
 IN6_ADDR_GEN_MODE_RANDOM,
};



enum {
 IFLA_BR_UNSPEC,
 IFLA_BR_FORWARD_DELAY,
 IFLA_BR_HELLO_TIME,
 IFLA_BR_MAX_AGE,
 IFLA_BR_AGEING_TIME,
 IFLA_BR_STP_STATE,
 IFLA_BR_PRIORITY,
 IFLA_BR_VLAN_FILTERING,
 IFLA_BR_VLAN_PROTOCOL,
 IFLA_BR_GROUP_FWD_MASK,
 IFLA_BR_ROOT_ID,
 IFLA_BR_BRIDGE_ID,
 IFLA_BR_ROOT_PORT,
 IFLA_BR_ROOT_PATH_COST,
 IFLA_BR_TOPOLOGY_CHANGE,
 IFLA_BR_TOPOLOGY_CHANGE_DETECTED,
 IFLA_BR_HELLO_TIMER,
 IFLA_BR_TCN_TIMER,
 IFLA_BR_TOPOLOGY_CHANGE_TIMER,
 IFLA_BR_GC_TIMER,
 IFLA_BR_GROUP_ADDR,
 IFLA_BR_FDB_FLUSH,
 IFLA_BR_MCAST_ROUTER,
 IFLA_BR_MCAST_SNOOPING,
 IFLA_BR_MCAST_QUERY_USE_IFADDR,
 IFLA_BR_MCAST_QUERIER,
 IFLA_BR_MCAST_HASH_ELASTICITY,
 IFLA_BR_MCAST_HASH_MAX,
 IFLA_BR_MCAST_LAST_MEMBER_CNT,
 IFLA_BR_MCAST_STARTUP_QUERY_CNT,
 IFLA_BR_MCAST_LAST_MEMBER_INTVL,
 IFLA_BR_MCAST_MEMBERSHIP_INTVL,
 IFLA_BR_MCAST_QUERIER_INTVL,
 IFLA_BR_MCAST_QUERY_INTVL,
 IFLA_BR_MCAST_QUERY_RESPONSE_INTVL,
 IFLA_BR_MCAST_STARTUP_QUERY_INTVL,
 IFLA_BR_NF_CALL_IPTABLES,
 IFLA_BR_NF_CALL_IP6TABLES,
 IFLA_BR_NF_CALL_ARPTABLES,
 IFLA_BR_VLAN_DEFAULT_PVID,
 IFLA_BR_PAD,
 IFLA_BR_VLAN_STATS_ENABLED,
 IFLA_BR_MCAST_STATS_ENABLED,
 IFLA_BR_MCAST_IGMP_VERSION,
 IFLA_BR_MCAST_MLD_VERSION,
 IFLA_BR_VLAN_STATS_PER_PORT,
 IFLA_BR_MULTI_BOOLOPT,
 IFLA_BR_MCAST_QUERIER_STATE,
 __IFLA_BR_MAX,
};



struct ifla_bridge_id {
 __u8 prio[2];
 __u8 addr[6];
};

enum {
 BRIDGE_MODE_UNSPEC,
 BRIDGE_MODE_HAIRPIN,
};

enum {
 IFLA_BRPORT_UNSPEC,
 IFLA_BRPORT_STATE,
 IFLA_BRPORT_PRIORITY,
 IFLA_BRPORT_COST,
 IFLA_BRPORT_MODE,
 IFLA_BRPORT_GUARD,
 IFLA_BRPORT_PROTECT,
 IFLA_BRPORT_FAST_LEAVE,
 IFLA_BRPORT_LEARNING,
 IFLA_BRPORT_UNICAST_FLOOD,
 IFLA_BRPORT_PROXYARP,
 IFLA_BRPORT_LEARNING_SYNC,
 IFLA_BRPORT_PROXYARP_WIFI,
 IFLA_BRPORT_ROOT_ID,
 IFLA_BRPORT_BRIDGE_ID,
 IFLA_BRPORT_DESIGNATED_PORT,
 IFLA_BRPORT_DESIGNATED_COST,
 IFLA_BRPORT_ID,
 IFLA_BRPORT_NO,
 IFLA_BRPORT_TOPOLOGY_CHANGE_ACK,
 IFLA_BRPORT_CONFIG_PENDING,
 IFLA_BRPORT_MESSAGE_AGE_TIMER,
 IFLA_BRPORT_FORWARD_DELAY_TIMER,
 IFLA_BRPORT_HOLD_TIMER,
 IFLA_BRPORT_FLUSH,
 IFLA_BRPORT_MULTICAST_ROUTER,
 IFLA_BRPORT_PAD,
 IFLA_BRPORT_MCAST_FLOOD,
 IFLA_BRPORT_MCAST_TO_UCAST,
 IFLA_BRPORT_VLAN_TUNNEL,
 IFLA_BRPORT_BCAST_FLOOD,
 IFLA_BRPORT_GROUP_FWD_MASK,
 IFLA_BRPORT_NEIGH_SUPPRESS,
 IFLA_BRPORT_ISOLATED,
 IFLA_BRPORT_BACKUP_PORT,
 IFLA_BRPORT_MRP_RING_OPEN,
 IFLA_BRPORT_MRP_IN_OPEN,
 IFLA_BRPORT_MCAST_EHT_HOSTS_LIMIT,
 IFLA_BRPORT_MCAST_EHT_HOSTS_CNT,
 __IFLA_BRPORT_MAX
};


struct ifla_cacheinfo {
 __u32 max_reasm_len;
 __u32 tstamp;
 __u32 reachable_time;
 __u32 retrans_time;
};

enum {
 IFLA_INFO_UNSPEC,
 IFLA_INFO_KIND,
 IFLA_INFO_DATA,
 IFLA_INFO_XSTATS,
 IFLA_INFO_SLAVE_KIND,
 IFLA_INFO_SLAVE_DATA,
 __IFLA_INFO_MAX,
};





enum {
 IFLA_VLAN_UNSPEC,
 IFLA_VLAN_ID,
 IFLA_VLAN_FLAGS,
 IFLA_VLAN_EGRESS_QOS,
 IFLA_VLAN_INGRESS_QOS,
 IFLA_VLAN_PROTOCOL,
 __IFLA_VLAN_MAX,
};



struct ifla_vlan_flags {
 __u32 flags;
 __u32 mask;
};

enum {
 IFLA_VLAN_QOS_UNSPEC,
 IFLA_VLAN_QOS_MAPPING,
 __IFLA_VLAN_QOS_MAX
};



struct ifla_vlan_qos_mapping {
 __u32 from;
 __u32 to;
};


enum {
 IFLA_MACVLAN_UNSPEC,
 IFLA_MACVLAN_MODE,
 IFLA_MACVLAN_FLAGS,
 IFLA_MACVLAN_MACADDR_MODE,
 IFLA_MACVLAN_MACADDR,
 IFLA_MACVLAN_MACADDR_DATA,
 IFLA_MACVLAN_MACADDR_COUNT,
 IFLA_MACVLAN_BC_QUEUE_LEN,
 IFLA_MACVLAN_BC_QUEUE_LEN_USED,
 __IFLA_MACVLAN_MAX,
};



enum macvlan_mode {
 MACVLAN_MODE_PRIVATE = 1,
 MACVLAN_MODE_VEPA = 2,
 MACVLAN_MODE_BRIDGE = 4,
 MACVLAN_MODE_PASSTHRU = 8,
 MACVLAN_MODE_SOURCE = 16,
};

enum macvlan_macaddr_mode {
 MACVLAN_MACADDR_ADD,
 MACVLAN_MACADDR_DEL,
 MACVLAN_MACADDR_FLUSH,
 MACVLAN_MACADDR_SET,
};





enum {
 IFLA_VRF_UNSPEC,
 IFLA_VRF_TABLE,
 __IFLA_VRF_MAX
};



enum {
 IFLA_VRF_PORT_UNSPEC,
 IFLA_VRF_PORT_TABLE,
 __IFLA_VRF_PORT_MAX
};




enum {
 IFLA_MACSEC_UNSPEC,
 IFLA_MACSEC_SCI,
 IFLA_MACSEC_PORT,
 IFLA_MACSEC_ICV_LEN,
 IFLA_MACSEC_CIPHER_SUITE,
 IFLA_MACSEC_WINDOW,
 IFLA_MACSEC_ENCODING_SA,
 IFLA_MACSEC_ENCRYPT,
 IFLA_MACSEC_PROTECT,
 IFLA_MACSEC_INC_SCI,
 IFLA_MACSEC_ES,
 IFLA_MACSEC_SCB,
 IFLA_MACSEC_REPLAY_PROTECT,
 IFLA_MACSEC_VALIDATION,
 IFLA_MACSEC_PAD,
 IFLA_MACSEC_OFFLOAD,
 __IFLA_MACSEC_MAX,
};




enum {
 IFLA_XFRM_UNSPEC,
 IFLA_XFRM_LINK,
 IFLA_XFRM_IF_ID,
 __IFLA_XFRM_MAX
};



enum macsec_validation_type {
 MACSEC_VALIDATE_DISABLED = 0,
 MACSEC_VALIDATE_CHECK = 1,
 MACSEC_VALIDATE_STRICT = 2,
 __MACSEC_VALIDATE_END,
 MACSEC_VALIDATE_MAX = __MACSEC_VALIDATE_END - 1,
};

enum macsec_offload {
 MACSEC_OFFLOAD_OFF = 0,
 MACSEC_OFFLOAD_PHY = 1,
 MACSEC_OFFLOAD_MAC = 2,
 __MACSEC_OFFLOAD_END,
 MACSEC_OFFLOAD_MAX = __MACSEC_OFFLOAD_END - 1,
};


enum {
 IFLA_IPVLAN_UNSPEC,
 IFLA_IPVLAN_MODE,
 IFLA_IPVLAN_FLAGS,
 __IFLA_IPVLAN_MAX
};



enum ipvlan_mode {
 IPVLAN_MODE_L2 = 0,
 IPVLAN_MODE_L3,
 IPVLAN_MODE_L3S,
 IPVLAN_MODE_MAX
};





enum {
 IFLA_VXLAN_UNSPEC,
 IFLA_VXLAN_ID,
 IFLA_VXLAN_GROUP,
 IFLA_VXLAN_LINK,
 IFLA_VXLAN_LOCAL,
 IFLA_VXLAN_TTL,
 IFLA_VXLAN_TOS,
 IFLA_VXLAN_LEARNING,
 IFLA_VXLAN_AGEING,
 IFLA_VXLAN_LIMIT,
 IFLA_VXLAN_PORT_RANGE,
 IFLA_VXLAN_PROXY,
 IFLA_VXLAN_RSC,
 IFLA_VXLAN_L2MISS,
 IFLA_VXLAN_L3MISS,
 IFLA_VXLAN_PORT,
 IFLA_VXLAN_GROUP6,
 IFLA_VXLAN_LOCAL6,
 IFLA_VXLAN_UDP_CSUM,
 IFLA_VXLAN_UDP_ZERO_CSUM6_TX,
 IFLA_VXLAN_UDP_ZERO_CSUM6_RX,
 IFLA_VXLAN_REMCSUM_TX,
 IFLA_VXLAN_REMCSUM_RX,
 IFLA_VXLAN_GBP,
 IFLA_VXLAN_REMCSUM_NOPARTIAL,
 IFLA_VXLAN_COLLECT_METADATA,
 IFLA_VXLAN_LABEL,
 IFLA_VXLAN_GPE,
 IFLA_VXLAN_TTL_INHERIT,
 IFLA_VXLAN_DF,
 IFLA_VXLAN_FAN_MAP = 33,
 __IFLA_VXLAN_MAX
};


struct ifla_vxlan_port_range {
 __be16 low;
 __be16 high;
};

enum ifla_vxlan_df {
 VXLAN_DF_UNSET = 0,
 VXLAN_DF_SET,
 VXLAN_DF_INHERIT,
 __VXLAN_DF_END,
 VXLAN_DF_MAX = __VXLAN_DF_END - 1,
};


enum {
 IFLA_GENEVE_UNSPEC,
 IFLA_GENEVE_ID,
 IFLA_GENEVE_REMOTE,
 IFLA_GENEVE_TTL,
 IFLA_GENEVE_TOS,
 IFLA_GENEVE_PORT,
 IFLA_GENEVE_COLLECT_METADATA,
 IFLA_GENEVE_REMOTE6,
 IFLA_GENEVE_UDP_CSUM,
 IFLA_GENEVE_UDP_ZERO_CSUM6_TX,
 IFLA_GENEVE_UDP_ZERO_CSUM6_RX,
 IFLA_GENEVE_LABEL,
 IFLA_GENEVE_TTL_INHERIT,
 IFLA_GENEVE_DF,
 __IFLA_GENEVE_MAX
};


enum ifla_geneve_df {
 GENEVE_DF_UNSET = 0,
 GENEVE_DF_SET,
 GENEVE_DF_INHERIT,
 __GENEVE_DF_END,
 GENEVE_DF_MAX = __GENEVE_DF_END - 1,
};


enum {
 IFLA_BAREUDP_UNSPEC,
 IFLA_BAREUDP_PORT,
 IFLA_BAREUDP_ETHERTYPE,
 IFLA_BAREUDP_SRCPORT_MIN,
 IFLA_BAREUDP_MULTIPROTO_MODE,
 __IFLA_BAREUDP_MAX
};




enum {
 IFLA_PPP_UNSPEC,
 IFLA_PPP_DEV_FD,
 __IFLA_PPP_MAX
};




enum ifla_gtp_role {
 GTP_ROLE_GGSN = 0,
 GTP_ROLE_SGSN,
};

enum {
 IFLA_GTP_UNSPEC,
 IFLA_GTP_FD0,
 IFLA_GTP_FD1,
 IFLA_GTP_PDP_HASHSIZE,
 IFLA_GTP_ROLE,
 __IFLA_GTP_MAX,
};




enum {
 IFLA_BOND_UNSPEC,
 IFLA_BOND_MODE,
 IFLA_BOND_ACTIVE_SLAVE,
 IFLA_BOND_MIIMON,
 IFLA_BOND_UPDELAY,
 IFLA_BOND_DOWNDELAY,
 IFLA_BOND_USE_CARRIER,
 IFLA_BOND_ARP_INTERVAL,
 IFLA_BOND_ARP_IP_TARGET,
 IFLA_BOND_ARP_VALIDATE,
 IFLA_BOND_ARP_ALL_TARGETS,
 IFLA_BOND_PRIMARY,
 IFLA_BOND_PRIMARY_RESELECT,
 IFLA_BOND_FAIL_OVER_MAC,
 IFLA_BOND_XMIT_HASH_POLICY,
 IFLA_BOND_RESEND_IGMP,
 IFLA_BOND_NUM_PEER_NOTIF,
 IFLA_BOND_ALL_SLAVES_ACTIVE,
 IFLA_BOND_MIN_LINKS,
 IFLA_BOND_LP_INTERVAL,
 IFLA_BOND_PACKETS_PER_SLAVE,
 IFLA_BOND_AD_LACP_RATE,
 IFLA_BOND_AD_SELECT,
 IFLA_BOND_AD_INFO,
 IFLA_BOND_AD_ACTOR_SYS_PRIO,
 IFLA_BOND_AD_USER_PORT_KEY,
 IFLA_BOND_AD_ACTOR_SYSTEM,
 IFLA_BOND_TLB_DYNAMIC_LB,
 IFLA_BOND_PEER_NOTIF_DELAY,
 IFLA_BOND_AD_LACP_ACTIVE,
 IFLA_BOND_MISSED_MAX,
 __IFLA_BOND_MAX,
};



enum {
 IFLA_BOND_AD_INFO_UNSPEC,
 IFLA_BOND_AD_INFO_AGGREGATOR,
 IFLA_BOND_AD_INFO_NUM_PORTS,
 IFLA_BOND_AD_INFO_ACTOR_KEY,
 IFLA_BOND_AD_INFO_PARTNER_KEY,
 IFLA_BOND_AD_INFO_PARTNER_MAC,
 __IFLA_BOND_AD_INFO_MAX,
};



enum {
 IFLA_BOND_SLAVE_UNSPEC,
 IFLA_BOND_SLAVE_STATE,
 IFLA_BOND_SLAVE_MII_STATUS,
 IFLA_BOND_SLAVE_LINK_FAILURE_COUNT,
 IFLA_BOND_SLAVE_PERM_HWADDR,
 IFLA_BOND_SLAVE_QUEUE_ID,
 IFLA_BOND_SLAVE_AD_AGGREGATOR_ID,
 IFLA_BOND_SLAVE_AD_ACTOR_OPER_PORT_STATE,
 IFLA_BOND_SLAVE_AD_PARTNER_OPER_PORT_STATE,
 __IFLA_BOND_SLAVE_MAX,
};





enum {
 IFLA_VF_INFO_UNSPEC,
 IFLA_VF_INFO,
 __IFLA_VF_INFO_MAX,
};



enum {
 IFLA_VF_UNSPEC,
 IFLA_VF_MAC,
 IFLA_VF_VLAN,
 IFLA_VF_TX_RATE,
 IFLA_VF_SPOOFCHK,
 IFLA_VF_LINK_STATE,
 IFLA_VF_RATE,
 IFLA_VF_RSS_QUERY_EN,


 IFLA_VF_STATS,
 IFLA_VF_TRUST,
 IFLA_VF_IB_NODE_GUID,
 IFLA_VF_IB_PORT_GUID,
 IFLA_VF_VLAN_LIST,
 IFLA_VF_BROADCAST,
 __IFLA_VF_MAX,
};



struct ifla_vf_mac {
 __u32 vf;
 __u8 mac[32];
};

struct ifla_vf_broadcast {
 __u8 broadcast[32];
};

struct ifla_vf_vlan {
 __u32 vf;
 __u32 vlan;
 __u32 qos;
};

enum {
 IFLA_VF_VLAN_INFO_UNSPEC,
 IFLA_VF_VLAN_INFO,
 __IFLA_VF_VLAN_INFO_MAX,
};




struct ifla_vf_vlan_info {
 __u32 vf;
 __u32 vlan;
 __u32 qos;
 __be16 vlan_proto;
};

struct ifla_vf_tx_rate {
 __u32 vf;
 __u32 rate;
};

struct ifla_vf_rate {
 __u32 vf;
 __u32 min_tx_rate;
 __u32 max_tx_rate;
};

struct ifla_vf_spoofchk {
 __u32 vf;
 __u32 setting;
};

struct ifla_vf_guid {
 __u32 vf;
 __u64 guid;
};

enum {
 IFLA_VF_LINK_STATE_AUTO,
 IFLA_VF_LINK_STATE_ENABLE,
 IFLA_VF_LINK_STATE_DISABLE,
 __IFLA_VF_LINK_STATE_MAX,
};

struct ifla_vf_link_state {
 __u32 vf;
 __u32 link_state;
};

struct ifla_vf_rss_query_en {
 __u32 vf;
 __u32 setting;
};

enum {
 IFLA_VF_STATS_RX_PACKETS,
 IFLA_VF_STATS_TX_PACKETS,
 IFLA_VF_STATS_RX_BYTES,
 IFLA_VF_STATS_TX_BYTES,
 IFLA_VF_STATS_BROADCAST,
 IFLA_VF_STATS_MULTICAST,
 IFLA_VF_STATS_PAD,
 IFLA_VF_STATS_RX_DROPPED,
 IFLA_VF_STATS_TX_DROPPED,
 __IFLA_VF_STATS_MAX,
};



struct ifla_vf_trust {
 __u32 vf;
 __u32 setting;
};
# 1029 "/usr/include/linux/if_link.h" 3 4
enum {
 IFLA_VF_PORT_UNSPEC,
 IFLA_VF_PORT,
 __IFLA_VF_PORT_MAX,
};



enum {
 IFLA_PORT_UNSPEC,
 IFLA_PORT_VF,
 IFLA_PORT_PROFILE,
 IFLA_PORT_VSI_TYPE,
 IFLA_PORT_INSTANCE_UUID,
 IFLA_PORT_HOST_UUID,
 IFLA_PORT_REQUEST,
 IFLA_PORT_RESPONSE,
 __IFLA_PORT_MAX,
};







enum {
 PORT_REQUEST_PREASSOCIATE = 0,
 PORT_REQUEST_PREASSOCIATE_RR,
 PORT_REQUEST_ASSOCIATE,
 PORT_REQUEST_DISASSOCIATE,
};

enum {
 PORT_VDP_RESPONSE_SUCCESS = 0,
 PORT_VDP_RESPONSE_INVALID_FORMAT,
 PORT_VDP_RESPONSE_INSUFFICIENT_RESOURCES,
 PORT_VDP_RESPONSE_UNUSED_VTID,
 PORT_VDP_RESPONSE_VTID_VIOLATION,
 PORT_VDP_RESPONSE_VTID_VERSION_VIOALTION,
 PORT_VDP_RESPONSE_OUT_OF_SYNC,

 PORT_PROFILE_RESPONSE_SUCCESS = 0x100,
 PORT_PROFILE_RESPONSE_INPROGRESS,
 PORT_PROFILE_RESPONSE_INVALID,
 PORT_PROFILE_RESPONSE_BADSTATE,
 PORT_PROFILE_RESPONSE_INSUFFICIENT_RESOURCES,
 PORT_PROFILE_RESPONSE_ERROR,
};

struct ifla_port_vsi {
 __u8 vsi_mgr_id;
 __u8 vsi_type_id[3];
 __u8 vsi_type_version;
 __u8 pad[3];
};




enum {
 IFLA_IPOIB_UNSPEC,
 IFLA_IPOIB_PKEY,
 IFLA_IPOIB_MODE,
 IFLA_IPOIB_UMCAST,
 __IFLA_IPOIB_MAX
};

enum {
 IPOIB_MODE_DATAGRAM = 0,
 IPOIB_MODE_CONNECTED = 1,
};







enum {
 HSR_PROTOCOL_HSR,
 HSR_PROTOCOL_PRP,
 HSR_PROTOCOL_MAX,
};

enum {
 IFLA_HSR_UNSPEC,
 IFLA_HSR_SLAVE1,
 IFLA_HSR_SLAVE2,
 IFLA_HSR_MULTICAST_SPEC,
 IFLA_HSR_SUPERVISION_ADDR,
 IFLA_HSR_SEQ_NR,
 IFLA_HSR_VERSION,
 IFLA_HSR_PROTOCOL,


 __IFLA_HSR_MAX,
};





struct if_stats_msg {
 __u8 family;
 __u8 pad1;
 __u16 pad2;
 __u32 ifindex;
 __u32 filter_mask;
};




enum {
 IFLA_STATS_UNSPEC,
 IFLA_STATS_LINK_64,
 IFLA_STATS_LINK_XSTATS,
 IFLA_STATS_LINK_XSTATS_SLAVE,
 IFLA_STATS_LINK_OFFLOAD_XSTATS,
 IFLA_STATS_AF_SPEC,
 __IFLA_STATS_MAX,
};
# 1162 "/usr/include/linux/if_link.h" 3 4
enum {
 LINK_XSTATS_TYPE_UNSPEC,
 LINK_XSTATS_TYPE_BRIDGE,
 LINK_XSTATS_TYPE_BOND,
 __LINK_XSTATS_TYPE_MAX
};



enum {
 IFLA_OFFLOAD_XSTATS_UNSPEC,
 IFLA_OFFLOAD_XSTATS_CPU_HIT,
 __IFLA_OFFLOAD_XSTATS_MAX
};
# 1192 "/usr/include/linux/if_link.h" 3 4
enum {
 XDP_ATTACHED_NONE = 0,
 XDP_ATTACHED_DRV,
 XDP_ATTACHED_SKB,
 XDP_ATTACHED_HW,
 XDP_ATTACHED_MULTI,
};

enum {
 IFLA_XDP_UNSPEC,
 IFLA_XDP_FD,
 IFLA_XDP_ATTACHED,
 IFLA_XDP_FLAGS,
 IFLA_XDP_PROG_ID,
 IFLA_XDP_DRV_PROG_ID,
 IFLA_XDP_SKB_PROG_ID,
 IFLA_XDP_HW_PROG_ID,
 IFLA_XDP_EXPECTED_FD,
 __IFLA_XDP_MAX,
};



enum {
 IFLA_EVENT_NONE,
 IFLA_EVENT_REBOOT,
 IFLA_EVENT_FEATURES,
 IFLA_EVENT_BONDING_FAILOVER,
 IFLA_EVENT_NOTIFY_PEERS,
 IFLA_EVENT_IGMP_RESEND,
 IFLA_EVENT_BONDING_OPTIONS,
};



enum {
 IFLA_TUN_UNSPEC,
 IFLA_TUN_OWNER,
 IFLA_TUN_GROUP,
 IFLA_TUN_TYPE,
 IFLA_TUN_PI,
 IFLA_TUN_VNET_HDR,
 IFLA_TUN_PERSIST,
 IFLA_TUN_MULTI_QUEUE,
 IFLA_TUN_NUM_QUEUES,
 IFLA_TUN_NUM_DISABLED_QUEUES,
 __IFLA_TUN_MAX,
};
# 1252 "/usr/include/linux/if_link.h" 3 4
enum {
 IFLA_RMNET_UNSPEC,
 IFLA_RMNET_MUX_ID,
 IFLA_RMNET_FLAGS,
 __IFLA_RMNET_MAX,
};



struct ifla_rmnet_flags {
 __u32 flags;
 __u32 mask;
};



enum {
 IFLA_MCTP_UNSPEC,
 IFLA_MCTP_NET,
 __IFLA_MCTP_MAX,
};
# 8 "/usr/include/linux/rtnetlink.h" 2 3 4
# 1 "/usr/include/linux/if_addr.h" 1 3 4







struct ifaddrmsg {
 __u8 ifa_family;
 __u8 ifa_prefixlen;
 __u8 ifa_flags;
 __u8 ifa_scope;
 __u32 ifa_index;
};
# 26 "/usr/include/linux/if_addr.h" 3 4
enum {
 IFA_UNSPEC,
 IFA_ADDRESS,
 IFA_LOCAL,
 IFA_LABEL,
 IFA_BROADCAST,
 IFA_ANYCAST,
 IFA_CACHEINFO,
 IFA_MULTICAST,
 IFA_FLAGS,
 IFA_RT_PRIORITY,
 IFA_TARGET_NETNSID,
 __IFA_MAX,
};
# 59 "/usr/include/linux/if_addr.h" 3 4
struct ifa_cacheinfo {
 __u32 ifa_prefered;
 __u32 ifa_valid;
 __u32 cstamp;
 __u32 tstamp;
};
# 9 "/usr/include/linux/rtnetlink.h" 2 3 4
# 1 "/usr/include/linux/neighbour.h" 1 3 4







struct ndmsg {
 __u8 ndm_family;
 __u8 ndm_pad1;
 __u16 ndm_pad2;
 __s32 ndm_ifindex;
 __u16 ndm_state;
 __u8 ndm_flags;
 __u8 ndm_type;
};

enum {
 NDA_UNSPEC,
 NDA_DST,
 NDA_LLADDR,
 NDA_CACHEINFO,
 NDA_PROBES,
 NDA_VLAN,
 NDA_PORT,
 NDA_VNI,
 NDA_IFINDEX,
 NDA_MASTER,
 NDA_LINK_NETNSID,
 NDA_SRC_VNI,
 NDA_PROTOCOL,
 NDA_NH_ID,
 NDA_FDB_EXT_ATTRS,
 __NDA_MAX
};
# 76 "/usr/include/linux/neighbour.h" 3 4
struct nda_cacheinfo {
 __u32 ndm_confirmed;
 __u32 ndm_used;
 __u32 ndm_updated;
 __u32 ndm_refcnt;
};
# 108 "/usr/include/linux/neighbour.h" 3 4
struct ndt_stats {
 __u64 ndts_allocs;
 __u64 ndts_destroys;
 __u64 ndts_hash_grows;
 __u64 ndts_res_failed;
 __u64 ndts_lookups;
 __u64 ndts_hits;
 __u64 ndts_rcv_probes_mcast;
 __u64 ndts_rcv_probes_ucast;
 __u64 ndts_periodic_gc_runs;
 __u64 ndts_forced_gc_runs;
 __u64 ndts_table_fulls;
};

enum {
 NDTPA_UNSPEC,
 NDTPA_IFINDEX,
 NDTPA_REFCNT,
 NDTPA_REACHABLE_TIME,
 NDTPA_BASE_REACHABLE_TIME,
 NDTPA_RETRANS_TIME,
 NDTPA_GC_STALETIME,
 NDTPA_DELAY_PROBE_TIME,
 NDTPA_QUEUE_LEN,
 NDTPA_APP_PROBES,
 NDTPA_UCAST_PROBES,
 NDTPA_MCAST_PROBES,
 NDTPA_ANYCAST_DELAY,
 NDTPA_PROXY_DELAY,
 NDTPA_PROXY_QLEN,
 NDTPA_LOCKTIME,
 NDTPA_QUEUE_LENBYTES,
 NDTPA_MCAST_REPROBES,
 NDTPA_PAD,
 __NDTPA_MAX
};


struct ndtmsg {
 __u8 ndtm_family;
 __u8 ndtm_pad1;
 __u16 ndtm_pad2;
};

struct ndt_config {
 __u16 ndtc_key_len;
 __u16 ndtc_entry_size;
 __u32 ndtc_entries;
 __u32 ndtc_last_flush;
 __u32 ndtc_last_rand;
 __u32 ndtc_hash_rnd;
 __u32 ndtc_hash_mask;
 __u32 ndtc_hash_chain_gc;
 __u32 ndtc_proxy_qlen;
};

enum {
 NDTA_UNSPEC,
 NDTA_NAME,
 NDTA_THRESH1,
 NDTA_THRESH2,
 NDTA_THRESH3,
 NDTA_CONFIG,
 NDTA_PARMS,
 NDTA_STATS,
 NDTA_GC_INTERVAL,
 NDTA_PAD,
 __NDTA_MAX
};






enum {
 FDB_NOTIFY_BIT = (1 << 0),
 FDB_NOTIFY_INACTIVE_BIT = (1 << 1)
};







enum {
 NFEA_UNSPEC,
 NFEA_ACTIVITY_NOTIFY,
 NFEA_DONT_REFRESH,
 __NFEA_MAX
};
# 10 "/usr/include/linux/rtnetlink.h" 2 3 4
# 24 "/usr/include/linux/rtnetlink.h" 3 4
enum {
 RTM_BASE = 16,


 RTM_NEWLINK = 16,

 RTM_DELLINK,

 RTM_GETLINK,

 RTM_SETLINK,


 RTM_NEWADDR = 20,

 RTM_DELADDR,

 RTM_GETADDR,


 RTM_NEWROUTE = 24,

 RTM_DELROUTE,

 RTM_GETROUTE,


 RTM_NEWNEIGH = 28,

 RTM_DELNEIGH,

 RTM_GETNEIGH,


 RTM_NEWRULE = 32,

 RTM_DELRULE,

 RTM_GETRULE,


 RTM_NEWQDISC = 36,

 RTM_DELQDISC,

 RTM_GETQDISC,


 RTM_NEWTCLASS = 40,

 RTM_DELTCLASS,

 RTM_GETTCLASS,


 RTM_NEWTFILTER = 44,

 RTM_DELTFILTER,

 RTM_GETTFILTER,


 RTM_NEWACTION = 48,

 RTM_DELACTION,

 RTM_GETACTION,


 RTM_NEWPREFIX = 52,


 RTM_GETMULTICAST = 58,


 RTM_GETANYCAST = 62,


 RTM_NEWNEIGHTBL = 64,

 RTM_GETNEIGHTBL = 66,

 RTM_SETNEIGHTBL,


 RTM_NEWNDUSEROPT = 68,


 RTM_NEWADDRLABEL = 72,

 RTM_DELADDRLABEL,

 RTM_GETADDRLABEL,


 RTM_GETDCB = 78,

 RTM_SETDCB,


 RTM_NEWNETCONF = 80,

 RTM_DELNETCONF,

 RTM_GETNETCONF = 82,


 RTM_NEWMDB = 84,

 RTM_DELMDB = 85,

 RTM_GETMDB = 86,


 RTM_NEWNSID = 88,

 RTM_DELNSID = 89,

 RTM_GETNSID = 90,


 RTM_NEWSTATS = 92,

 RTM_GETSTATS = 94,


 RTM_NEWCACHEREPORT = 96,


 RTM_NEWCHAIN = 100,

 RTM_DELCHAIN,

 RTM_GETCHAIN,


 RTM_NEWNEXTHOP = 104,

 RTM_DELNEXTHOP,

 RTM_GETNEXTHOP,


 RTM_NEWLINKPROP = 108,

 RTM_DELLINKPROP,

 RTM_GETLINKPROP,


 RTM_NEWVLAN = 112,

 RTM_DELVLAN,

 RTM_GETVLAN,


 RTM_NEWNEXTHOPBUCKET = 116,

 RTM_DELNEXTHOPBUCKET,

 RTM_GETNEXTHOPBUCKET,


 __RTM_MAX,

};
# 202 "/usr/include/linux/rtnetlink.h" 3 4
struct rtattr {
 unsigned short rta_len;
 unsigned short rta_type;
};
# 228 "/usr/include/linux/rtnetlink.h" 3 4
struct rtmsg {
 unsigned char rtm_family;
 unsigned char rtm_dst_len;
 unsigned char rtm_src_len;
 unsigned char rtm_tos;

 unsigned char rtm_table;
 unsigned char rtm_protocol;
 unsigned char rtm_scope;
 unsigned char rtm_type;

 unsigned rtm_flags;
};



enum {
 RTN_UNSPEC,
 RTN_UNICAST,
 RTN_LOCAL,
 RTN_BROADCAST,

 RTN_ANYCAST,

 RTN_MULTICAST,
 RTN_BLACKHOLE,
 RTN_UNREACHABLE,
 RTN_PROHIBIT,
 RTN_THROW,
 RTN_NAT,
 RTN_XRESOLVE,
 __RTN_MAX
};
# 311 "/usr/include/linux/rtnetlink.h" 3 4
enum rt_scope_t {
 RT_SCOPE_UNIVERSE=0,

 RT_SCOPE_SITE=200,
 RT_SCOPE_LINK=253,
 RT_SCOPE_HOST=254,
 RT_SCOPE_NOWHERE=255
};
# 338 "/usr/include/linux/rtnetlink.h" 3 4
enum rt_class_t {
 RT_TABLE_UNSPEC=0,

 RT_TABLE_COMPAT=252,
 RT_TABLE_DEFAULT=253,
 RT_TABLE_MAIN=254,
 RT_TABLE_LOCAL=255,
 RT_TABLE_MAX=0xFFFFFFFF
};




enum rtattr_type_t {
 RTA_UNSPEC,
 RTA_DST,
 RTA_SRC,
 RTA_IIF,
 RTA_OIF,
 RTA_GATEWAY,
 RTA_PRIORITY,
 RTA_PREFSRC,
 RTA_METRICS,
 RTA_MULTIPATH,
 RTA_PROTOINFO,
 RTA_FLOW,
 RTA_CACHEINFO,
 RTA_SESSION,
 RTA_MP_ALGO,
 RTA_TABLE,
 RTA_MARK,
 RTA_MFC_STATS,
 RTA_VIA,
 RTA_NEWDST,
 RTA_PREF,
 RTA_ENCAP_TYPE,
 RTA_ENCAP,
 RTA_EXPIRES,
 RTA_PAD,
 RTA_UID,
 RTA_TTL_PROPAGATE,
 RTA_IP_PROTO,
 RTA_SPORT,
 RTA_DPORT,
 RTA_NH_ID,
 __RTA_MAX
};
# 400 "/usr/include/linux/rtnetlink.h" 3 4
struct rtnexthop {
 unsigned short rtnh_len;
 unsigned char rtnh_flags;
 unsigned char rtnh_hops;
 int rtnh_ifindex;
};
# 432 "/usr/include/linux/rtnetlink.h" 3 4
struct rtvia {
 __kernel_sa_family_t rtvia_family;
 __u8 rtvia_addr[0];
};



struct rta_cacheinfo {
 __u32 rta_clntref;
 __u32 rta_lastuse;
 __s32 rta_expires;
 __u32 rta_error;
 __u32 rta_used;


 __u32 rta_id;
 __u32 rta_ts;
 __u32 rta_tsage;
};



enum {
 RTAX_UNSPEC,

 RTAX_LOCK,

 RTAX_MTU,

 RTAX_WINDOW,

 RTAX_RTT,

 RTAX_RTTVAR,

 RTAX_SSTHRESH,

 RTAX_CWND,

 RTAX_ADVMSS,

 RTAX_REORDERING,

 RTAX_HOPLIMIT,

 RTAX_INITCWND,

 RTAX_FEATURES,

 RTAX_RTO_MIN,

 RTAX_INITRWND,

 RTAX_QUICKACK,

 RTAX_CC_ALGO,

 RTAX_FASTOPEN_NO_COOKIE,

 __RTAX_MAX
};
# 504 "/usr/include/linux/rtnetlink.h" 3 4
struct rta_session {
 __u8 proto;
 __u8 pad1;
 __u16 pad2;

 union {
  struct {
   __u16 sport;
   __u16 dport;
  } ports;

  struct {
   __u8 type;
   __u8 code;
   __u16 ident;
  } icmpt;

  __u32 spi;
 } u;
};

struct rta_mfc_stats {
 __u64 mfcs_packets;
 __u64 mfcs_bytes;
 __u64 mfcs_wrong_if;
};





struct rtgenmsg {
 unsigned char rtgen_family;
};
# 548 "/usr/include/linux/rtnetlink.h" 3 4
struct ifinfomsg {
 unsigned char ifi_family;
 unsigned char __ifi_pad;
 unsigned short ifi_type;
 int ifi_index;
 unsigned ifi_flags;
 unsigned ifi_change;
};





struct prefixmsg {
 unsigned char prefix_family;
 unsigned char prefix_pad1;
 unsigned short prefix_pad2;
 int prefix_ifindex;
 unsigned char prefix_type;
 unsigned char prefix_len;
 unsigned char prefix_flags;
 unsigned char prefix_pad3;
};

enum
{
 PREFIX_UNSPEC,
 PREFIX_ADDRESS,
 PREFIX_CACHEINFO,
 __PREFIX_MAX
};



struct prefix_cacheinfo {
 __u32 preferred_time;
 __u32 valid_time;
};






struct tcmsg {
 unsigned char tcm_family;
 unsigned char tcm__pad1;
 unsigned short tcm__pad2;
 int tcm_ifindex;
 __u32 tcm_handle;
 __u32 tcm_parent;




 __u32 tcm_info;
};







enum {
 TCA_UNSPEC,
 TCA_KIND,
 TCA_OPTIONS,
 TCA_STATS,
 TCA_XSTATS,
 TCA_RATE,
 TCA_FCNT,
 TCA_STATS2,
 TCA_STAB,
 TCA_PAD,
 TCA_DUMP_INVISIBLE,
 TCA_CHAIN,
 TCA_HW_OFFLOAD,
 TCA_INGRESS_BLOCK,
 TCA_EGRESS_BLOCK,
 TCA_DUMP_FLAGS,
 __TCA_MAX
};
# 646 "/usr/include/linux/rtnetlink.h" 3 4
struct nduseroptmsg {
 unsigned char nduseropt_family;
 unsigned char nduseropt_pad1;
 unsigned short nduseropt_opts_len;
 int nduseropt_ifindex;
 __u8 nduseropt_icmp_type;
 __u8 nduseropt_icmp_code;
 unsigned short nduseropt_pad2;
 unsigned int nduseropt_pad3;

};

enum {
 NDUSEROPT_UNSPEC,
 NDUSEROPT_SRCADDR,
 __NDUSEROPT_MAX
};
# 688 "/usr/include/linux/rtnetlink.h" 3 4
enum rtnetlink_groups {
 RTNLGRP_NONE,

 RTNLGRP_LINK,

 RTNLGRP_NOTIFY,

 RTNLGRP_NEIGH,

 RTNLGRP_TC,

 RTNLGRP_IPV4_IFADDR,

 RTNLGRP_IPV4_MROUTE,

 RTNLGRP_IPV4_ROUTE,

 RTNLGRP_IPV4_RULE,

 RTNLGRP_IPV6_IFADDR,

 RTNLGRP_IPV6_MROUTE,

 RTNLGRP_IPV6_ROUTE,

 RTNLGRP_IPV6_IFINFO,

 RTNLGRP_DECnet_IFADDR,

 RTNLGRP_NOP2,
 RTNLGRP_DECnet_ROUTE,

 RTNLGRP_DECnet_RULE,

 RTNLGRP_NOP4,
 RTNLGRP_IPV6_PREFIX,

 RTNLGRP_IPV6_RULE,

 RTNLGRP_ND_USEROPT,

 RTNLGRP_PHONET_IFADDR,

 RTNLGRP_PHONET_ROUTE,

 RTNLGRP_DCB,

 RTNLGRP_IPV4_NETCONF,

 RTNLGRP_IPV6_NETCONF,

 RTNLGRP_MDB,

 RTNLGRP_MPLS_ROUTE,

 RTNLGRP_NSID,

 RTNLGRP_MPLS_NETCONF,

 RTNLGRP_IPV4_MROUTE_R,

 RTNLGRP_IPV6_MROUTE_R,

 RTNLGRP_NEXTHOP,

 RTNLGRP_BRVLAN,

 __RTNLGRP_MAX
};



struct tcamsg {
 unsigned char tca_family;
 unsigned char tca__pad1;
 unsigned short tca__pad2;
};

enum {
 TCA_ROOT_UNSPEC,
 TCA_ROOT_TAB,


 TCA_ROOT_FLAGS,
 TCA_ROOT_COUNT,
 TCA_ROOT_TIME_DELTA,
 __TCA_ROOT_MAX,

};
# 597 "stress-ng.h" 2



# 1 "/usr/include/linux/seccomp.h" 1 3 4
# 60 "/usr/include/linux/seccomp.h" 3 4
struct seccomp_data {
 int nr;
 __u32 arch;
 __u64 instruction_pointer;
 __u64 args[6];
};

struct seccomp_notif_sizes {
 __u16 seccomp_notif;
 __u16 seccomp_notif_resp;
 __u16 seccomp_data;
};

struct seccomp_notif {
 __u64 id;
 __u32 pid;
 __u32 flags;
 struct seccomp_data data;
};
# 109 "/usr/include/linux/seccomp.h" 3 4
struct seccomp_notif_resp {
 __u64 id;
 __s64 val;
 __s32 error;
 __u32 flags;
};
# 128 "/usr/include/linux/seccomp.h" 3 4
struct seccomp_notif_addfd {
 __u64 id;
 __u32 flags;
 __u32 srcfd;
 __u32 newfd;
 __u32 newfd_flags;
};
# 601 "stress-ng.h" 2



# 1 "/usr/include/linux/serial.h" 1 3 4
# 16 "/usr/include/linux/serial.h" 3 4
# 1 "/usr/include/linux/tty_flags.h" 1 3 4
# 17 "/usr/include/linux/serial.h" 2 3 4


struct serial_struct {
 int type;
 int line;
 unsigned int port;
 int irq;
 int flags;
 int xmit_fifo_size;
 int custom_divisor;
 int baud_base;
 unsigned short close_delay;
 char io_type;
 char reserved_char[1];
 int hub6;
 unsigned short closing_wait;
 unsigned short closing_wait2;
 unsigned char *iomem_base;
 unsigned short iomem_reg_shift;
 unsigned int port_high;
 unsigned long iomap_base;
};
# 84 "/usr/include/linux/serial.h" 3 4
struct serial_multiport_struct {
 int irq;
 int port1;
 unsigned char mask1, match1;
 int port2;
 unsigned char mask2, match2;
 int port3;
 unsigned char mask3, match3;
 int port4;
 unsigned char mask4, match4;
 int port_monitor;
 int reserved[32];
};





struct serial_icounter_struct {
 int cts, dsr, rng, dcd;
 int rx, tx;
 int frame, overrun, parity, brk;
 int buf_overrun;
 int reserved[9];
};
# 117 "/usr/include/linux/serial.h" 3 4
struct serial_rs485 {
 __u32 flags;
# 129 "/usr/include/linux/serial.h" 3 4
 __u32 delay_rts_before_send;
 __u32 delay_rts_after_send;
 __u32 padding[5];

};






struct serial_iso7816 {
 __u32 flags;



 __u32 tg;
 __u32 sc_fi;
 __u32 sc_di;
 __u32 clk;
 __u32 reserved[5];
};
# 605 "stress-ng.h" 2



# 1 "/usr/include/linux/sock_diag.h" 1 3 4
# 10 "/usr/include/linux/sock_diag.h" 3 4
struct sock_diag_req {
 __u8 sdiag_family;
 __u8 sdiag_protocol;
};

enum {
 SK_MEMINFO_RMEM_ALLOC,
 SK_MEMINFO_RCVBUF,
 SK_MEMINFO_WMEM_ALLOC,
 SK_MEMINFO_SNDBUF,
 SK_MEMINFO_FWD_ALLOC,
 SK_MEMINFO_WMEM_QUEUED,
 SK_MEMINFO_OPTMEM,
 SK_MEMINFO_BACKLOG,
 SK_MEMINFO_DROPS,

 SK_MEMINFO_VARS,
};

enum sknetlink_groups {
 SKNLGRP_NONE,
 SKNLGRP_INET_TCP_DESTROY,
 SKNLGRP_INET_UDP_DESTROY,
 SKNLGRP_INET6_TCP_DESTROY,
 SKNLGRP_INET6_UDP_DESTROY,
 __SKNLGRP_MAX,
};


enum {
 SK_DIAG_BPF_STORAGE_REQ_NONE,
 SK_DIAG_BPF_STORAGE_REQ_MAP_FD,
 __SK_DIAG_BPF_STORAGE_REQ_MAX,
};



enum {
 SK_DIAG_BPF_STORAGE_REP_NONE,
 SK_DIAG_BPF_STORAGE,
 __SK_DIAG_BPF_STORAGE_REP_MAX,
};



enum {
 SK_DIAG_BPF_STORAGE_NONE,
 SK_DIAG_BPF_STORAGE_PAD,
 SK_DIAG_BPF_STORAGE_MAP_ID,
 SK_DIAG_BPF_STORAGE_MAP_VALUE,
 __SK_DIAG_BPF_STORAGE_MAX,
};
# 609 "stress-ng.h" 2







# 1 "/usr/include/linux/sockios.h" 1 3 4
# 23 "/usr/include/linux/sockios.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/asm/sockios.h" 1 3 4
# 24 "/usr/include/linux/sockios.h" 2 3 4
# 617 "stress-ng.h" 2



# 1 "/usr/include/linux/sysctl.h" 1 3 4
# 35 "/usr/include/linux/sysctl.h" 3 4
struct __sysctl_args {
 int *name;
 int nlen;
 void *oldval;
 size_t *oldlenp;
 void *newval;
 size_t newlen;
 unsigned long __unused[4];
};





enum
{
 CTL_KERN=1,
 CTL_VM=2,
 CTL_NET=3,
 CTL_PROC=4,
 CTL_FS=5,
 CTL_DEBUG=6,
 CTL_DEV=7,
 CTL_BUS=8,
 CTL_ABI=9,
 CTL_CPU=10,
 CTL_ARLAN=254,
 CTL_S390DBF=5677,
 CTL_SUNRPC=7249,
 CTL_PM=9899,
 CTL_FRV=9898,
};


enum
{
 CTL_BUS_ISA=1
};


enum
{
 INOTIFY_MAX_USER_INSTANCES=1,
 INOTIFY_MAX_USER_WATCHES=2,
 INOTIFY_MAX_QUEUED_EVENTS=3
};


enum
{
 KERN_OSTYPE=1,
 KERN_OSRELEASE=2,
 KERN_OSREV=3,
 KERN_VERSION=4,
 KERN_SECUREMASK=5,
 KERN_PROF=6,
 KERN_NODENAME=7,
 KERN_DOMAINNAME=8,

 KERN_PANIC=15,
 KERN_REALROOTDEV=16,

 KERN_SPARC_REBOOT=21,
 KERN_CTLALTDEL=22,
 KERN_PRINTK=23,
 KERN_NAMETRANS=24,
 KERN_PPC_HTABRECLAIM=25,
 KERN_PPC_ZEROPAGED=26,
 KERN_PPC_POWERSAVE_NAP=27,
 KERN_MODPROBE=28,
 KERN_SG_BIG_BUFF=29,
 KERN_ACCT=30,
 KERN_PPC_L2CR=31,

 KERN_RTSIGNR=32,
 KERN_RTSIGMAX=33,

 KERN_SHMMAX=34,
 KERN_MSGMAX=35,
 KERN_MSGMNB=36,
 KERN_MSGPOOL=37,
 KERN_SYSRQ=38,
 KERN_MAX_THREADS=39,
  KERN_RANDOM=40,
  KERN_SHMALL=41,
  KERN_MSGMNI=42,
  KERN_SEM=43,
  KERN_SPARC_STOP_A=44,
  KERN_SHMMNI=45,
 KERN_OVERFLOWUID=46,
 KERN_OVERFLOWGID=47,
 KERN_SHMPATH=48,
 KERN_HOTPLUG=49,
 KERN_IEEE_EMULATION_WARNINGS=50,
 KERN_S390_USER_DEBUG_LOGGING=51,
 KERN_CORE_USES_PID=52,
 KERN_TAINTED=53,
 KERN_CADPID=54,
 KERN_PIDMAX=55,
   KERN_CORE_PATTERN=56,
 KERN_PANIC_ON_OOPS=57,
 KERN_HPPA_PWRSW=58,
 KERN_HPPA_UNALIGNED=59,
 KERN_PRINTK_RATELIMIT=60,
 KERN_PRINTK_RATELIMIT_BURST=61,
 KERN_PTY=62,
 KERN_NGROUPS_MAX=63,
 KERN_SPARC_SCONS_PWROFF=64,
 KERN_HZ_TIMER=65,
 KERN_UNKNOWN_NMI_PANIC=66,
 KERN_BOOTLOADER_TYPE=67,
 KERN_RANDOMIZE=68,
 KERN_SETUID_DUMPABLE=69,
 KERN_SPIN_RETRY=70,
 KERN_ACPI_VIDEO_FLAGS=71,
 KERN_IA64_UNALIGNED=72,
 KERN_COMPAT_LOG=73,
 KERN_MAX_LOCK_DEPTH=74,
 KERN_NMI_WATCHDOG=75,
 KERN_PANIC_ON_NMI=76,
 KERN_PANIC_ON_WARN=77,
 KERN_PANIC_PRINT=78,
};




enum
{
 VM_UNUSED1=1,
 VM_UNUSED2=2,
 VM_UNUSED3=3,
 VM_UNUSED4=4,
 VM_OVERCOMMIT_MEMORY=5,
 VM_UNUSED5=6,
 VM_UNUSED7=7,
 VM_UNUSED8=8,
 VM_UNUSED9=9,
 VM_PAGE_CLUSTER=10,
 VM_DIRTY_BACKGROUND=11,
 VM_DIRTY_RATIO=12,
 VM_DIRTY_WB_CS=13,
 VM_DIRTY_EXPIRE_CS=14,
 VM_NR_PDFLUSH_THREADS=15,
 VM_OVERCOMMIT_RATIO=16,
 VM_PAGEBUF=17,
 VM_HUGETLB_PAGES=18,
 VM_SWAPPINESS=19,
 VM_LOWMEM_RESERVE_RATIO=20,
 VM_MIN_FREE_KBYTES=21,
 VM_MAX_MAP_COUNT=22,
 VM_LAPTOP_MODE=23,
 VM_BLOCK_DUMP=24,
 VM_HUGETLB_GROUP=25,
 VM_VFS_CACHE_PRESSURE=26,
 VM_LEGACY_VA_LAYOUT=27,
 VM_SWAP_TOKEN_TIMEOUT=28,
 VM_DROP_PAGECACHE=29,
 VM_PERCPU_PAGELIST_FRACTION=30,
 VM_ZONE_RECLAIM_MODE=31,
 VM_MIN_UNMAPPED=32,
 VM_PANIC_ON_OOM=33,
 VM_VDSO_ENABLED=34,
 VM_MIN_SLAB=35,
};



enum
{
 NET_CORE=1,
 NET_ETHER=2,
 NET_802=3,
 NET_UNIX=4,
 NET_IPV4=5,
 NET_IPX=6,
 NET_ATALK=7,
 NET_NETROM=8,
 NET_AX25=9,
 NET_BRIDGE=10,
 NET_ROSE=11,
 NET_IPV6=12,
 NET_X25=13,
 NET_TR=14,
 NET_DECNET=15,
 NET_ECONET=16,
 NET_SCTP=17,
 NET_LLC=18,
 NET_NETFILTER=19,
 NET_DCCP=20,
 NET_IRDA=412,
};


enum
{
 RANDOM_POOLSIZE=1,
 RANDOM_ENTROPY_COUNT=2,
 RANDOM_READ_THRESH=3,
 RANDOM_WRITE_THRESH=4,
 RANDOM_BOOT_ID=5,
 RANDOM_UUID=6
};


enum
{
 PTY_MAX=1,
 PTY_NR=2
};


enum
{
 BUS_ISA_MEM_BASE=1,
 BUS_ISA_PORT_BASE=2,
 BUS_ISA_PORT_SHIFT=3
};


enum
{
 NET_CORE_WMEM_MAX=1,
 NET_CORE_RMEM_MAX=2,
 NET_CORE_WMEM_DEFAULT=3,
 NET_CORE_RMEM_DEFAULT=4,

 NET_CORE_MAX_BACKLOG=6,
 NET_CORE_FASTROUTE=7,
 NET_CORE_MSG_COST=8,
 NET_CORE_MSG_BURST=9,
 NET_CORE_OPTMEM_MAX=10,
 NET_CORE_HOT_LIST_LENGTH=11,
 NET_CORE_DIVERT_VERSION=12,
 NET_CORE_NO_CONG_THRESH=13,
 NET_CORE_NO_CONG=14,
 NET_CORE_LO_CONG=15,
 NET_CORE_MOD_CONG=16,
 NET_CORE_DEV_WEIGHT=17,
 NET_CORE_SOMAXCONN=18,
 NET_CORE_BUDGET=19,
 NET_CORE_AEVENT_ETIME=20,
 NET_CORE_AEVENT_RSEQTH=21,
 NET_CORE_WARNINGS=22,
};







enum
{
 NET_UNIX_DESTROY_DELAY=1,
 NET_UNIX_DELETE_DELAY=2,
 NET_UNIX_MAX_DGRAM_QLEN=3,
};


enum
{
 NET_NF_CONNTRACK_MAX=1,
 NET_NF_CONNTRACK_TCP_TIMEOUT_SYN_SENT=2,
 NET_NF_CONNTRACK_TCP_TIMEOUT_SYN_RECV=3,
 NET_NF_CONNTRACK_TCP_TIMEOUT_ESTABLISHED=4,
 NET_NF_CONNTRACK_TCP_TIMEOUT_FIN_WAIT=5,
 NET_NF_CONNTRACK_TCP_TIMEOUT_CLOSE_WAIT=6,
 NET_NF_CONNTRACK_TCP_TIMEOUT_LAST_ACK=7,
 NET_NF_CONNTRACK_TCP_TIMEOUT_TIME_WAIT=8,
 NET_NF_CONNTRACK_TCP_TIMEOUT_CLOSE=9,
 NET_NF_CONNTRACK_UDP_TIMEOUT=10,
 NET_NF_CONNTRACK_UDP_TIMEOUT_STREAM=11,
 NET_NF_CONNTRACK_ICMP_TIMEOUT=12,
 NET_NF_CONNTRACK_GENERIC_TIMEOUT=13,
 NET_NF_CONNTRACK_BUCKETS=14,
 NET_NF_CONNTRACK_LOG_INVALID=15,
 NET_NF_CONNTRACK_TCP_TIMEOUT_MAX_RETRANS=16,
 NET_NF_CONNTRACK_TCP_LOOSE=17,
 NET_NF_CONNTRACK_TCP_BE_LIBERAL=18,
 NET_NF_CONNTRACK_TCP_MAX_RETRANS=19,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_CLOSED=20,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_WAIT=21,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_ECHOED=22,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_ESTABLISHED=23,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_SENT=24,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_RECD=25,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_ACK_SENT=26,
 NET_NF_CONNTRACK_COUNT=27,
 NET_NF_CONNTRACK_ICMPV6_TIMEOUT=28,
 NET_NF_CONNTRACK_FRAG6_TIMEOUT=29,
 NET_NF_CONNTRACK_FRAG6_LOW_THRESH=30,
 NET_NF_CONNTRACK_FRAG6_HIGH_THRESH=31,
 NET_NF_CONNTRACK_CHECKSUM=32,
};


enum
{

 NET_IPV4_FORWARD=8,
 NET_IPV4_DYNADDR=9,

 NET_IPV4_CONF=16,
 NET_IPV4_NEIGH=17,
 NET_IPV4_ROUTE=18,
 NET_IPV4_FIB_HASH=19,
 NET_IPV4_NETFILTER=20,

 NET_IPV4_TCP_TIMESTAMPS=33,
 NET_IPV4_TCP_WINDOW_SCALING=34,
 NET_IPV4_TCP_SACK=35,
 NET_IPV4_TCP_RETRANS_COLLAPSE=36,
 NET_IPV4_DEFAULT_TTL=37,
 NET_IPV4_AUTOCONFIG=38,
 NET_IPV4_NO_PMTU_DISC=39,
 NET_IPV4_TCP_SYN_RETRIES=40,
 NET_IPV4_IPFRAG_HIGH_THRESH=41,
 NET_IPV4_IPFRAG_LOW_THRESH=42,
 NET_IPV4_IPFRAG_TIME=43,
 NET_IPV4_TCP_MAX_KA_PROBES=44,
 NET_IPV4_TCP_KEEPALIVE_TIME=45,
 NET_IPV4_TCP_KEEPALIVE_PROBES=46,
 NET_IPV4_TCP_RETRIES1=47,
 NET_IPV4_TCP_RETRIES2=48,
 NET_IPV4_TCP_FIN_TIMEOUT=49,
 NET_IPV4_IP_MASQ_DEBUG=50,
 NET_TCP_SYNCOOKIES=51,
 NET_TCP_STDURG=52,
 NET_TCP_RFC1337=53,
 NET_TCP_SYN_TAILDROP=54,
 NET_TCP_MAX_SYN_BACKLOG=55,
 NET_IPV4_LOCAL_PORT_RANGE=56,
 NET_IPV4_ICMP_ECHO_IGNORE_ALL=57,
 NET_IPV4_ICMP_ECHO_IGNORE_BROADCASTS=58,
 NET_IPV4_ICMP_SOURCEQUENCH_RATE=59,
 NET_IPV4_ICMP_DESTUNREACH_RATE=60,
 NET_IPV4_ICMP_TIMEEXCEED_RATE=61,
 NET_IPV4_ICMP_PARAMPROB_RATE=62,
 NET_IPV4_ICMP_ECHOREPLY_RATE=63,
 NET_IPV4_ICMP_IGNORE_BOGUS_ERROR_RESPONSES=64,
 NET_IPV4_IGMP_MAX_MEMBERSHIPS=65,
 NET_TCP_TW_RECYCLE=66,
 NET_IPV4_ALWAYS_DEFRAG=67,
 NET_IPV4_TCP_KEEPALIVE_INTVL=68,
 NET_IPV4_INET_PEER_THRESHOLD=69,
 NET_IPV4_INET_PEER_MINTTL=70,
 NET_IPV4_INET_PEER_MAXTTL=71,
 NET_IPV4_INET_PEER_GC_MINTIME=72,
 NET_IPV4_INET_PEER_GC_MAXTIME=73,
 NET_TCP_ORPHAN_RETRIES=74,
 NET_TCP_ABORT_ON_OVERFLOW=75,
 NET_TCP_SYNACK_RETRIES=76,
 NET_TCP_MAX_ORPHANS=77,
 NET_TCP_MAX_TW_BUCKETS=78,
 NET_TCP_FACK=79,
 NET_TCP_REORDERING=80,
 NET_TCP_ECN=81,
 NET_TCP_DSACK=82,
 NET_TCP_MEM=83,
 NET_TCP_WMEM=84,
 NET_TCP_RMEM=85,
 NET_TCP_APP_WIN=86,
 NET_TCP_ADV_WIN_SCALE=87,
 NET_IPV4_NONLOCAL_BIND=88,
 NET_IPV4_ICMP_RATELIMIT=89,
 NET_IPV4_ICMP_RATEMASK=90,
 NET_TCP_TW_REUSE=91,
 NET_TCP_FRTO=92,
 NET_TCP_LOW_LATENCY=93,
 NET_IPV4_IPFRAG_SECRET_INTERVAL=94,
 NET_IPV4_IGMP_MAX_MSF=96,
 NET_TCP_NO_METRICS_SAVE=97,
 NET_TCP_DEFAULT_WIN_SCALE=105,
 NET_TCP_MODERATE_RCVBUF=106,
 NET_TCP_TSO_WIN_DIVISOR=107,
 NET_TCP_BIC_BETA=108,
 NET_IPV4_ICMP_ERRORS_USE_INBOUND_IFADDR=109,
 NET_TCP_CONG_CONTROL=110,
 NET_TCP_ABC=111,
 NET_IPV4_IPFRAG_MAX_DIST=112,
  NET_TCP_MTU_PROBING=113,
 NET_TCP_BASE_MSS=114,
 NET_IPV4_TCP_WORKAROUND_SIGNED_WINDOWS=115,
 NET_TCP_DMA_COPYBREAK=116,
 NET_TCP_SLOW_START_AFTER_IDLE=117,
 NET_CIPSOV4_CACHE_ENABLE=118,
 NET_CIPSOV4_CACHE_BUCKET_SIZE=119,
 NET_CIPSOV4_RBM_OPTFMT=120,
 NET_CIPSOV4_RBM_STRICTVALID=121,
 NET_TCP_AVAIL_CONG_CONTROL=122,
 NET_TCP_ALLOWED_CONG_CONTROL=123,
 NET_TCP_MAX_SSTHRESH=124,
 NET_TCP_FRTO_RESPONSE=125,
};

enum {
 NET_IPV4_ROUTE_FLUSH=1,
 NET_IPV4_ROUTE_MIN_DELAY=2,
 NET_IPV4_ROUTE_MAX_DELAY=3,
 NET_IPV4_ROUTE_GC_THRESH=4,
 NET_IPV4_ROUTE_MAX_SIZE=5,
 NET_IPV4_ROUTE_GC_MIN_INTERVAL=6,
 NET_IPV4_ROUTE_GC_TIMEOUT=7,
 NET_IPV4_ROUTE_GC_INTERVAL=8,
 NET_IPV4_ROUTE_REDIRECT_LOAD=9,
 NET_IPV4_ROUTE_REDIRECT_NUMBER=10,
 NET_IPV4_ROUTE_REDIRECT_SILENCE=11,
 NET_IPV4_ROUTE_ERROR_COST=12,
 NET_IPV4_ROUTE_ERROR_BURST=13,
 NET_IPV4_ROUTE_GC_ELASTICITY=14,
 NET_IPV4_ROUTE_MTU_EXPIRES=15,
 NET_IPV4_ROUTE_MIN_PMTU=16,
 NET_IPV4_ROUTE_MIN_ADVMSS=17,
 NET_IPV4_ROUTE_SECRET_INTERVAL=18,
 NET_IPV4_ROUTE_GC_MIN_INTERVAL_MS=19,
};

enum
{
 NET_PROTO_CONF_ALL=-2,
 NET_PROTO_CONF_DEFAULT=-3


};

enum
{
 NET_IPV4_CONF_FORWARDING=1,
 NET_IPV4_CONF_MC_FORWARDING=2,
 NET_IPV4_CONF_PROXY_ARP=3,
 NET_IPV4_CONF_ACCEPT_REDIRECTS=4,
 NET_IPV4_CONF_SECURE_REDIRECTS=5,
 NET_IPV4_CONF_SEND_REDIRECTS=6,
 NET_IPV4_CONF_SHARED_MEDIA=7,
 NET_IPV4_CONF_RP_FILTER=8,
 NET_IPV4_CONF_ACCEPT_SOURCE_ROUTE=9,
 NET_IPV4_CONF_BOOTP_RELAY=10,
 NET_IPV4_CONF_LOG_MARTIANS=11,
 NET_IPV4_CONF_TAG=12,
 NET_IPV4_CONF_ARPFILTER=13,
 NET_IPV4_CONF_MEDIUM_ID=14,
 NET_IPV4_CONF_NOXFRM=15,
 NET_IPV4_CONF_NOPOLICY=16,
 NET_IPV4_CONF_FORCE_IGMP_VERSION=17,
 NET_IPV4_CONF_ARP_ANNOUNCE=18,
 NET_IPV4_CONF_ARP_IGNORE=19,
 NET_IPV4_CONF_PROMOTE_SECONDARIES=20,
 NET_IPV4_CONF_ARP_ACCEPT=21,
 NET_IPV4_CONF_ARP_NOTIFY=22,
};


enum
{
 NET_IPV4_NF_CONNTRACK_MAX=1,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_SYN_SENT=2,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_SYN_RECV=3,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_ESTABLISHED=4,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_FIN_WAIT=5,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_CLOSE_WAIT=6,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_LAST_ACK=7,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_TIME_WAIT=8,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_CLOSE=9,
 NET_IPV4_NF_CONNTRACK_UDP_TIMEOUT=10,
 NET_IPV4_NF_CONNTRACK_UDP_TIMEOUT_STREAM=11,
 NET_IPV4_NF_CONNTRACK_ICMP_TIMEOUT=12,
 NET_IPV4_NF_CONNTRACK_GENERIC_TIMEOUT=13,
 NET_IPV4_NF_CONNTRACK_BUCKETS=14,
 NET_IPV4_NF_CONNTRACK_LOG_INVALID=15,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_MAX_RETRANS=16,
 NET_IPV4_NF_CONNTRACK_TCP_LOOSE=17,
 NET_IPV4_NF_CONNTRACK_TCP_BE_LIBERAL=18,
 NET_IPV4_NF_CONNTRACK_TCP_MAX_RETRANS=19,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_CLOSED=20,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_WAIT=21,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_ECHOED=22,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_ESTABLISHED=23,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_SENT=24,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_RECD=25,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_ACK_SENT=26,
 NET_IPV4_NF_CONNTRACK_COUNT=27,
 NET_IPV4_NF_CONNTRACK_CHECKSUM=28,
};


enum {
 NET_IPV6_CONF=16,
 NET_IPV6_NEIGH=17,
 NET_IPV6_ROUTE=18,
 NET_IPV6_ICMP=19,
 NET_IPV6_BINDV6ONLY=20,
 NET_IPV6_IP6FRAG_HIGH_THRESH=21,
 NET_IPV6_IP6FRAG_LOW_THRESH=22,
 NET_IPV6_IP6FRAG_TIME=23,
 NET_IPV6_IP6FRAG_SECRET_INTERVAL=24,
 NET_IPV6_MLD_MAX_MSF=25,
};

enum {
 NET_IPV6_ROUTE_FLUSH=1,
 NET_IPV6_ROUTE_GC_THRESH=2,
 NET_IPV6_ROUTE_MAX_SIZE=3,
 NET_IPV6_ROUTE_GC_MIN_INTERVAL=4,
 NET_IPV6_ROUTE_GC_TIMEOUT=5,
 NET_IPV6_ROUTE_GC_INTERVAL=6,
 NET_IPV6_ROUTE_GC_ELASTICITY=7,
 NET_IPV6_ROUTE_MTU_EXPIRES=8,
 NET_IPV6_ROUTE_MIN_ADVMSS=9,
 NET_IPV6_ROUTE_GC_MIN_INTERVAL_MS=10
};

enum {
 NET_IPV6_FORWARDING=1,
 NET_IPV6_HOP_LIMIT=2,
 NET_IPV6_MTU=3,
 NET_IPV6_ACCEPT_RA=4,
 NET_IPV6_ACCEPT_REDIRECTS=5,
 NET_IPV6_AUTOCONF=6,
 NET_IPV6_DAD_TRANSMITS=7,
 NET_IPV6_RTR_SOLICITS=8,
 NET_IPV6_RTR_SOLICIT_INTERVAL=9,
 NET_IPV6_RTR_SOLICIT_DELAY=10,
 NET_IPV6_USE_TEMPADDR=11,
 NET_IPV6_TEMP_VALID_LFT=12,
 NET_IPV6_TEMP_PREFERED_LFT=13,
 NET_IPV6_REGEN_MAX_RETRY=14,
 NET_IPV6_MAX_DESYNC_FACTOR=15,
 NET_IPV6_MAX_ADDRESSES=16,
 NET_IPV6_FORCE_MLD_VERSION=17,
 NET_IPV6_ACCEPT_RA_DEFRTR=18,
 NET_IPV6_ACCEPT_RA_PINFO=19,
 NET_IPV6_ACCEPT_RA_RTR_PREF=20,
 NET_IPV6_RTR_PROBE_INTERVAL=21,
 NET_IPV6_ACCEPT_RA_RT_INFO_MAX_PLEN=22,
 NET_IPV6_PROXY_NDP=23,
 NET_IPV6_ACCEPT_SOURCE_ROUTE=25,
 NET_IPV6_ACCEPT_RA_FROM_LOCAL=26,
 NET_IPV6_ACCEPT_RA_RT_INFO_MIN_PLEN=27,
 NET_IPV6_RA_DEFRTR_METRIC=28,
 __NET_IPV6_MAX
};


enum {
 NET_IPV6_ICMP_RATELIMIT = 1,
 NET_IPV6_ICMP_ECHO_IGNORE_ALL = 2
};


enum {
 NET_NEIGH_MCAST_SOLICIT=1,
 NET_NEIGH_UCAST_SOLICIT=2,
 NET_NEIGH_APP_SOLICIT=3,
 NET_NEIGH_RETRANS_TIME=4,
 NET_NEIGH_REACHABLE_TIME=5,
 NET_NEIGH_DELAY_PROBE_TIME=6,
 NET_NEIGH_GC_STALE_TIME=7,
 NET_NEIGH_UNRES_QLEN=8,
 NET_NEIGH_PROXY_QLEN=9,
 NET_NEIGH_ANYCAST_DELAY=10,
 NET_NEIGH_PROXY_DELAY=11,
 NET_NEIGH_LOCKTIME=12,
 NET_NEIGH_GC_INTERVAL=13,
 NET_NEIGH_GC_THRESH1=14,
 NET_NEIGH_GC_THRESH2=15,
 NET_NEIGH_GC_THRESH3=16,
 NET_NEIGH_RETRANS_TIME_MS=17,
 NET_NEIGH_REACHABLE_TIME_MS=18,
};


enum {
 NET_DCCP_DEFAULT=1,
};


enum {
 NET_IPX_PPROP_BROADCASTING=1,
 NET_IPX_FORWARDING=2
};


enum {
 NET_LLC2=1,
 NET_LLC_STATION=2,
};


enum {
 NET_LLC2_TIMEOUT=1,
};


enum {
 NET_LLC_STATION_ACK_TIMEOUT=1,
};


enum {
 NET_LLC2_ACK_TIMEOUT=1,
 NET_LLC2_P_TIMEOUT=2,
 NET_LLC2_REJ_TIMEOUT=3,
 NET_LLC2_BUSY_TIMEOUT=4,
};


enum {
 NET_ATALK_AARP_EXPIRY_TIME=1,
 NET_ATALK_AARP_TICK_TIME=2,
 NET_ATALK_AARP_RETRANSMIT_LIMIT=3,
 NET_ATALK_AARP_RESOLVE_TIME=4
};



enum {
 NET_NETROM_DEFAULT_PATH_QUALITY=1,
 NET_NETROM_OBSOLESCENCE_COUNT_INITIALISER=2,
 NET_NETROM_NETWORK_TTL_INITIALISER=3,
 NET_NETROM_TRANSPORT_TIMEOUT=4,
 NET_NETROM_TRANSPORT_MAXIMUM_TRIES=5,
 NET_NETROM_TRANSPORT_ACKNOWLEDGE_DELAY=6,
 NET_NETROM_TRANSPORT_BUSY_DELAY=7,
 NET_NETROM_TRANSPORT_REQUESTED_WINDOW_SIZE=8,
 NET_NETROM_TRANSPORT_NO_ACTIVITY_TIMEOUT=9,
 NET_NETROM_ROUTING_CONTROL=10,
 NET_NETROM_LINK_FAILS_COUNT=11,
 NET_NETROM_RESET=12
};


enum {
 NET_AX25_IP_DEFAULT_MODE=1,
 NET_AX25_DEFAULT_MODE=2,
 NET_AX25_BACKOFF_TYPE=3,
 NET_AX25_CONNECT_MODE=4,
 NET_AX25_STANDARD_WINDOW=5,
 NET_AX25_EXTENDED_WINDOW=6,
 NET_AX25_T1_TIMEOUT=7,
 NET_AX25_T2_TIMEOUT=8,
 NET_AX25_T3_TIMEOUT=9,
 NET_AX25_IDLE_TIMEOUT=10,
 NET_AX25_N2=11,
 NET_AX25_PACLEN=12,
 NET_AX25_PROTOCOL=13,
 NET_AX25_DAMA_SLAVE_TIMEOUT=14
};


enum {
 NET_ROSE_RESTART_REQUEST_TIMEOUT=1,
 NET_ROSE_CALL_REQUEST_TIMEOUT=2,
 NET_ROSE_RESET_REQUEST_TIMEOUT=3,
 NET_ROSE_CLEAR_REQUEST_TIMEOUT=4,
 NET_ROSE_ACK_HOLD_BACK_TIMEOUT=5,
 NET_ROSE_ROUTING_CONTROL=6,
 NET_ROSE_LINK_FAIL_TIMEOUT=7,
 NET_ROSE_MAX_VCS=8,
 NET_ROSE_WINDOW_SIZE=9,
 NET_ROSE_NO_ACTIVITY_TIMEOUT=10
};


enum {
 NET_X25_RESTART_REQUEST_TIMEOUT=1,
 NET_X25_CALL_REQUEST_TIMEOUT=2,
 NET_X25_RESET_REQUEST_TIMEOUT=3,
 NET_X25_CLEAR_REQUEST_TIMEOUT=4,
 NET_X25_ACK_HOLD_BACK_TIMEOUT=5,
 NET_X25_FORWARD=6
};


enum
{
 NET_TR_RIF_TIMEOUT=1
};


enum {
 NET_DECNET_NODE_TYPE = 1,
 NET_DECNET_NODE_ADDRESS = 2,
 NET_DECNET_NODE_NAME = 3,
 NET_DECNET_DEFAULT_DEVICE = 4,
 NET_DECNET_TIME_WAIT = 5,
 NET_DECNET_DN_COUNT = 6,
 NET_DECNET_DI_COUNT = 7,
 NET_DECNET_DR_COUNT = 8,
 NET_DECNET_DST_GC_INTERVAL = 9,
 NET_DECNET_CONF = 10,
 NET_DECNET_NO_FC_MAX_CWND = 11,
 NET_DECNET_MEM = 12,
 NET_DECNET_RMEM = 13,
 NET_DECNET_WMEM = 14,
 NET_DECNET_DEBUG_LEVEL = 255
};


enum {
 NET_DECNET_CONF_LOOPBACK = -2,
 NET_DECNET_CONF_DDCMP = -3,
 NET_DECNET_CONF_PPP = -4,
 NET_DECNET_CONF_X25 = -5,
 NET_DECNET_CONF_GRE = -6,
 NET_DECNET_CONF_ETHER = -7


};


enum {
 NET_DECNET_CONF_DEV_PRIORITY = 1,
 NET_DECNET_CONF_DEV_T1 = 2,
 NET_DECNET_CONF_DEV_T2 = 3,
 NET_DECNET_CONF_DEV_T3 = 4,
 NET_DECNET_CONF_DEV_FORWARDING = 5,
 NET_DECNET_CONF_DEV_BLKSIZE = 6,
 NET_DECNET_CONF_DEV_STATE = 7
};


enum {
 NET_SCTP_RTO_INITIAL = 1,
 NET_SCTP_RTO_MIN = 2,
 NET_SCTP_RTO_MAX = 3,
 NET_SCTP_RTO_ALPHA = 4,
 NET_SCTP_RTO_BETA = 5,
 NET_SCTP_VALID_COOKIE_LIFE = 6,
 NET_SCTP_ASSOCIATION_MAX_RETRANS = 7,
 NET_SCTP_PATH_MAX_RETRANS = 8,
 NET_SCTP_MAX_INIT_RETRANSMITS = 9,
 NET_SCTP_HB_INTERVAL = 10,
 NET_SCTP_PRESERVE_ENABLE = 11,
 NET_SCTP_MAX_BURST = 12,
 NET_SCTP_ADDIP_ENABLE = 13,
 NET_SCTP_PRSCTP_ENABLE = 14,
 NET_SCTP_SNDBUF_POLICY = 15,
 NET_SCTP_SACK_TIMEOUT = 16,
 NET_SCTP_RCVBUF_POLICY = 17,
};


enum {
 NET_BRIDGE_NF_CALL_ARPTABLES = 1,
 NET_BRIDGE_NF_CALL_IPTABLES = 2,
 NET_BRIDGE_NF_CALL_IP6TABLES = 3,
 NET_BRIDGE_NF_FILTER_VLAN_TAGGED = 4,
 NET_BRIDGE_NF_FILTER_PPPOE_TAGGED = 5,
};



enum
{
 FS_NRINODE=1,
 FS_STATINODE=2,
 FS_MAXINODE=3,
 FS_NRDQUOT=4,
 FS_MAXDQUOT=5,
 FS_NRFILE=6,
 FS_MAXFILE=7,
 FS_DENTRY=8,
 FS_NRSUPER=9,
 FS_MAXSUPER=10,
 FS_OVERFLOWUID=11,
 FS_OVERFLOWGID=12,
 FS_LEASES=13,
 FS_DIR_NOTIFY=14,
 FS_LEASE_TIME=15,
 FS_DQSTATS=16,
 FS_XFS=17,
 FS_AIO_NR=18,
 FS_AIO_MAX_NR=19,
 FS_INOTIFY=20,
 FS_OCFS2=988,
};


enum {
 FS_DQ_LOOKUPS = 1,
 FS_DQ_DROPS = 2,
 FS_DQ_READS = 3,
 FS_DQ_WRITES = 4,
 FS_DQ_CACHE_HITS = 5,
 FS_DQ_ALLOCATED = 6,
 FS_DQ_FREE = 7,
 FS_DQ_SYNCS = 8,
 FS_DQ_WARNINGS = 9,
};




enum {
 DEV_CDROM=1,
 DEV_HWMON=2,
 DEV_PARPORT=3,
 DEV_RAID=4,
 DEV_MAC_HID=5,
 DEV_SCSI=6,
 DEV_IPMI=7,
};


enum {
 DEV_CDROM_INFO=1,
 DEV_CDROM_AUTOCLOSE=2,
 DEV_CDROM_AUTOEJECT=3,
 DEV_CDROM_DEBUG=4,
 DEV_CDROM_LOCK=5,
 DEV_CDROM_CHECK_MEDIA=6
};


enum {
 DEV_PARPORT_DEFAULT=-3
};


enum {
 DEV_RAID_SPEED_LIMIT_MIN=1,
 DEV_RAID_SPEED_LIMIT_MAX=2
};


enum {
 DEV_PARPORT_DEFAULT_TIMESLICE=1,
 DEV_PARPORT_DEFAULT_SPINTIME=2
};


enum {
 DEV_PARPORT_SPINTIME=1,
 DEV_PARPORT_BASE_ADDR=2,
 DEV_PARPORT_IRQ=3,
 DEV_PARPORT_DMA=4,
 DEV_PARPORT_MODES=5,
 DEV_PARPORT_DEVICES=6,
 DEV_PARPORT_AUTOPROBE=16
};


enum {
 DEV_PARPORT_DEVICES_ACTIVE=-3,
};


enum {
 DEV_PARPORT_DEVICE_TIMESLICE=1,
};


enum {
 DEV_MAC_HID_KEYBOARD_SENDS_LINUX_KEYCODES=1,
 DEV_MAC_HID_KEYBOARD_LOCK_KEYCODES=2,
 DEV_MAC_HID_MOUSE_BUTTON_EMULATION=3,
 DEV_MAC_HID_MOUSE_BUTTON2_KEYCODE=4,
 DEV_MAC_HID_MOUSE_BUTTON3_KEYCODE=5,
 DEV_MAC_HID_ADB_MOUSE_SENDS_KEYCODES=6
};


enum {
 DEV_SCSI_LOGGING_LEVEL=1,
};


enum {
 DEV_IPMI_POWEROFF_POWERCYCLE=1,
};


enum
{
 ABI_DEFHANDLER_COFF=1,
 ABI_DEFHANDLER_ELF=2,
 ABI_DEFHANDLER_LCALL7=3,
 ABI_DEFHANDLER_LIBCSO=4,
 ABI_TRACE=5,
 ABI_FAKE_UTSNAME=6,
};
# 621 "stress-ng.h" 2



# 1 "/usr/include/linux/taskstats.h" 1 3 4
# 41 "/usr/include/linux/taskstats.h" 3 4
struct taskstats {





 __u16 version;
 __u32 ac_exitcode;




 __u8 ac_flag;
 __u8 ac_nice;
# 72 "/usr/include/linux/taskstats.h" 3 4
 __u64 cpu_count __attribute__((aligned(8)));
 __u64 cpu_delay_total;






 __u64 blkio_count;
 __u64 blkio_delay_total;


 __u64 swapin_count;
 __u64 swapin_delay_total;







 __u64 cpu_run_real_total;







 __u64 cpu_run_virtual_total;




 char ac_comm[32];
 __u8 ac_sched __attribute__((aligned(8)));

 __u8 ac_pad[3];
 __u32 ac_uid __attribute__((aligned(8)));

 __u32 ac_gid;
 __u32 ac_pid;
 __u32 ac_ppid;

 __u32 ac_btime;
 __u64 ac_etime __attribute__((aligned(8)));

 __u64 ac_utime;
 __u64 ac_stime;
 __u64 ac_minflt;
 __u64 ac_majflt;
# 132 "/usr/include/linux/taskstats.h" 3 4
 __u64 coremem;



 __u64 virtmem;




 __u64 hiwater_rss;
 __u64 hiwater_vm;


 __u64 read_char;
 __u64 write_char;
 __u64 read_syscalls;
 __u64 write_syscalls;




 __u64 read_bytes;
 __u64 write_bytes;
 __u64 cancelled_write_bytes;

 __u64 nvcsw;
 __u64 nivcsw;


 __u64 ac_utimescaled;
 __u64 ac_stimescaled;
 __u64 cpu_scaled_run_real_total;


 __u64 freepages_count;
 __u64 freepages_delay_total;


 __u64 thrashing_count;
 __u64 thrashing_delay_total;


 __u64 ac_btime64;
};
# 184 "/usr/include/linux/taskstats.h" 3 4
enum {
 TASKSTATS_CMD_UNSPEC = 0,
 TASKSTATS_CMD_GET,
 TASKSTATS_CMD_NEW,
 __TASKSTATS_CMD_MAX,
};



enum {
 TASKSTATS_TYPE_UNSPEC = 0,
 TASKSTATS_TYPE_PID,
 TASKSTATS_TYPE_TGID,
 TASKSTATS_TYPE_STATS,
 TASKSTATS_TYPE_AGGR_PID,
 TASKSTATS_TYPE_AGGR_TGID,
 TASKSTATS_TYPE_NULL,
 __TASKSTATS_TYPE_MAX,
};



enum {
 TASKSTATS_CMD_ATTR_UNSPEC = 0,
 TASKSTATS_CMD_ATTR_PID,
 TASKSTATS_CMD_ATTR_TGID,
 TASKSTATS_CMD_ATTR_REGISTER_CPUMASK,
 TASKSTATS_CMD_ATTR_DEREGISTER_CPUMASK,
 __TASKSTATS_CMD_ATTR_MAX,
};
# 625 "stress-ng.h" 2



# 1 "/usr/include/linux/udp.h" 1 3 4
# 23 "/usr/include/linux/udp.h" 3 4
struct udphdr {
 __be16 source;
 __be16 dest;
 __be16 len;
 __sum16 check;
};
# 629 "stress-ng.h" 2



# 1 "/usr/include/linux/unix_diag.h" 1 3 4






struct unix_diag_req {
 __u8 sdiag_family;
 __u8 sdiag_protocol;
 __u16 pad;
 __u32 udiag_states;
 __u32 udiag_ino;
 __u32 udiag_show;
 __u32 udiag_cookie[2];
};
# 25 "/usr/include/linux/unix_diag.h" 3 4
struct unix_diag_msg {
 __u8 udiag_family;
 __u8 udiag_type;
 __u8 udiag_state;
 __u8 pad;

 __u32 udiag_ino;
 __u32 udiag_cookie[2];
};

enum {

 UNIX_DIAG_NAME,
 UNIX_DIAG_VFS,
 UNIX_DIAG_PEER,
 UNIX_DIAG_ICONS,
 UNIX_DIAG_RQLEN,
 UNIX_DIAG_MEMINFO,
 UNIX_DIAG_SHUTDOWN,
 UNIX_DIAG_UID,

 __UNIX_DIAG_MAX,
};



struct unix_diag_vfs {
 __u32 udiag_vfs_ino;
 __u32 udiag_vfs_dev;
};

struct unix_diag_rqlen {
 __u32 udiag_rqueue;
 __u32 udiag_wqueue;
};
# 633 "stress-ng.h" 2



# 1 "/usr/include/linux/userfaultfd.h" 1 3 4
# 88 "/usr/include/linux/userfaultfd.h" 3 4
struct uffd_msg {
 __u8 event;

 __u8 reserved1;
 __u16 reserved2;
 __u32 reserved3;

 union {
  struct {
   __u64 flags;
   __u64 address;
   union {
    __u32 ptid;
   } feat;
  } pagefault;

  struct {
   __u32 ufd;
  } fork;

  struct {
   __u64 from;
   __u64 to;
   __u64 len;
  } remap;

  struct {
   __u64 start;
   __u64 end;
  } remove;

  struct {

   __u64 reserved1;
   __u64 reserved2;
   __u64 reserved3;
  } reserved;
 } arg;
} __attribute__((packed));
# 142 "/usr/include/linux/userfaultfd.h" 3 4
struct uffdio_api {

 __u64 api;
# 204 "/usr/include/linux/userfaultfd.h" 3 4
 __u64 features;

 __u64 ioctls;
};

struct uffdio_range {
 __u64 start;
 __u64 len;
};

struct uffdio_register {
 struct uffdio_range range;



 __u64 mode;





 __u64 ioctls;
};

struct uffdio_copy {
 __u64 dst;
 __u64 src;
 __u64 len;
# 240 "/usr/include/linux/userfaultfd.h" 3 4
 __u64 mode;





 __s64 copy;
};

struct uffdio_zeropage {
 struct uffdio_range range;

 __u64 mode;





 __s64 zeropage;
};

struct uffdio_writeprotect {
 struct uffdio_range range;
# 278 "/usr/include/linux/userfaultfd.h" 3 4
 __u64 mode;
};

struct uffdio_continue {
 struct uffdio_range range;

 __u64 mode;





 __s64 mapped;
};
# 637 "stress-ng.h" 2



# 1 "/usr/include/linux/version.h" 1 3 4
# 641 "stress-ng.h" 2



# 1 "/usr/include/linux/videodev2.h" 1 3 4
# 64 "/usr/include/linux/videodev2.h" 3 4
# 1 "/usr/include/linux/v4l2-common.h" 1 3 4
# 87 "/usr/include/linux/v4l2-common.h" 3 4
struct v4l2_edid {
 __u32 pad;
 __u32 start_block;
 __u32 blocks;
 __u32 reserved[5];
 __u8 *edid;
};
# 65 "/usr/include/linux/videodev2.h" 2 3 4
# 1 "/usr/include/linux/v4l2-controls.h" 1 3 4
# 101 "/usr/include/linux/v4l2-controls.h" 3 4
enum v4l2_power_line_frequency {
 V4L2_CID_POWER_LINE_FREQUENCY_DISABLED = 0,
 V4L2_CID_POWER_LINE_FREQUENCY_50HZ = 1,
 V4L2_CID_POWER_LINE_FREQUENCY_60HZ = 2,
 V4L2_CID_POWER_LINE_FREQUENCY_AUTO = 3,
};







enum v4l2_colorfx {
 V4L2_COLORFX_NONE = 0,
 V4L2_COLORFX_BW = 1,
 V4L2_COLORFX_SEPIA = 2,
 V4L2_COLORFX_NEGATIVE = 3,
 V4L2_COLORFX_EMBOSS = 4,
 V4L2_COLORFX_SKETCH = 5,
 V4L2_COLORFX_SKY_BLUE = 6,
 V4L2_COLORFX_GRASS_GREEN = 7,
 V4L2_COLORFX_SKIN_WHITEN = 8,
 V4L2_COLORFX_VIVID = 9,
 V4L2_COLORFX_AQUA = 10,
 V4L2_COLORFX_ART_FREEZE = 11,
 V4L2_COLORFX_SILHOUETTE = 12,
 V4L2_COLORFX_SOLARIZATION = 13,
 V4L2_COLORFX_ANTIQUE = 14,
 V4L2_COLORFX_SET_CBCR = 15,
};
# 224 "/usr/include/linux/v4l2-controls.h" 3 4
enum v4l2_mpeg_stream_type {
 V4L2_MPEG_STREAM_TYPE_MPEG2_PS = 0,
 V4L2_MPEG_STREAM_TYPE_MPEG2_TS = 1,
 V4L2_MPEG_STREAM_TYPE_MPEG1_SS = 2,
 V4L2_MPEG_STREAM_TYPE_MPEG2_DVD = 3,
 V4L2_MPEG_STREAM_TYPE_MPEG1_VCD = 4,
 V4L2_MPEG_STREAM_TYPE_MPEG2_SVCD = 5,
};







enum v4l2_mpeg_stream_vbi_fmt {
 V4L2_MPEG_STREAM_VBI_FMT_NONE = 0,
 V4L2_MPEG_STREAM_VBI_FMT_IVTV = 1,
};



enum v4l2_mpeg_audio_sampling_freq {
 V4L2_MPEG_AUDIO_SAMPLING_FREQ_44100 = 0,
 V4L2_MPEG_AUDIO_SAMPLING_FREQ_48000 = 1,
 V4L2_MPEG_AUDIO_SAMPLING_FREQ_32000 = 2,
};

enum v4l2_mpeg_audio_encoding {
 V4L2_MPEG_AUDIO_ENCODING_LAYER_1 = 0,
 V4L2_MPEG_AUDIO_ENCODING_LAYER_2 = 1,
 V4L2_MPEG_AUDIO_ENCODING_LAYER_3 = 2,
 V4L2_MPEG_AUDIO_ENCODING_AAC = 3,
 V4L2_MPEG_AUDIO_ENCODING_AC3 = 4,
};

enum v4l2_mpeg_audio_l1_bitrate {
 V4L2_MPEG_AUDIO_L1_BITRATE_32K = 0,
 V4L2_MPEG_AUDIO_L1_BITRATE_64K = 1,
 V4L2_MPEG_AUDIO_L1_BITRATE_96K = 2,
 V4L2_MPEG_AUDIO_L1_BITRATE_128K = 3,
 V4L2_MPEG_AUDIO_L1_BITRATE_160K = 4,
 V4L2_MPEG_AUDIO_L1_BITRATE_192K = 5,
 V4L2_MPEG_AUDIO_L1_BITRATE_224K = 6,
 V4L2_MPEG_AUDIO_L1_BITRATE_256K = 7,
 V4L2_MPEG_AUDIO_L1_BITRATE_288K = 8,
 V4L2_MPEG_AUDIO_L1_BITRATE_320K = 9,
 V4L2_MPEG_AUDIO_L1_BITRATE_352K = 10,
 V4L2_MPEG_AUDIO_L1_BITRATE_384K = 11,
 V4L2_MPEG_AUDIO_L1_BITRATE_416K = 12,
 V4L2_MPEG_AUDIO_L1_BITRATE_448K = 13,
};

enum v4l2_mpeg_audio_l2_bitrate {
 V4L2_MPEG_AUDIO_L2_BITRATE_32K = 0,
 V4L2_MPEG_AUDIO_L2_BITRATE_48K = 1,
 V4L2_MPEG_AUDIO_L2_BITRATE_56K = 2,
 V4L2_MPEG_AUDIO_L2_BITRATE_64K = 3,
 V4L2_MPEG_AUDIO_L2_BITRATE_80K = 4,
 V4L2_MPEG_AUDIO_L2_BITRATE_96K = 5,
 V4L2_MPEG_AUDIO_L2_BITRATE_112K = 6,
 V4L2_MPEG_AUDIO_L2_BITRATE_128K = 7,
 V4L2_MPEG_AUDIO_L2_BITRATE_160K = 8,
 V4L2_MPEG_AUDIO_L2_BITRATE_192K = 9,
 V4L2_MPEG_AUDIO_L2_BITRATE_224K = 10,
 V4L2_MPEG_AUDIO_L2_BITRATE_256K = 11,
 V4L2_MPEG_AUDIO_L2_BITRATE_320K = 12,
 V4L2_MPEG_AUDIO_L2_BITRATE_384K = 13,
};

enum v4l2_mpeg_audio_l3_bitrate {
 V4L2_MPEG_AUDIO_L3_BITRATE_32K = 0,
 V4L2_MPEG_AUDIO_L3_BITRATE_40K = 1,
 V4L2_MPEG_AUDIO_L3_BITRATE_48K = 2,
 V4L2_MPEG_AUDIO_L3_BITRATE_56K = 3,
 V4L2_MPEG_AUDIO_L3_BITRATE_64K = 4,
 V4L2_MPEG_AUDIO_L3_BITRATE_80K = 5,
 V4L2_MPEG_AUDIO_L3_BITRATE_96K = 6,
 V4L2_MPEG_AUDIO_L3_BITRATE_112K = 7,
 V4L2_MPEG_AUDIO_L3_BITRATE_128K = 8,
 V4L2_MPEG_AUDIO_L3_BITRATE_160K = 9,
 V4L2_MPEG_AUDIO_L3_BITRATE_192K = 10,
 V4L2_MPEG_AUDIO_L3_BITRATE_224K = 11,
 V4L2_MPEG_AUDIO_L3_BITRATE_256K = 12,
 V4L2_MPEG_AUDIO_L3_BITRATE_320K = 13,
};

enum v4l2_mpeg_audio_mode {
 V4L2_MPEG_AUDIO_MODE_STEREO = 0,
 V4L2_MPEG_AUDIO_MODE_JOINT_STEREO = 1,
 V4L2_MPEG_AUDIO_MODE_DUAL = 2,
 V4L2_MPEG_AUDIO_MODE_MONO = 3,
};

enum v4l2_mpeg_audio_mode_extension {
 V4L2_MPEG_AUDIO_MODE_EXTENSION_BOUND_4 = 0,
 V4L2_MPEG_AUDIO_MODE_EXTENSION_BOUND_8 = 1,
 V4L2_MPEG_AUDIO_MODE_EXTENSION_BOUND_12 = 2,
 V4L2_MPEG_AUDIO_MODE_EXTENSION_BOUND_16 = 3,
};

enum v4l2_mpeg_audio_emphasis {
 V4L2_MPEG_AUDIO_EMPHASIS_NONE = 0,
 V4L2_MPEG_AUDIO_EMPHASIS_50_DIV_15_uS = 1,
 V4L2_MPEG_AUDIO_EMPHASIS_CCITT_J17 = 2,
};

enum v4l2_mpeg_audio_crc {
 V4L2_MPEG_AUDIO_CRC_NONE = 0,
 V4L2_MPEG_AUDIO_CRC_CRC16 = 1,
};



enum v4l2_mpeg_audio_ac3_bitrate {
 V4L2_MPEG_AUDIO_AC3_BITRATE_32K = 0,
 V4L2_MPEG_AUDIO_AC3_BITRATE_40K = 1,
 V4L2_MPEG_AUDIO_AC3_BITRATE_48K = 2,
 V4L2_MPEG_AUDIO_AC3_BITRATE_56K = 3,
 V4L2_MPEG_AUDIO_AC3_BITRATE_64K = 4,
 V4L2_MPEG_AUDIO_AC3_BITRATE_80K = 5,
 V4L2_MPEG_AUDIO_AC3_BITRATE_96K = 6,
 V4L2_MPEG_AUDIO_AC3_BITRATE_112K = 7,
 V4L2_MPEG_AUDIO_AC3_BITRATE_128K = 8,
 V4L2_MPEG_AUDIO_AC3_BITRATE_160K = 9,
 V4L2_MPEG_AUDIO_AC3_BITRATE_192K = 10,
 V4L2_MPEG_AUDIO_AC3_BITRATE_224K = 11,
 V4L2_MPEG_AUDIO_AC3_BITRATE_256K = 12,
 V4L2_MPEG_AUDIO_AC3_BITRATE_320K = 13,
 V4L2_MPEG_AUDIO_AC3_BITRATE_384K = 14,
 V4L2_MPEG_AUDIO_AC3_BITRATE_448K = 15,
 V4L2_MPEG_AUDIO_AC3_BITRATE_512K = 16,
 V4L2_MPEG_AUDIO_AC3_BITRATE_576K = 17,
 V4L2_MPEG_AUDIO_AC3_BITRATE_640K = 18,
};

enum v4l2_mpeg_audio_dec_playback {
 V4L2_MPEG_AUDIO_DEC_PLAYBACK_AUTO = 0,
 V4L2_MPEG_AUDIO_DEC_PLAYBACK_STEREO = 1,
 V4L2_MPEG_AUDIO_DEC_PLAYBACK_LEFT = 2,
 V4L2_MPEG_AUDIO_DEC_PLAYBACK_RIGHT = 3,
 V4L2_MPEG_AUDIO_DEC_PLAYBACK_MONO = 4,
 V4L2_MPEG_AUDIO_DEC_PLAYBACK_SWAPPED_STEREO = 5,
};




enum v4l2_mpeg_video_encoding {
 V4L2_MPEG_VIDEO_ENCODING_MPEG_1 = 0,
 V4L2_MPEG_VIDEO_ENCODING_MPEG_2 = 1,
 V4L2_MPEG_VIDEO_ENCODING_MPEG_4_AVC = 2,
};

enum v4l2_mpeg_video_aspect {
 V4L2_MPEG_VIDEO_ASPECT_1x1 = 0,
 V4L2_MPEG_VIDEO_ASPECT_4x3 = 1,
 V4L2_MPEG_VIDEO_ASPECT_16x9 = 2,
 V4L2_MPEG_VIDEO_ASPECT_221x100 = 3,
};





enum v4l2_mpeg_video_bitrate_mode {
 V4L2_MPEG_VIDEO_BITRATE_MODE_VBR = 0,
 V4L2_MPEG_VIDEO_BITRATE_MODE_CBR = 1,
 V4L2_MPEG_VIDEO_BITRATE_MODE_CQ = 2,
};
# 404 "/usr/include/linux/v4l2-controls.h" 3 4
enum v4l2_mpeg_video_header_mode {
 V4L2_MPEG_VIDEO_HEADER_MODE_SEPARATE = 0,
 V4L2_MPEG_VIDEO_HEADER_MODE_JOINED_WITH_1ST_FRAME = 1,

};





enum v4l2_mpeg_video_multi_slice_mode {
 V4L2_MPEG_VIDEO_MULTI_SLICE_MODE_SINGLE = 0,
 V4L2_MPEG_VIDEO_MULTI_SLICE_MODE_MAX_MB = 1,
 V4L2_MPEG_VIDEO_MULTI_SLICE_MODE_MAX_BYTES = 2,

 V4L2_MPEG_VIDEO_MULTI_SICE_MODE_MAX_MB = 1,
 V4L2_MPEG_VIDEO_MULTI_SICE_MODE_MAX_BYTES = 2,
};
# 440 "/usr/include/linux/v4l2-controls.h" 3 4
enum v4l2_mpeg_video_mpeg2_level {
 V4L2_MPEG_VIDEO_MPEG2_LEVEL_LOW = 0,
 V4L2_MPEG_VIDEO_MPEG2_LEVEL_MAIN = 1,
 V4L2_MPEG_VIDEO_MPEG2_LEVEL_HIGH_1440 = 2,
 V4L2_MPEG_VIDEO_MPEG2_LEVEL_HIGH = 3,
};

enum v4l2_mpeg_video_mpeg2_profile {
 V4L2_MPEG_VIDEO_MPEG2_PROFILE_SIMPLE = 0,
 V4L2_MPEG_VIDEO_MPEG2_PROFILE_MAIN = 1,
 V4L2_MPEG_VIDEO_MPEG2_PROFILE_SNR_SCALABLE = 2,
 V4L2_MPEG_VIDEO_MPEG2_PROFILE_SPATIALLY_SCALABLE = 3,
 V4L2_MPEG_VIDEO_MPEG2_PROFILE_HIGH = 4,
 V4L2_MPEG_VIDEO_MPEG2_PROFILE_MULTIVIEW = 5,
};
# 473 "/usr/include/linux/v4l2-controls.h" 3 4
enum v4l2_mpeg_video_h264_entropy_mode {
 V4L2_MPEG_VIDEO_H264_ENTROPY_MODE_CAVLC = 0,
 V4L2_MPEG_VIDEO_H264_ENTROPY_MODE_CABAC = 1,
};


enum v4l2_mpeg_video_h264_level {
 V4L2_MPEG_VIDEO_H264_LEVEL_1_0 = 0,
 V4L2_MPEG_VIDEO_H264_LEVEL_1B = 1,
 V4L2_MPEG_VIDEO_H264_LEVEL_1_1 = 2,
 V4L2_MPEG_VIDEO_H264_LEVEL_1_2 = 3,
 V4L2_MPEG_VIDEO_H264_LEVEL_1_3 = 4,
 V4L2_MPEG_VIDEO_H264_LEVEL_2_0 = 5,
 V4L2_MPEG_VIDEO_H264_LEVEL_2_1 = 6,
 V4L2_MPEG_VIDEO_H264_LEVEL_2_2 = 7,
 V4L2_MPEG_VIDEO_H264_LEVEL_3_0 = 8,
 V4L2_MPEG_VIDEO_H264_LEVEL_3_1 = 9,
 V4L2_MPEG_VIDEO_H264_LEVEL_3_2 = 10,
 V4L2_MPEG_VIDEO_H264_LEVEL_4_0 = 11,
 V4L2_MPEG_VIDEO_H264_LEVEL_4_1 = 12,
 V4L2_MPEG_VIDEO_H264_LEVEL_4_2 = 13,
 V4L2_MPEG_VIDEO_H264_LEVEL_5_0 = 14,
 V4L2_MPEG_VIDEO_H264_LEVEL_5_1 = 15,
 V4L2_MPEG_VIDEO_H264_LEVEL_5_2 = 16,
 V4L2_MPEG_VIDEO_H264_LEVEL_6_0 = 17,
 V4L2_MPEG_VIDEO_H264_LEVEL_6_1 = 18,
 V4L2_MPEG_VIDEO_H264_LEVEL_6_2 = 19,
};



enum v4l2_mpeg_video_h264_loop_filter_mode {
 V4L2_MPEG_VIDEO_H264_LOOP_FILTER_MODE_ENABLED = 0,
 V4L2_MPEG_VIDEO_H264_LOOP_FILTER_MODE_DISABLED = 1,
 V4L2_MPEG_VIDEO_H264_LOOP_FILTER_MODE_DISABLED_AT_SLICE_BOUNDARY = 2,
};

enum v4l2_mpeg_video_h264_profile {
 V4L2_MPEG_VIDEO_H264_PROFILE_BASELINE = 0,
 V4L2_MPEG_VIDEO_H264_PROFILE_CONSTRAINED_BASELINE = 1,
 V4L2_MPEG_VIDEO_H264_PROFILE_MAIN = 2,
 V4L2_MPEG_VIDEO_H264_PROFILE_EXTENDED = 3,
 V4L2_MPEG_VIDEO_H264_PROFILE_HIGH = 4,
 V4L2_MPEG_VIDEO_H264_PROFILE_HIGH_10 = 5,
 V4L2_MPEG_VIDEO_H264_PROFILE_HIGH_422 = 6,
 V4L2_MPEG_VIDEO_H264_PROFILE_HIGH_444_PREDICTIVE = 7,
 V4L2_MPEG_VIDEO_H264_PROFILE_HIGH_10_INTRA = 8,
 V4L2_MPEG_VIDEO_H264_PROFILE_HIGH_422_INTRA = 9,
 V4L2_MPEG_VIDEO_H264_PROFILE_HIGH_444_INTRA = 10,
 V4L2_MPEG_VIDEO_H264_PROFILE_CAVLC_444_INTRA = 11,
 V4L2_MPEG_VIDEO_H264_PROFILE_SCALABLE_BASELINE = 12,
 V4L2_MPEG_VIDEO_H264_PROFILE_SCALABLE_HIGH = 13,
 V4L2_MPEG_VIDEO_H264_PROFILE_SCALABLE_HIGH_INTRA = 14,
 V4L2_MPEG_VIDEO_H264_PROFILE_STEREO_HIGH = 15,
 V4L2_MPEG_VIDEO_H264_PROFILE_MULTIVIEW_HIGH = 16,
 V4L2_MPEG_VIDEO_H264_PROFILE_CONSTRAINED_HIGH = 17,
};




enum v4l2_mpeg_video_h264_vui_sar_idc {
 V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_UNSPECIFIED = 0,
 V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_1x1 = 1,
 V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_12x11 = 2,
 V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_10x11 = 3,
 V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_16x11 = 4,
 V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_40x33 = 5,
 V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_24x11 = 6,
 V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_20x11 = 7,
 V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_32x11 = 8,
 V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_80x33 = 9,
 V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_18x11 = 10,
 V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_15x11 = 11,
 V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_64x33 = 12,
 V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_160x99 = 13,
 V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_4x3 = 14,
 V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_3x2 = 15,
 V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_2x1 = 16,
 V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_EXTENDED = 17,
};



enum v4l2_mpeg_video_h264_sei_fp_arrangement_type {
 V4L2_MPEG_VIDEO_H264_SEI_FP_ARRANGEMENT_TYPE_CHECKERBOARD = 0,
 V4L2_MPEG_VIDEO_H264_SEI_FP_ARRANGEMENT_TYPE_COLUMN = 1,
 V4L2_MPEG_VIDEO_H264_SEI_FP_ARRANGEMENT_TYPE_ROW = 2,
 V4L2_MPEG_VIDEO_H264_SEI_FP_ARRANGEMENT_TYPE_SIDE_BY_SIDE = 3,
 V4L2_MPEG_VIDEO_H264_SEI_FP_ARRANGEMENT_TYPE_TOP_BOTTOM = 4,
 V4L2_MPEG_VIDEO_H264_SEI_FP_ARRANGEMENT_TYPE_TEMPORAL = 5,
};


enum v4l2_mpeg_video_h264_fmo_map_type {
 V4L2_MPEG_VIDEO_H264_FMO_MAP_TYPE_INTERLEAVED_SLICES = 0,
 V4L2_MPEG_VIDEO_H264_FMO_MAP_TYPE_SCATTERED_SLICES = 1,
 V4L2_MPEG_VIDEO_H264_FMO_MAP_TYPE_FOREGROUND_WITH_LEFT_OVER = 2,
 V4L2_MPEG_VIDEO_H264_FMO_MAP_TYPE_BOX_OUT = 3,
 V4L2_MPEG_VIDEO_H264_FMO_MAP_TYPE_RASTER_SCAN = 4,
 V4L2_MPEG_VIDEO_H264_FMO_MAP_TYPE_WIPE_SCAN = 5,
 V4L2_MPEG_VIDEO_H264_FMO_MAP_TYPE_EXPLICIT = 6,
};


enum v4l2_mpeg_video_h264_fmo_change_dir {
 V4L2_MPEG_VIDEO_H264_FMO_CHANGE_DIR_RIGHT = 0,
 V4L2_MPEG_VIDEO_H264_FMO_CHANGE_DIR_LEFT = 1,
};






enum v4l2_mpeg_video_h264_hierarchical_coding_type {
 V4L2_MPEG_VIDEO_H264_HIERARCHICAL_CODING_B = 0,
 V4L2_MPEG_VIDEO_H264_HIERARCHICAL_CODING_P = 1,
};
# 615 "/usr/include/linux/v4l2-controls.h" 3 4
enum v4l2_mpeg_video_mpeg4_level {
 V4L2_MPEG_VIDEO_MPEG4_LEVEL_0 = 0,
 V4L2_MPEG_VIDEO_MPEG4_LEVEL_0B = 1,
 V4L2_MPEG_VIDEO_MPEG4_LEVEL_1 = 2,
 V4L2_MPEG_VIDEO_MPEG4_LEVEL_2 = 3,
 V4L2_MPEG_VIDEO_MPEG4_LEVEL_3 = 4,
 V4L2_MPEG_VIDEO_MPEG4_LEVEL_3B = 5,
 V4L2_MPEG_VIDEO_MPEG4_LEVEL_4 = 6,
 V4L2_MPEG_VIDEO_MPEG4_LEVEL_5 = 7,
};

enum v4l2_mpeg_video_mpeg4_profile {
 V4L2_MPEG_VIDEO_MPEG4_PROFILE_SIMPLE = 0,
 V4L2_MPEG_VIDEO_MPEG4_PROFILE_ADVANCED_SIMPLE = 1,
 V4L2_MPEG_VIDEO_MPEG4_PROFILE_CORE = 2,
 V4L2_MPEG_VIDEO_MPEG4_PROFILE_SIMPLE_SCALABLE = 3,
 V4L2_MPEG_VIDEO_MPEG4_PROFILE_ADVANCED_CODING_EFFICIENCY = 4,
};







enum v4l2_vp8_num_partitions {
 V4L2_CID_MPEG_VIDEO_VPX_1_PARTITION = 0,
 V4L2_CID_MPEG_VIDEO_VPX_2_PARTITIONS = 1,
 V4L2_CID_MPEG_VIDEO_VPX_4_PARTITIONS = 2,
 V4L2_CID_MPEG_VIDEO_VPX_8_PARTITIONS = 3,
};


enum v4l2_vp8_num_ref_frames {
 V4L2_CID_MPEG_VIDEO_VPX_1_REF_FRAME = 0,
 V4L2_CID_MPEG_VIDEO_VPX_2_REF_FRAME = 1,
 V4L2_CID_MPEG_VIDEO_VPX_3_REF_FRAME = 2,
};




enum v4l2_vp8_golden_frame_sel {
 V4L2_CID_MPEG_VIDEO_VPX_GOLDEN_FRAME_USE_PREV = 0,
 V4L2_CID_MPEG_VIDEO_VPX_GOLDEN_FRAME_USE_REF_PERIOD = 1,
};






enum v4l2_mpeg_video_vp8_profile {
 V4L2_MPEG_VIDEO_VP8_PROFILE_0 = 0,
 V4L2_MPEG_VIDEO_VP8_PROFILE_1 = 1,
 V4L2_MPEG_VIDEO_VP8_PROFILE_2 = 2,
 V4L2_MPEG_VIDEO_VP8_PROFILE_3 = 3,
};



enum v4l2_mpeg_video_vp9_profile {
 V4L2_MPEG_VIDEO_VP9_PROFILE_0 = 0,
 V4L2_MPEG_VIDEO_VP9_PROFILE_1 = 1,
 V4L2_MPEG_VIDEO_VP9_PROFILE_2 = 2,
 V4L2_MPEG_VIDEO_VP9_PROFILE_3 = 3,
};

enum v4l2_mpeg_video_vp9_level {
 V4L2_MPEG_VIDEO_VP9_LEVEL_1_0 = 0,
 V4L2_MPEG_VIDEO_VP9_LEVEL_1_1 = 1,
 V4L2_MPEG_VIDEO_VP9_LEVEL_2_0 = 2,
 V4L2_MPEG_VIDEO_VP9_LEVEL_2_1 = 3,
 V4L2_MPEG_VIDEO_VP9_LEVEL_3_0 = 4,
 V4L2_MPEG_VIDEO_VP9_LEVEL_3_1 = 5,
 V4L2_MPEG_VIDEO_VP9_LEVEL_4_0 = 6,
 V4L2_MPEG_VIDEO_VP9_LEVEL_4_1 = 7,
 V4L2_MPEG_VIDEO_VP9_LEVEL_5_0 = 8,
 V4L2_MPEG_VIDEO_VP9_LEVEL_5_1 = 9,
 V4L2_MPEG_VIDEO_VP9_LEVEL_5_2 = 10,
 V4L2_MPEG_VIDEO_VP9_LEVEL_6_0 = 11,
 V4L2_MPEG_VIDEO_VP9_LEVEL_6_1 = 12,
 V4L2_MPEG_VIDEO_VP9_LEVEL_6_2 = 13,
};
# 709 "/usr/include/linux/v4l2-controls.h" 3 4
enum v4l2_mpeg_video_hevc_hier_coding_type {
 V4L2_MPEG_VIDEO_HEVC_HIERARCHICAL_CODING_B = 0,
 V4L2_MPEG_VIDEO_HEVC_HIERARCHICAL_CODING_P = 1,
};
# 722 "/usr/include/linux/v4l2-controls.h" 3 4
enum v4l2_mpeg_video_hevc_profile {
 V4L2_MPEG_VIDEO_HEVC_PROFILE_MAIN = 0,
 V4L2_MPEG_VIDEO_HEVC_PROFILE_MAIN_STILL_PICTURE = 1,
 V4L2_MPEG_VIDEO_HEVC_PROFILE_MAIN_10 = 2,
};

enum v4l2_mpeg_video_hevc_level {
 V4L2_MPEG_VIDEO_HEVC_LEVEL_1 = 0,
 V4L2_MPEG_VIDEO_HEVC_LEVEL_2 = 1,
 V4L2_MPEG_VIDEO_HEVC_LEVEL_2_1 = 2,
 V4L2_MPEG_VIDEO_HEVC_LEVEL_3 = 3,
 V4L2_MPEG_VIDEO_HEVC_LEVEL_3_1 = 4,
 V4L2_MPEG_VIDEO_HEVC_LEVEL_4 = 5,
 V4L2_MPEG_VIDEO_HEVC_LEVEL_4_1 = 6,
 V4L2_MPEG_VIDEO_HEVC_LEVEL_5 = 7,
 V4L2_MPEG_VIDEO_HEVC_LEVEL_5_1 = 8,
 V4L2_MPEG_VIDEO_HEVC_LEVEL_5_2 = 9,
 V4L2_MPEG_VIDEO_HEVC_LEVEL_6 = 10,
 V4L2_MPEG_VIDEO_HEVC_LEVEL_6_1 = 11,
 V4L2_MPEG_VIDEO_HEVC_LEVEL_6_2 = 12,
};


enum v4l2_mpeg_video_hevc_tier {
 V4L2_MPEG_VIDEO_HEVC_TIER_MAIN = 0,
 V4L2_MPEG_VIDEO_HEVC_TIER_HIGH = 1,
};


enum v4l2_cid_mpeg_video_hevc_loop_filter_mode {
 V4L2_MPEG_VIDEO_HEVC_LOOP_FILTER_MODE_DISABLED = 0,
 V4L2_MPEG_VIDEO_HEVC_LOOP_FILTER_MODE_ENABLED = 1,
 V4L2_MPEG_VIDEO_HEVC_LOOP_FILTER_MODE_DISABLED_AT_SLICE_BOUNDARY = 2,
};



enum v4l2_cid_mpeg_video_hevc_refresh_type {
 V4L2_MPEG_VIDEO_HEVC_REFRESH_NONE = 0,
 V4L2_MPEG_VIDEO_HEVC_REFRESH_CRA = 1,
 V4L2_MPEG_VIDEO_HEVC_REFRESH_IDR = 2,
};
# 776 "/usr/include/linux/v4l2-controls.h" 3 4
enum v4l2_cid_mpeg_video_hevc_size_of_length_field {
 V4L2_MPEG_VIDEO_HEVC_SIZE_0 = 0,
 V4L2_MPEG_VIDEO_HEVC_SIZE_1 = 1,
 V4L2_MPEG_VIDEO_HEVC_SIZE_2 = 2,
 V4L2_MPEG_VIDEO_HEVC_SIZE_4 = 3,
};
# 793 "/usr/include/linux/v4l2-controls.h" 3 4
enum v4l2_mpeg_video_frame_skip_mode {
 V4L2_MPEG_VIDEO_FRAME_SKIP_MODE_DISABLED = 0,
 V4L2_MPEG_VIDEO_FRAME_SKIP_MODE_LEVEL_LIMIT = 1,
 V4L2_MPEG_VIDEO_FRAME_SKIP_MODE_BUF_LIMIT = 2,
};
# 812 "/usr/include/linux/v4l2-controls.h" 3 4
enum v4l2_mpeg_cx2341x_video_spatial_filter_mode {
 V4L2_MPEG_CX2341X_VIDEO_SPATIAL_FILTER_MODE_MANUAL = 0,
 V4L2_MPEG_CX2341X_VIDEO_SPATIAL_FILTER_MODE_AUTO = 1,
};


enum v4l2_mpeg_cx2341x_video_luma_spatial_filter_type {
 V4L2_MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE_OFF = 0,
 V4L2_MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE_1D_HOR = 1,
 V4L2_MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE_1D_VERT = 2,
 V4L2_MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE_2D_HV_SEPARABLE = 3,
 V4L2_MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE_2D_SYM_NON_SEPARABLE = 4,
};

enum v4l2_mpeg_cx2341x_video_chroma_spatial_filter_type {
 V4L2_MPEG_CX2341X_VIDEO_CHROMA_SPATIAL_FILTER_TYPE_OFF = 0,
 V4L2_MPEG_CX2341X_VIDEO_CHROMA_SPATIAL_FILTER_TYPE_1D_HOR = 1,
};

enum v4l2_mpeg_cx2341x_video_temporal_filter_mode {
 V4L2_MPEG_CX2341X_VIDEO_TEMPORAL_FILTER_MODE_MANUAL = 0,
 V4L2_MPEG_CX2341X_VIDEO_TEMPORAL_FILTER_MODE_AUTO = 1,
};


enum v4l2_mpeg_cx2341x_video_median_filter_type {
 V4L2_MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE_OFF = 0,
 V4L2_MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE_HOR = 1,
 V4L2_MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE_VERT = 2,
 V4L2_MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE_HOR_VERT = 3,
 V4L2_MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE_DIAG = 4,
};
# 856 "/usr/include/linux/v4l2-controls.h" 3 4
enum v4l2_mpeg_mfc51_video_frame_skip_mode {
 V4L2_MPEG_MFC51_VIDEO_FRAME_SKIP_MODE_DISABLED = 0,
 V4L2_MPEG_MFC51_VIDEO_FRAME_SKIP_MODE_LEVEL_LIMIT = 1,
 V4L2_MPEG_MFC51_VIDEO_FRAME_SKIP_MODE_BUF_LIMIT = 2,
};

enum v4l2_mpeg_mfc51_video_force_frame_type {
 V4L2_MPEG_MFC51_VIDEO_FORCE_FRAME_TYPE_DISABLED = 0,
 V4L2_MPEG_MFC51_VIDEO_FORCE_FRAME_TYPE_I_FRAME = 1,
 V4L2_MPEG_MFC51_VIDEO_FORCE_FRAME_TYPE_NOT_CODED = 2,
};
# 883 "/usr/include/linux/v4l2-controls.h" 3 4
enum v4l2_exposure_auto_type {
 V4L2_EXPOSURE_AUTO = 0,
 V4L2_EXPOSURE_MANUAL = 1,
 V4L2_EXPOSURE_SHUTTER_PRIORITY = 2,
 V4L2_EXPOSURE_APERTURE_PRIORITY = 3
};
# 916 "/usr/include/linux/v4l2-controls.h" 3 4
enum v4l2_auto_n_preset_white_balance {
 V4L2_WHITE_BALANCE_MANUAL = 0,
 V4L2_WHITE_BALANCE_AUTO = 1,
 V4L2_WHITE_BALANCE_INCANDESCENT = 2,
 V4L2_WHITE_BALANCE_FLUORESCENT = 3,
 V4L2_WHITE_BALANCE_FLUORESCENT_H = 4,
 V4L2_WHITE_BALANCE_HORIZON = 5,
 V4L2_WHITE_BALANCE_DAYLIGHT = 6,
 V4L2_WHITE_BALANCE_FLASH = 7,
 V4L2_WHITE_BALANCE_CLOUDY = 8,
 V4L2_WHITE_BALANCE_SHADE = 9,
};






enum v4l2_iso_sensitivity_auto_type {
 V4L2_ISO_SENSITIVITY_MANUAL = 0,
 V4L2_ISO_SENSITIVITY_AUTO = 1,
};


enum v4l2_exposure_metering {
 V4L2_EXPOSURE_METERING_AVERAGE = 0,
 V4L2_EXPOSURE_METERING_CENTER_WEIGHTED = 1,
 V4L2_EXPOSURE_METERING_SPOT = 2,
 V4L2_EXPOSURE_METERING_MATRIX = 3,
};


enum v4l2_scene_mode {
 V4L2_SCENE_MODE_NONE = 0,
 V4L2_SCENE_MODE_BACKLIGHT = 1,
 V4L2_SCENE_MODE_BEACH_SNOW = 2,
 V4L2_SCENE_MODE_CANDLE_LIGHT = 3,
 V4L2_SCENE_MODE_DAWN_DUSK = 4,
 V4L2_SCENE_MODE_FALL_COLORS = 5,
 V4L2_SCENE_MODE_FIREWORKS = 6,
 V4L2_SCENE_MODE_LANDSCAPE = 7,
 V4L2_SCENE_MODE_NIGHT = 8,
 V4L2_SCENE_MODE_PARTY_INDOOR = 9,
 V4L2_SCENE_MODE_PORTRAIT = 10,
 V4L2_SCENE_MODE_SPORTS = 11,
 V4L2_SCENE_MODE_SUNSET = 12,
 V4L2_SCENE_MODE_TEXT = 13,
};
# 979 "/usr/include/linux/v4l2-controls.h" 3 4
enum v4l2_auto_focus_range {
 V4L2_AUTO_FOCUS_RANGE_AUTO = 0,
 V4L2_AUTO_FOCUS_RANGE_NORMAL = 1,
 V4L2_AUTO_FOCUS_RANGE_MACRO = 2,
 V4L2_AUTO_FOCUS_RANGE_INFINITY = 3,
};
# 1031 "/usr/include/linux/v4l2-controls.h" 3 4
enum v4l2_preemphasis {
 V4L2_PREEMPHASIS_DISABLED = 0,
 V4L2_PREEMPHASIS_50_uS = 1,
 V4L2_PREEMPHASIS_75_uS = 2,
};
# 1046 "/usr/include/linux/v4l2-controls.h" 3 4
enum v4l2_flash_led_mode {
 V4L2_FLASH_LED_MODE_NONE,
 V4L2_FLASH_LED_MODE_FLASH,
 V4L2_FLASH_LED_MODE_TORCH,
};


enum v4l2_flash_strobe_source {
 V4L2_FLASH_STROBE_SOURCE_SOFTWARE,
 V4L2_FLASH_STROBE_SOURCE_EXTERNAL,
};
# 1088 "/usr/include/linux/v4l2-controls.h" 3 4
enum v4l2_jpeg_chroma_subsampling {
 V4L2_JPEG_CHROMA_SUBSAMPLING_444 = 0,
 V4L2_JPEG_CHROMA_SUBSAMPLING_422 = 1,
 V4L2_JPEG_CHROMA_SUBSAMPLING_420 = 2,
 V4L2_JPEG_CHROMA_SUBSAMPLING_411 = 3,
 V4L2_JPEG_CHROMA_SUBSAMPLING_410 = 4,
 V4L2_JPEG_CHROMA_SUBSAMPLING_GRAY = 5,
};
# 1140 "/usr/include/linux/v4l2-controls.h" 3 4
enum v4l2_dv_tx_mode {
 V4L2_DV_TX_MODE_DVI_D = 0,
 V4L2_DV_TX_MODE_HDMI = 1,
};

enum v4l2_dv_rgb_range {
 V4L2_DV_RGB_RANGE_AUTO = 0,
 V4L2_DV_RGB_RANGE_LIMITED = 1,
 V4L2_DV_RGB_RANGE_FULL = 2,
};


enum v4l2_dv_it_content_type {
 V4L2_DV_IT_CONTENT_TYPE_GRAPHICS = 0,
 V4L2_DV_IT_CONTENT_TYPE_PHOTO = 1,
 V4L2_DV_IT_CONTENT_TYPE_CINEMA = 2,
 V4L2_DV_IT_CONTENT_TYPE_GAME = 3,
 V4L2_DV_IT_CONTENT_TYPE_NO_ITC = 4,
};
# 1168 "/usr/include/linux/v4l2-controls.h" 3 4
enum v4l2_deemphasis {
 V4L2_DEEMPHASIS_DISABLED = V4L2_PREEMPHASIS_DISABLED,
 V4L2_DEEMPHASIS_50_uS = V4L2_PREEMPHASIS_50_uS,
 V4L2_DEEMPHASIS_75_uS = V4L2_PREEMPHASIS_75_uS,
};
# 1202 "/usr/include/linux/v4l2-controls.h" 3 4
enum v4l2_detect_md_mode {
 V4L2_DETECT_MD_MODE_DISABLED = 0,
 V4L2_DETECT_MD_MODE_GLOBAL = 1,
 V4L2_DETECT_MD_MODE_THRESHOLD_GRID = 2,
 V4L2_DETECT_MD_MODE_REGION_GRID = 3,
};
# 1234 "/usr/include/linux/v4l2-controls.h" 3 4
enum v4l2_stateless_h264_decode_mode {
 V4L2_STATELESS_H264_DECODE_MODE_SLICE_BASED,
 V4L2_STATELESS_H264_DECODE_MODE_FRAME_BASED,
};
# 1251 "/usr/include/linux/v4l2-controls.h" 3 4
enum v4l2_stateless_h264_start_code {
 V4L2_STATELESS_H264_START_CODE_NONE,
 V4L2_STATELESS_H264_START_CODE_ANNEX_B,
};
# 1306 "/usr/include/linux/v4l2-controls.h" 3 4
struct v4l2_ctrl_h264_sps {
 __u8 profile_idc;
 __u8 constraint_set_flags;
 __u8 level_idc;
 __u8 seq_parameter_set_id;
 __u8 chroma_format_idc;
 __u8 bit_depth_luma_minus8;
 __u8 bit_depth_chroma_minus8;
 __u8 log2_max_frame_num_minus4;
 __u8 pic_order_cnt_type;
 __u8 log2_max_pic_order_cnt_lsb_minus4;
 __u8 max_num_ref_frames;
 __u8 num_ref_frames_in_pic_order_cnt_cycle;
 __s32 offset_for_ref_frame[255];
 __s32 offset_for_non_ref_pic;
 __s32 offset_for_top_to_bottom_field;
 __u16 pic_width_in_mbs_minus1;
 __u16 pic_height_in_map_units_minus1;
 __u32 flags;
};
# 1362 "/usr/include/linux/v4l2-controls.h" 3 4
struct v4l2_ctrl_h264_pps {
 __u8 pic_parameter_set_id;
 __u8 seq_parameter_set_id;
 __u8 num_slice_groups_minus1;
 __u8 num_ref_idx_l0_default_active_minus1;
 __u8 num_ref_idx_l1_default_active_minus1;
 __u8 weighted_bipred_idc;
 __s8 pic_init_qp_minus26;
 __s8 pic_init_qs_minus26;
 __s8 chroma_qp_index_offset;
 __s8 second_chroma_qp_index_offset;
 __u16 flags;
};
# 1394 "/usr/include/linux/v4l2-controls.h" 3 4
struct v4l2_ctrl_h264_scaling_matrix {
 __u8 scaling_list_4x4[6][16];
 __u8 scaling_list_8x8[6][64];
};

struct v4l2_h264_weight_factors {
 __s16 luma_weight[32];
 __s16 luma_offset[32];
 __s16 chroma_weight[32][2];
 __s16 chroma_offset[32][2];
};
# 1424 "/usr/include/linux/v4l2-controls.h" 3 4
struct v4l2_ctrl_h264_pred_weights {
 __u16 luma_log2_weight_denom;
 __u16 chroma_log2_weight_denom;
 struct v4l2_h264_weight_factors weight_factors[2];
};
# 1450 "/usr/include/linux/v4l2-controls.h" 3 4
struct v4l2_h264_reference {
 __u8 fields;
 __u8 index;
};
# 1497 "/usr/include/linux/v4l2-controls.h" 3 4
struct v4l2_ctrl_h264_slice_params {
 __u32 header_bit_size;
 __u32 first_mb_in_slice;
 __u8 slice_type;
 __u8 colour_plane_id;
 __u8 redundant_pic_cnt;
 __u8 cabac_init_idc;
 __s8 slice_qp_delta;
 __s8 slice_qs_delta;
 __u8 disable_deblocking_filter_idc;
 __s8 slice_alpha_c0_offset_div2;
 __s8 slice_beta_offset_div2;
 __u8 num_ref_idx_l0_active_minus1;
 __u8 num_ref_idx_l1_active_minus1;

 __u8 reserved;

 struct v4l2_h264_reference ref_pic_list0[(2 * 16)];
 struct v4l2_h264_reference ref_pic_list1[(2 * 16)];

 __u32 flags;
};
# 1542 "/usr/include/linux/v4l2-controls.h" 3 4
struct v4l2_h264_dpb_entry {
 __u64 reference_ts;
 __u32 pic_num;
 __u16 frame_num;
 __u8 fields;
 __u8 reserved[5];
 __s32 top_field_order_cnt;
 __s32 bottom_field_order_cnt;
 __u32 flags;
};
# 1579 "/usr/include/linux/v4l2-controls.h" 3 4
struct v4l2_ctrl_h264_decode_params {
 struct v4l2_h264_dpb_entry dpb[16];
 __u16 nal_ref_idc;
 __u16 frame_num;
 __s32 top_field_order_cnt;
 __s32 bottom_field_order_cnt;
 __u16 idr_pic_id;
 __u16 pic_order_cnt_lsb;
 __s32 delta_pic_order_cnt_bottom;
 __s32 delta_pic_order_cnt0;
 __s32 delta_pic_order_cnt1;
 __u32 dec_ref_pic_marking_bit_size;
 __u32 pic_order_cnt_bit_size;
 __u32 slice_group_change_cycle;

 __u32 reserved;
 __u32 flags;
};
# 1657 "/usr/include/linux/v4l2-controls.h" 3 4
struct v4l2_ctrl_fwht_params {
 __u64 backward_ref_ts;
 __u32 version;
 __u32 width;
 __u32 height;
 __u32 flags;
 __u32 colorspace;
 __u32 xfer_func;
 __u32 ycbcr_enc;
 __u32 quantization;
};
# 1690 "/usr/include/linux/v4l2-controls.h" 3 4
struct v4l2_vp8_segment {
 __s8 quant_update[4];
 __s8 lf_update[4];
 __u8 segment_probs[3];
 __u8 padding;
 __u32 flags;
};
# 1717 "/usr/include/linux/v4l2-controls.h" 3 4
struct v4l2_vp8_loop_filter {
 __s8 ref_frm_delta[4];
 __s8 mb_mode_delta[4];
 __u8 sharpness_level;
 __u8 level;
 __u16 padding;
 __u32 flags;
};
# 1742 "/usr/include/linux/v4l2-controls.h" 3 4
struct v4l2_vp8_quantization {
 __u8 y_ac_qi;
 __s8 y_dc_delta;
 __s8 y2_dc_delta;
 __s8 y2_ac_delta;
 __s8 uv_dc_delta;
 __s8 uv_ac_delta;
 __u16 padding;
};
# 1769 "/usr/include/linux/v4l2-controls.h" 3 4
struct v4l2_vp8_entropy {
 __u8 coeff_probs[4][8][3][11];
 __u8 y_mode_probs[4];
 __u8 uv_mode_probs[3];
 __u8 mv_probs[2][19];
 __u8 padding[3];
};
# 1788 "/usr/include/linux/v4l2-controls.h" 3 4
struct v4l2_vp8_entropy_coder_state {
 __u8 range;
 __u8 value;
 __u8 bit_count;
 __u8 padding;
};
# 1834 "/usr/include/linux/v4l2-controls.h" 3 4
struct v4l2_ctrl_vp8_frame {
 struct v4l2_vp8_segment segment;
 struct v4l2_vp8_loop_filter lf;
 struct v4l2_vp8_quantization quant;
 struct v4l2_vp8_entropy entropy;
 struct v4l2_vp8_entropy_coder_state coder_state;

 __u16 width;
 __u16 height;

 __u8 horizontal_scale;
 __u8 vertical_scale;

 __u8 version;
 __u8 prob_skip_false;
 __u8 prob_intra;
 __u8 prob_last;
 __u8 prob_gf;
 __u8 num_dct_parts;

 __u32 first_part_size;
 __u32 first_part_header_bits;
 __u32 dct_part_sizes[8];

 __u64 last_frame_ts;
 __u64 golden_frame_ts;
 __u64 alt_frame_ts;

 __u64 flags;
};
# 1890 "/usr/include/linux/v4l2-controls.h" 3 4
struct v4l2_ctrl_mpeg2_sequence {
 __u16 horizontal_size;
 __u16 vertical_size;
 __u32 vbv_buffer_size;
 __u16 profile_and_level_indication;
 __u8 chroma_format;
 __u8 flags;
};
# 1937 "/usr/include/linux/v4l2-controls.h" 3 4
struct v4l2_ctrl_mpeg2_picture {
 __u64 backward_ref_ts;
 __u64 forward_ref_ts;
 __u32 flags;
 __u8 f_code[2][2];
 __u8 picture_coding_type;
 __u8 picture_structure;
 __u8 intra_dc_precision;
 __u8 reserved[5];
};
# 1970 "/usr/include/linux/v4l2-controls.h" 3 4
struct v4l2_ctrl_mpeg2_quantisation {
 __u8 intra_quantiser_matrix[64];
 __u8 non_intra_quantiser_matrix[64];
 __u8 chroma_intra_quantiser_matrix[64];
 __u8 chroma_non_intra_quantiser_matrix[64];
};






struct v4l2_ctrl_hdr10_cll_info {
 __u16 max_content_light_level;
 __u16 max_pic_average_light_level;
};
# 2002 "/usr/include/linux/v4l2-controls.h" 3 4
struct v4l2_ctrl_hdr10_mastering_display {
 __u16 display_primaries_x[3];
 __u16 display_primaries_y[3];
 __u16 white_point_x;
 __u16 white_point_y;
 __u32 max_display_mastering_luminance;
 __u32 min_display_mastering_luminance;
};
# 66 "/usr/include/linux/videodev2.h" 2 3 4
# 86 "/usr/include/linux/videodev2.h" 3 4
enum v4l2_field {
 V4L2_FIELD_ANY = 0,



 V4L2_FIELD_NONE = 1,
 V4L2_FIELD_TOP = 2,
 V4L2_FIELD_BOTTOM = 3,
 V4L2_FIELD_INTERLACED = 4,
 V4L2_FIELD_SEQ_TB = 5,

 V4L2_FIELD_SEQ_BT = 6,
 V4L2_FIELD_ALTERNATE = 7,

 V4L2_FIELD_INTERLACED_TB = 8,


 V4L2_FIELD_INTERLACED_BT = 9,


};
# 139 "/usr/include/linux/videodev2.h" 3 4
enum v4l2_buf_type {
 V4L2_BUF_TYPE_VIDEO_CAPTURE = 1,
 V4L2_BUF_TYPE_VIDEO_OUTPUT = 2,
 V4L2_BUF_TYPE_VIDEO_OVERLAY = 3,
 V4L2_BUF_TYPE_VBI_CAPTURE = 4,
 V4L2_BUF_TYPE_VBI_OUTPUT = 5,
 V4L2_BUF_TYPE_SLICED_VBI_CAPTURE = 6,
 V4L2_BUF_TYPE_SLICED_VBI_OUTPUT = 7,
 V4L2_BUF_TYPE_VIDEO_OUTPUT_OVERLAY = 8,
 V4L2_BUF_TYPE_VIDEO_CAPTURE_MPLANE = 9,
 V4L2_BUF_TYPE_VIDEO_OUTPUT_MPLANE = 10,
 V4L2_BUF_TYPE_SDR_CAPTURE = 11,
 V4L2_BUF_TYPE_SDR_OUTPUT = 12,
 V4L2_BUF_TYPE_META_CAPTURE = 13,
 V4L2_BUF_TYPE_META_OUTPUT = 14,

 V4L2_BUF_TYPE_PRIVATE = 0x80,
};
# 174 "/usr/include/linux/videodev2.h" 3 4
enum v4l2_tuner_type {
 V4L2_TUNER_RADIO = 1,
 V4L2_TUNER_ANALOG_TV = 2,
 V4L2_TUNER_DIGITAL_TV = 3,
 V4L2_TUNER_SDR = 4,
 V4L2_TUNER_RF = 5,
};




enum v4l2_memory {
 V4L2_MEMORY_MMAP = 1,
 V4L2_MEMORY_USERPTR = 2,
 V4L2_MEMORY_OVERLAY = 3,
 V4L2_MEMORY_DMABUF = 4,
};


enum v4l2_colorspace {




 V4L2_COLORSPACE_DEFAULT = 0,


 V4L2_COLORSPACE_SMPTE170M = 1,


 V4L2_COLORSPACE_SMPTE240M = 2,


 V4L2_COLORSPACE_REC709 = 3,





 V4L2_COLORSPACE_BT878 = 4,





 V4L2_COLORSPACE_470_SYSTEM_M = 5,




 V4L2_COLORSPACE_470_SYSTEM_BG = 6,





 V4L2_COLORSPACE_JPEG = 7,


 V4L2_COLORSPACE_SRGB = 8,


 V4L2_COLORSPACE_OPRGB = 9,


 V4L2_COLORSPACE_BT2020 = 10,


 V4L2_COLORSPACE_RAW = 11,


 V4L2_COLORSPACE_DCI_P3 = 12,
};
# 257 "/usr/include/linux/videodev2.h" 3 4
enum v4l2_xfer_func {
# 276 "/usr/include/linux/videodev2.h" 3 4
 V4L2_XFER_FUNC_DEFAULT = 0,
 V4L2_XFER_FUNC_709 = 1,
 V4L2_XFER_FUNC_SRGB = 2,
 V4L2_XFER_FUNC_OPRGB = 3,
 V4L2_XFER_FUNC_SMPTE240M = 4,
 V4L2_XFER_FUNC_NONE = 5,
 V4L2_XFER_FUNC_DCI_P3 = 6,
 V4L2_XFER_FUNC_SMPTE2084 = 7,
};
# 298 "/usr/include/linux/videodev2.h" 3 4
enum v4l2_ycbcr_encoding {
# 313 "/usr/include/linux/videodev2.h" 3 4
 V4L2_YCBCR_ENC_DEFAULT = 0,


 V4L2_YCBCR_ENC_601 = 1,


 V4L2_YCBCR_ENC_709 = 2,


 V4L2_YCBCR_ENC_XV601 = 3,


 V4L2_YCBCR_ENC_XV709 = 4,






 V4L2_YCBCR_ENC_SYCC = 5,


 V4L2_YCBCR_ENC_BT2020 = 6,


 V4L2_YCBCR_ENC_BT2020_CONST_LUM = 7,


 V4L2_YCBCR_ENC_SMPTE240M = 8,
};





enum v4l2_hsv_encoding {


 V4L2_HSV_ENC_180 = 128,


 V4L2_HSV_ENC_256 = 129,
};
# 368 "/usr/include/linux/videodev2.h" 3 4
enum v4l2_quantization {





 V4L2_QUANTIZATION_DEFAULT = 0,
 V4L2_QUANTIZATION_FULL_RANGE = 1,
 V4L2_QUANTIZATION_LIM_RANGE = 2,
};
# 398 "/usr/include/linux/videodev2.h" 3 4
enum v4l2_priority {
 V4L2_PRIORITY_UNSET = 0,
 V4L2_PRIORITY_BACKGROUND = 1,
 V4L2_PRIORITY_INTERACTIVE = 2,
 V4L2_PRIORITY_RECORD = 3,
 V4L2_PRIORITY_DEFAULT = V4L2_PRIORITY_INTERACTIVE,
};

struct v4l2_rect {
 __s32 left;
 __s32 top;
 __u32 width;
 __u32 height;
};

struct v4l2_fract {
 __u32 numerator;
 __u32 denominator;
};

struct v4l2_area {
 __u32 width;
 __u32 height;
};
# 434 "/usr/include/linux/videodev2.h" 3 4
struct v4l2_capability {
 __u8 driver[16];
 __u8 card[32];
 __u8 bus_info[32];
 __u32 version;
 __u32 capabilities;
 __u32 device_caps;
 __u32 reserved[3];
};
# 490 "/usr/include/linux/videodev2.h" 3 4
struct v4l2_pix_format {
 __u32 width;
 __u32 height;
 __u32 pixelformat;
 __u32 field;
 __u32 bytesperline;
 __u32 sizeimage;
 __u32 colorspace;
 __u32 priv;
 __u32 flags;
 union {

  __u32 ycbcr_enc;

  __u32 hsv_enc;
 };
 __u32 quantization;
 __u32 xfer_func;
};
# 778 "/usr/include/linux/videodev2.h" 3 4
struct v4l2_fmtdesc {
 __u32 index;
 __u32 type;
 __u32 flags;
 __u8 description[32];
 __u32 pixelformat;
 __u32 mbus_code;
 __u32 reserved[3];
};
# 803 "/usr/include/linux/videodev2.h" 3 4
enum v4l2_frmsizetypes {
 V4L2_FRMSIZE_TYPE_DISCRETE = 1,
 V4L2_FRMSIZE_TYPE_CONTINUOUS = 2,
 V4L2_FRMSIZE_TYPE_STEPWISE = 3,
};

struct v4l2_frmsize_discrete {
 __u32 width;
 __u32 height;
};

struct v4l2_frmsize_stepwise {
 __u32 min_width;
 __u32 max_width;
 __u32 step_width;
 __u32 min_height;
 __u32 max_height;
 __u32 step_height;
};

struct v4l2_frmsizeenum {
 __u32 index;
 __u32 pixel_format;
 __u32 type;

 union {
  struct v4l2_frmsize_discrete discrete;
  struct v4l2_frmsize_stepwise stepwise;
 };

 __u32 reserved[2];
};




enum v4l2_frmivaltypes {
 V4L2_FRMIVAL_TYPE_DISCRETE = 1,
 V4L2_FRMIVAL_TYPE_CONTINUOUS = 2,
 V4L2_FRMIVAL_TYPE_STEPWISE = 3,
};

struct v4l2_frmival_stepwise {
 struct v4l2_fract min;
 struct v4l2_fract max;
 struct v4l2_fract step;
};

struct v4l2_frmivalenum {
 __u32 index;
 __u32 pixel_format;
 __u32 width;
 __u32 height;
 __u32 type;

 union {
  struct v4l2_fract discrete;
  struct v4l2_frmival_stepwise stepwise;
 };

 __u32 reserved[2];
};




struct v4l2_timecode {
 __u32 type;
 __u32 flags;
 __u8 frames;
 __u8 seconds;
 __u8 minutes;
 __u8 hours;
 __u8 userbits[4];
};
# 894 "/usr/include/linux/videodev2.h" 3 4
struct v4l2_jpegcompression {
 int quality;

 int APPn;

 int APP_len;
 char APP_data[60];

 int COM_len;
 char COM_data[60];

 __u32 jpeg_markers;
# 921 "/usr/include/linux/videodev2.h" 3 4
};






struct v4l2_requestbuffers {
 __u32 count;
 __u32 type;
 __u32 memory;
 __u32 capabilities;
 __u32 reserved[1];
};
# 967 "/usr/include/linux/videodev2.h" 3 4
struct v4l2_plane {
 __u32 bytesused;
 __u32 length;
 union {
  __u32 mem_offset;
  unsigned long userptr;
  __s32 fd;
 } m;
 __u32 data_offset;
 __u32 reserved[11];
};
# 1014 "/usr/include/linux/videodev2.h" 3 4
struct v4l2_buffer {
 __u32 index;
 __u32 type;
 __u32 bytesused;
 __u32 flags;
 __u32 field;
 struct timeval timestamp;
 struct v4l2_timecode timecode;
 __u32 sequence;


 __u32 memory;
 union {
  __u32 offset;
  unsigned long userptr;
  struct v4l2_plane *planes;
  __s32 fd;
 } m;
 __u32 length;
 __u32 reserved2;
 union {
  __s32 request_fd;
  __u32 reserved;
 };
};
# 1047 "/usr/include/linux/videodev2.h" 3 4
static __inline__ __u64 v4l2_timeval_to_ns(const struct timeval *tv)
{
 return (__u64)tv->tv_sec * 1000000000ULL + tv->tv_usec * 1000;
}
# 1111 "/usr/include/linux/videodev2.h" 3 4
struct v4l2_exportbuffer {
 __u32 type;
 __u32 index;
 __u32 plane;
 __u32 flags;
 __s32 fd;
 __u32 reserved[11];
};




struct v4l2_framebuffer {
 __u32 capability;
 __u32 flags;


 void *base;
 struct {
  __u32 width;
  __u32 height;
  __u32 pixelformat;
  __u32 field;
  __u32 bytesperline;
  __u32 sizeimage;
  __u32 colorspace;
  __u32 priv;
 } fmt;
};
# 1158 "/usr/include/linux/videodev2.h" 3 4
struct v4l2_clip {
 struct v4l2_rect c;
 struct v4l2_clip *next;
};

struct v4l2_window {
 struct v4l2_rect w;
 __u32 field;
 __u32 chromakey;
 struct v4l2_clip *clips;
 __u32 clipcount;
 void *bitmap;
 __u8 global_alpha;
};




struct v4l2_captureparm {
 __u32 capability;
 __u32 capturemode;
 struct v4l2_fract timeperframe;
 __u32 extendedmode;
 __u32 readbuffers;
 __u32 reserved[4];
};





struct v4l2_outputparm {
 __u32 capability;
 __u32 outputmode;
 struct v4l2_fract timeperframe;
 __u32 extendedmode;
 __u32 writebuffers;
 __u32 reserved[4];
};




struct v4l2_cropcap {
 __u32 type;
 struct v4l2_rect bounds;
 struct v4l2_rect defrect;
 struct v4l2_fract pixelaspect;
};

struct v4l2_crop {
 __u32 type;
 struct v4l2_rect c;
};
# 1226 "/usr/include/linux/videodev2.h" 3 4
struct v4l2_selection {
 __u32 type;
 __u32 target;
 __u32 flags;
 struct v4l2_rect r;
 __u32 reserved[9];
};






typedef __u64 v4l2_std_id;
# 1371 "/usr/include/linux/videodev2.h" 3 4
struct v4l2_standard {
 __u32 index;
 v4l2_std_id id;
 __u8 name[24];
 struct v4l2_fract frameperiod;
 __u32 framelines;
 __u32 reserved[4];
};
# 1419 "/usr/include/linux/videodev2.h" 3 4
struct v4l2_bt_timings {
 __u32 width;
 __u32 height;
 __u32 interlaced;
 __u32 polarities;
 __u64 pixelclock;
 __u32 hfrontporch;
 __u32 hsync;
 __u32 hbackporch;
 __u32 vfrontporch;
 __u32 vsync;
 __u32 vbackporch;
 __u32 il_vfrontporch;
 __u32 il_vsync;
 __u32 il_vbackporch;
 __u32 standards;
 __u32 flags;
 struct v4l2_fract picture_aspect;
 __u8 cea861_vic;
 __u8 hdmi_vic;
 __u8 reserved[46];
} __attribute__ ((packed));
# 1543 "/usr/include/linux/videodev2.h" 3 4
struct v4l2_dv_timings {
 __u32 type;
 union {
  struct v4l2_bt_timings bt;
  __u32 reserved[32];
 };
} __attribute__ ((packed));
# 1562 "/usr/include/linux/videodev2.h" 3 4
struct v4l2_enum_dv_timings {
 __u32 index;
 __u32 pad;
 __u32 reserved[2];
 struct v4l2_dv_timings timings;
};
# 1580 "/usr/include/linux/videodev2.h" 3 4
struct v4l2_bt_timings_cap {
 __u32 min_width;
 __u32 max_width;
 __u32 min_height;
 __u32 max_height;
 __u64 min_pixelclock;
 __u64 max_pixelclock;
 __u32 standards;
 __u32 capabilities;
 __u32 reserved[16];
} __attribute__ ((packed));
# 1607 "/usr/include/linux/videodev2.h" 3 4
struct v4l2_dv_timings_cap {
 __u32 type;
 __u32 pad;
 __u32 reserved[2];
 union {
  struct v4l2_bt_timings_cap bt;
  __u32 raw_data[32];
 };
};





struct v4l2_input {
 __u32 index;
 __u8 name[32];
 __u32 type;
 __u32 audioset;
 __u32 tuner;
 v4l2_std_id std;
 __u32 status;
 __u32 capabilities;
 __u32 reserved[3];
};
# 1673 "/usr/include/linux/videodev2.h" 3 4
struct v4l2_output {
 __u32 index;
 __u8 name[32];
 __u32 type;
 __u32 audioset;
 __u32 modulator;
 v4l2_std_id std;
 __u32 capabilities;
 __u32 reserved[3];
};
# 1697 "/usr/include/linux/videodev2.h" 3 4
struct v4l2_control {
 __u32 id;
 __s32 value;
};

struct v4l2_ext_control {
 __u32 id;
 __u32 size;
 __u32 reserved2[1];
 union {
  __s32 value;
  __s64 value64;
  char *string;
  __u8 *p_u8;
  __u16 *p_u16;
  __u32 *p_u32;
  struct v4l2_area *p_area;
  struct v4l2_ctrl_h264_sps *p_h264_sps;
  struct v4l2_ctrl_h264_pps *p_h264_pps;
  struct v4l2_ctrl_h264_scaling_matrix *p_h264_scaling_matrix;
  struct v4l2_ctrl_h264_pred_weights *p_h264_pred_weights;
  struct v4l2_ctrl_h264_slice_params *p_h264_slice_params;
  struct v4l2_ctrl_h264_decode_params *p_h264_decode_params;
  struct v4l2_ctrl_fwht_params *p_fwht_params;
  struct v4l2_ctrl_vp8_frame *p_vp8_frame;
  struct v4l2_ctrl_mpeg2_sequence *p_mpeg2_sequence;
  struct v4l2_ctrl_mpeg2_picture *p_mpeg2_picture;
  struct v4l2_ctrl_mpeg2_quantisation *p_mpeg2_quantisation;
  void *ptr;
 };
} __attribute__ ((packed));

struct v4l2_ext_controls {
 union {
  __u32 ctrl_class;
  __u32 which;
 };
 __u32 count;
 __u32 error_idx;
 __s32 request_fd;
 __u32 reserved[1];
 struct v4l2_ext_control *controls;
};
# 1750 "/usr/include/linux/videodev2.h" 3 4
enum v4l2_ctrl_type {
 V4L2_CTRL_TYPE_INTEGER = 1,
 V4L2_CTRL_TYPE_BOOLEAN = 2,
 V4L2_CTRL_TYPE_MENU = 3,
 V4L2_CTRL_TYPE_BUTTON = 4,
 V4L2_CTRL_TYPE_INTEGER64 = 5,
 V4L2_CTRL_TYPE_CTRL_CLASS = 6,
 V4L2_CTRL_TYPE_STRING = 7,
 V4L2_CTRL_TYPE_BITMASK = 8,
 V4L2_CTRL_TYPE_INTEGER_MENU = 9,


 V4L2_CTRL_COMPOUND_TYPES = 0x0100,
 V4L2_CTRL_TYPE_U8 = 0x0100,
 V4L2_CTRL_TYPE_U16 = 0x0101,
 V4L2_CTRL_TYPE_U32 = 0x0102,
 V4L2_CTRL_TYPE_AREA = 0x0106,

 V4L2_CTRL_TYPE_HDR10_CLL_INFO = 0x0110,
 V4L2_CTRL_TYPE_HDR10_MASTERING_DISPLAY = 0x0111,

 V4L2_CTRL_TYPE_H264_SPS = 0x0200,
 V4L2_CTRL_TYPE_H264_PPS = 0x0201,
 V4L2_CTRL_TYPE_H264_SCALING_MATRIX = 0x0202,
 V4L2_CTRL_TYPE_H264_SLICE_PARAMS = 0x0203,
 V4L2_CTRL_TYPE_H264_DECODE_PARAMS = 0x0204,
 V4L2_CTRL_TYPE_H264_PRED_WEIGHTS = 0x0205,

 V4L2_CTRL_TYPE_FWHT_PARAMS = 0x0220,

 V4L2_CTRL_TYPE_VP8_FRAME = 0x0240,

 V4L2_CTRL_TYPE_MPEG2_QUANTISATION = 0x0250,
 V4L2_CTRL_TYPE_MPEG2_SEQUENCE = 0x0251,
 V4L2_CTRL_TYPE_MPEG2_PICTURE = 0x0252,
};


struct v4l2_queryctrl {
 __u32 id;
 __u32 type;
 __u8 name[32];
 __s32 minimum;
 __s32 maximum;
 __s32 step;
 __s32 default_value;
 __u32 flags;
 __u32 reserved[2];
};


struct v4l2_query_ext_ctrl {
 __u32 id;
 __u32 type;
 char name[32];
 __s64 minimum;
 __s64 maximum;
 __u64 step;
 __s64 default_value;
 __u32 flags;
 __u32 elem_size;
 __u32 elems;
 __u32 nr_of_dims;
 __u32 dims[(4)];
 __u32 reserved[32];
};


struct v4l2_querymenu {
 __u32 id;
 __u32 index;
 union {
  __u8 name[32];
  __s64 value;
 };
 __u32 reserved;
} __attribute__ ((packed));
# 1854 "/usr/include/linux/videodev2.h" 3 4
struct v4l2_tuner {
 __u32 index;
 __u8 name[32];
 __u32 type;
 __u32 capability;
 __u32 rangelow;
 __u32 rangehigh;
 __u32 rxsubchans;
 __u32 audmode;
 __s32 signal;
 __s32 afc;
 __u32 reserved[4];
};

struct v4l2_modulator {
 __u32 index;
 __u8 name[32];
 __u32 capability;
 __u32 rangelow;
 __u32 rangehigh;
 __u32 txsubchans;
 __u32 type;
 __u32 reserved[3];
};
# 1911 "/usr/include/linux/videodev2.h" 3 4
struct v4l2_frequency {
 __u32 tuner;
 __u32 type;
 __u32 frequency;
 __u32 reserved[8];
};





struct v4l2_frequency_band {
 __u32 tuner;
 __u32 type;
 __u32 index;
 __u32 capability;
 __u32 rangelow;
 __u32 rangehigh;
 __u32 modulation;
 __u32 reserved[9];
};

struct v4l2_hw_freq_seek {
 __u32 tuner;
 __u32 type;
 __u32 seek_upward;
 __u32 wrap_around;
 __u32 spacing;
 __u32 rangelow;
 __u32 rangehigh;
 __u32 reserved[5];
};





struct v4l2_rds_data {
 __u8 lsb;
 __u8 msb;
 __u8 block;
} __attribute__ ((packed));
# 1968 "/usr/include/linux/videodev2.h" 3 4
struct v4l2_audio {
 __u32 index;
 __u8 name[32];
 __u32 capability;
 __u32 mode;
 __u32 reserved[2];
};
# 1983 "/usr/include/linux/videodev2.h" 3 4
struct v4l2_audioout {
 __u32 index;
 __u8 name[32];
 __u32 capability;
 __u32 mode;
 __u32 reserved[2];
};
# 2000 "/usr/include/linux/videodev2.h" 3 4
struct v4l2_enc_idx_entry {
 __u64 offset;
 __u64 pts;
 __u32 length;
 __u32 flags;
 __u32 reserved[2];
};


struct v4l2_enc_idx {
 __u32 entries;
 __u32 entries_cap;
 __u32 reserved[4];
 struct v4l2_enc_idx_entry entry[(64)];
};
# 2025 "/usr/include/linux/videodev2.h" 3 4
struct v4l2_encoder_cmd {
 __u32 cmd;
 __u32 flags;
 union {
  struct {
   __u32 data[8];
  } raw;
 };
};
# 2061 "/usr/include/linux/videodev2.h" 3 4
struct v4l2_decoder_cmd {
 __u32 cmd;
 __u32 flags;
 union {
  struct {
   __u64 pts;
  } stop;

  struct {





   __s32 speed;
   __u32 format;
  } start;

  struct {
   __u32 data[16];
  } raw;
 };
};
# 2094 "/usr/include/linux/videodev2.h" 3 4
struct v4l2_vbi_format {
 __u32 sampling_rate;
 __u32 offset;
 __u32 samples_per_line;
 __u32 sample_format;
 __s32 start[2];
 __u32 count[2];
 __u32 flags;
 __u32 reserved[2];
};
# 2122 "/usr/include/linux/videodev2.h" 3 4
struct v4l2_sliced_vbi_format {
 __u16 service_set;




 __u16 service_lines[2][24];
 __u32 io_size;
 __u32 reserved[2];
};
# 2146 "/usr/include/linux/videodev2.h" 3 4
struct v4l2_sliced_vbi_cap {
 __u16 service_set;




 __u16 service_lines[2][24];
 __u32 type;
 __u32 reserved[3];
};

struct v4l2_sliced_vbi_data {
 __u32 id;
 __u32 field;
 __u32 line;
 __u32 reserved;
 __u8 data[48];
};
# 2187 "/usr/include/linux/videodev2.h" 3 4
struct v4l2_mpeg_vbi_itv0_line {
 __u8 id;
 __u8 data[42];
} __attribute__ ((packed));

struct v4l2_mpeg_vbi_itv0 {
 __le32 linemask[2];
 struct v4l2_mpeg_vbi_itv0_line line[35];
} __attribute__ ((packed));

struct v4l2_mpeg_vbi_ITV0 {
 struct v4l2_mpeg_vbi_itv0_line line[36];
} __attribute__ ((packed));




struct v4l2_mpeg_vbi_fmt_ivtv {
 __u8 magic[4];
 union {
  struct v4l2_mpeg_vbi_itv0 itv0;
  struct v4l2_mpeg_vbi_ITV0 ITV0;
 };
} __attribute__ ((packed));
# 2224 "/usr/include/linux/videodev2.h" 3 4
struct v4l2_plane_pix_format {
 __u32 sizeimage;
 __u32 bytesperline;
 __u16 reserved[6];
} __attribute__ ((packed));
# 2246 "/usr/include/linux/videodev2.h" 3 4
struct v4l2_pix_format_mplane {
 __u32 width;
 __u32 height;
 __u32 pixelformat;
 __u32 field;
 __u32 colorspace;

 struct v4l2_plane_pix_format plane_fmt[8];
 __u8 num_planes;
 __u8 flags;
  union {
  __u8 ycbcr_enc;
  __u8 hsv_enc;
 };
 __u8 quantization;
 __u8 xfer_func;
 __u8 reserved[7];
} __attribute__ ((packed));







struct v4l2_sdr_format {
 __u32 pixelformat;
 __u32 buffersize;
 __u8 reserved[24];
} __attribute__ ((packed));






struct v4l2_meta_format {
 __u32 dataformat;
 __u32 buffersize;
} __attribute__ ((packed));
# 2299 "/usr/include/linux/videodev2.h" 3 4
struct v4l2_format {
 __u32 type;
 union {
  struct v4l2_pix_format pix;
  struct v4l2_pix_format_mplane pix_mp;
  struct v4l2_window win;
  struct v4l2_vbi_format vbi;
  struct v4l2_sliced_vbi_format sliced;
  struct v4l2_sdr_format sdr;
  struct v4l2_meta_format meta;
  __u8 raw_data[200];
 } fmt;
};



struct v4l2_streamparm {
 __u32 type;
 union {
  struct v4l2_captureparm capture;
  struct v4l2_outputparm output;
  __u8 raw_data[200];
 } parm;
};
# 2338 "/usr/include/linux/videodev2.h" 3 4
struct v4l2_event_vsync {

 __u8 field;
} __attribute__ ((packed));






struct v4l2_event_ctrl {
 __u32 changes;
 __u32 type;
 union {
  __s32 value;
  __s64 value64;
 };
 __u32 flags;
 __s32 minimum;
 __s32 maximum;
 __s32 step;
 __s32 default_value;
};

struct v4l2_event_frame_sync {
 __u32 frame_sequence;
};



struct v4l2_event_src_change {
 __u32 changes;
};
# 2381 "/usr/include/linux/videodev2.h" 3 4
struct v4l2_event_motion_det {
 __u32 flags;
 __u32 frame_sequence;
 __u32 region_mask;
};

struct v4l2_event {
 __u32 type;
 union {
  struct v4l2_event_vsync vsync;
  struct v4l2_event_ctrl ctrl;
  struct v4l2_event_frame_sync frame_sync;
  struct v4l2_event_src_change src_change;
  struct v4l2_event_motion_det motion_det;
  __u8 data[64];
 } u;
 __u32 pending;
 __u32 sequence;
 struct timespec timestamp;
 __u32 id;
 __u32 reserved[8];
};




struct v4l2_event_subscription {
 __u32 type;
 __u32 id;
 __u32 flags;
 __u32 reserved[5];
};
# 2432 "/usr/include/linux/videodev2.h" 3 4
struct v4l2_dbg_match {
 __u32 type;
 union {
  __u32 addr;
  char name[32];
 };
} __attribute__ ((packed));

struct v4l2_dbg_register {
 struct v4l2_dbg_match match;
 __u32 size;
 __u64 reg;
 __u64 val;
} __attribute__ ((packed));





struct v4l2_dbg_chip_info {
 struct v4l2_dbg_match match;
 char name[32];
 __u32 flags;
 __u32 reserved[32];
} __attribute__ ((packed));
# 2468 "/usr/include/linux/videodev2.h" 3 4
struct v4l2_create_buffers {
 __u32 index;
 __u32 count;
 __u32 memory;
 struct v4l2_format format;
 __u32 capabilities;
 __u32 reserved[7];
};
# 645 "stress-ng.h" 2



# 1 "/usr/include/linux/vt.h" 1 3 4
# 19 "/usr/include/linux/vt.h" 3 4
struct vt_mode {
 char mode;
 char waitv;
 short relsig;
 short acqsig;
 short frsig;
};






struct vt_stat {
 unsigned short v_active;
 unsigned short v_signal;
 unsigned short v_state;
};
# 46 "/usr/include/linux/vt.h" 3 4
struct vt_sizes {
 unsigned short v_rows;
 unsigned short v_cols;
 unsigned short v_scrollsize;
};


struct vt_consize {
 unsigned short v_rows;
 unsigned short v_cols;
 unsigned short v_vlin;
 unsigned short v_clin;
 unsigned short v_vcol;
 unsigned short v_ccol;
};





struct vt_event {
 unsigned int event;





 unsigned int oldev;
 unsigned int newev;
 unsigned int pad[4];
};



struct vt_setactivate {
 unsigned int console;
 struct vt_mode mode;
};
# 649 "stress-ng.h" 2



# 1 "/usr/include/linux/watchdog.h" 1 3 4
# 18 "/usr/include/linux/watchdog.h" 3 4
struct watchdog_info {
 __u32 options;
 __u32 firmware_version;
 __u8 identity[32];
};
# 653 "stress-ng.h" 2
# 661 "stress-ng.h"
# 1 "/usr/include/aarch64-linux-gnu/sys/xattr.h" 1 3 4
# 25 "/usr/include/aarch64-linux-gnu/sys/xattr.h" 3 4





enum
{
  XATTR_CREATE = 1,

  XATTR_REPLACE = 2

};




extern int setxattr (const char *__path, const char *__name,
       const void *__value, size_t __size, int __flags)
 __attribute__ ((__nothrow__ , __leaf__));




extern int lsetxattr (const char *__path, const char *__name,
        const void *__value, size_t __size, int __flags)
 __attribute__ ((__nothrow__ , __leaf__));



extern int fsetxattr (int __fd, const char *__name, const void *__value,
        size_t __size, int __flags) __attribute__ ((__nothrow__ , __leaf__));



extern ssize_t getxattr (const char *__path, const char *__name,
    void *__value, size_t __size) __attribute__ ((__nothrow__ , __leaf__));




extern ssize_t lgetxattr (const char *__path, const char *__name,
     void *__value, size_t __size) __attribute__ ((__nothrow__ , __leaf__));



extern ssize_t fgetxattr (int __fd, const char *__name, void *__value,
     size_t __size) __attribute__ ((__nothrow__ , __leaf__));




extern ssize_t listxattr (const char *__path, char *__list, size_t __size)
 __attribute__ ((__nothrow__ , __leaf__));




extern ssize_t llistxattr (const char *__path, char *__list, size_t __size)
 __attribute__ ((__nothrow__ , __leaf__));



extern ssize_t flistxattr (int __fd, char *__list, size_t __size)
 __attribute__ ((__nothrow__ , __leaf__));



extern int removexattr (const char *__path, const char *__name) __attribute__ ((__nothrow__ , __leaf__));




extern int lremovexattr (const char *__path, const char *__name) __attribute__ ((__nothrow__ , __leaf__));



extern int fremovexattr (int __fd, const char *__name) __attribute__ ((__nothrow__ , __leaf__));


# 662 "stress-ng.h" 2
# 674 "stress-ng.h"
# 1 "/usr/include/aarch64-linux-gnu/gnu/lib-names.h" 1 3 4






# 1 "/usr/include/aarch64-linux-gnu/bits/wordsize.h" 1 3 4
# 8 "/usr/include/aarch64-linux-gnu/gnu/lib-names.h" 2 3 4


# 1 "/usr/include/aarch64-linux-gnu/gnu/lib-names-lp64.h" 1 3 4
# 11 "/usr/include/aarch64-linux-gnu/gnu/lib-names.h" 2 3 4
# 675 "stress-ng.h" 2
# 772 "stress-ng.h"
# 1 "stress-version.h" 1
# 773 "stress-ng.h" 2
# 961 "stress-ng.h"

# 961 "stress-ng.h"
typedef struct {
 const char *opt_s;
 const char *opt_l;
 const char *description;
} stress_help_t;


typedef enum {
 TYPE_ID_UNDEFINED,
 TYPE_ID_UINT8,
 TYPE_ID_INT8,
 TYPE_ID_UINT16,
 TYPE_ID_INT16,
 TYPE_ID_UINT32,
 TYPE_ID_INT32,
 TYPE_ID_UINT64,
 TYPE_ID_INT64,
 TYPE_ID_SIZE_T,
 TYPE_ID_SSIZE_T,
 TYPE_ID_UINT,
 TYPE_ID_INT,
 TYPE_ID_ULONG,
 TYPE_ID_LONG,
 TYPE_ID_OFF_T,
 TYPE_ID_STR,
 TYPE_ID_BOOL,
 TYPE_ID_UINTPTR_T
} stress_type_id_t;

typedef struct stress_stressor_info *stress_pstressor_info_t;







typedef struct {
 struct {
  uint64_t counter;
  
# 1001 "stress-ng.h" 3 4
 _Bool 
# 1001 "stress-ng.h"
          run_ok;
 } data;
 uint32_t hash;
} stress_checksum_t;


typedef struct stress_setting {
 struct stress_setting *next;
 stress_pstressor_info_t proc;
 char *name;
 stress_type_id_t type_id;
 
# 1012 "stress-ng.h" 3 4
_Bool 
# 1012 "stress-ng.h"
      global;
 union {
  uint8_t uint8;
  int8_t int8;
  uint16_t uint16;
  int16_t int16;
  uint32_t uint32;
  int32_t int32;
  uint64_t uint64;
  int64_t int64;
  size_t size;
  ssize_t ssize;
  unsigned int uint;
  signed int sint;
  unsigned long ulong;
  signed long slong;
  off_t off;
  const char * str;
  
# 1030 "stress-ng.h" 3 4
 _Bool 
# 1030 "stress-ng.h"
       boolean;
  uintptr_t uintptr;
 } u;
} stress_setting_t;

typedef union {
 volatile uint8_t uint8_val;
 volatile uint16_t uint16_val;
 volatile uint32_t uint32_val;
 volatile uint64_t uint64_val;

 volatile __uint128_t uint128_val;

 volatile float float_val;
 volatile double double_val;
 volatile long double long_double_val;
} stress_put_val_t;
# 1059 "stress-ng.h"
typedef uint32_t stress_class_t;

typedef struct {
 void *page_none;
 void *page_ro;
 void *page_wo;
} stress_mapped_t;


typedef struct {
 uint64_t *counter;
 
# 1070 "stress-ng.h" 3 4
_Bool 
# 1070 "stress-ng.h"
     *counter_ready;
 const char *name;
 uint64_t max_ops;
 const uint32_t instance;
 const uint32_t num_instances;
 pid_t pid;
 pid_t ppid;
 size_t page_size;
 stress_mapped_t *mapped;
} stress_args_t;

typedef struct {
 const int opt;
 int (*opt_set_func)(const char *opt);
} stress_opt_set_func_t;


typedef struct {
 int (*stressor)(const stress_args_t *args);
 int (*supported)(const char *name);
 void (*init)(void);
 void (*deinit)(void);
 void (*set_default)(void);
 void (*set_limit)(uint64_t max);
 const stress_class_t class;
 const stress_opt_set_func_t *opt_set_funcs;
 const stress_help_t *help;
} stressor_info_t;


typedef struct {
 const stress_args_t *args;
 void *data;
 int pthread_ret;
} stress_pthread_args_t;


typedef struct stress_hash {
 struct stress_hash *next;
} stress_hash_t;


typedef struct {
 stress_hash_t **table;
 size_t n;
} stress_hash_table_t;


typedef struct {
 uint64_t procs_running;
 uint64_t procs_blocked;
 uint64_t swap_total;
 uint64_t swap_free;
 uint64_t swap_used;
 uint64_t memory_free;
 uint64_t memory_buff;
 uint64_t memory_cache;
 uint64_t swap_in;
 uint64_t swap_out;
 uint64_t block_in;
 uint64_t block_out;
 uint64_t interrupt;
 uint64_t context_switch;
 uint64_t user_time;
 uint64_t system_time;
 uint64_t idle_time;
 uint64_t wait_time;
 uint64_t stolen_time;
} stress_vmstat_t;
# 1350 "stress-ng.h"
   
# 1350 "stress-ng.h"
#pragma GCC diagnostic ignored "-Wnonnull"
# 1350 "stress-ng.h"
   







extern int pr_msg(FILE *fp, const uint64_t flag,
 const char *const fmt, va_list va) __attribute__((format(printf, 3, 0)));
extern int pr_yaml(FILE *fp, const char *const fmt, ...) __attribute__((format(printf, 2, 3)));
extern void pr_yaml_runinfo(FILE *fp);
extern void pr_runinfo(void);
extern void pr_openlog(const char *filename);
extern void pr_closelog(void);
extern void pr_fail_check(int *rc);

extern void pr_dbg(const char *fmt, ...) __attribute__((format(printf, 1, 2)));
extern void pr_inf(const char *fmt, ...) __attribute__((format(printf, 1, 2)));
extern void pr_err(const char *fmt, ...) __attribute__((format(printf, 1, 2)));
extern void pr_fail(const char *fmt, ...) __attribute__((format(printf, 1, 2)));
extern void pr_tidy(const char *fmt, ...) __attribute__((format(printf, 1, 2)));

extern void pr_lock(
# 1373 "stress-ng.h" 3 4
                   _Bool 
# 1373 "stress-ng.h"
                        *locked);
extern void pr_unlock(
# 1374 "stress-ng.h" 3 4
                     _Bool 
# 1374 "stress-ng.h"
                          *locked);
extern void pr_inf_lock(
# 1375 "stress-ng.h" 3 4
                       _Bool 
# 1375 "stress-ng.h"
                            *locked, const char *fmt, ...) __attribute__((format(printf, 2, 3)));
extern void pr_dbg_lock(
# 1376 "stress-ng.h" 3 4
                       _Bool 
# 1376 "stress-ng.h"
                            *locked, const char *fmt, ...) __attribute__((format(printf, 2, 3)));
# 1917 "stress-ng.h"
static inline void __attribute__ ((always_inline)) shim_mb(void)
{
 asm volatile ("" ::: "memory");
}


static inline void __attribute__ ((always_inline)) inc_counter(const stress_args_t *args)
{
 *args->counter_ready = 
# 1925 "stress-ng.h" 3 4
                       0
# 1925 "stress-ng.h"
                            ;
 shim_mb();
 (*(args->counter))++;
 shim_mb();
 *args->counter_ready = 
# 1929 "stress-ng.h" 3 4
                       1
# 1929 "stress-ng.h"
                           ;
 shim_mb();
}

static inline uint64_t __attribute__ ((always_inline)) get_counter(const stress_args_t *args)
{
 return *args->counter;
}

static inline void __attribute__ ((always_inline)) set_counter(const stress_args_t *args, const uint64_t val)
{
 *args->counter_ready = 
# 1940 "stress-ng.h" 3 4
                       0
# 1940 "stress-ng.h"
                            ;
 shim_mb();
 *args->counter = val;
 shim_mb();
 *args->counter_ready = 
# 1944 "stress-ng.h" 3 4
                       1
# 1944 "stress-ng.h"
                           ;
 shim_mb();
}

static inline void __attribute__ ((always_inline)) add_counter(const stress_args_t *args, const uint64_t inc)
{
 *args->counter_ready = 
# 1950 "stress-ng.h" 3 4
                       0
# 1950 "stress-ng.h"
                            ;
 shim_mb();
 *args->counter += inc;
 shim_mb();
 *args->counter_ready = 
# 1954 "stress-ng.h" 3 4
                       1
# 1954 "stress-ng.h"
                           ;
 shim_mb();
}






typedef pthread_spinlock_t shim_pthread_spinlock_t;
# 2233 "stress-ng.h"
typedef int (*stress_func_t)(const stress_args_t *args);


typedef struct {
 uint32_t w;
 uint32_t z;
} stress_mwc_t;
# 2250 "stress-ng.h"
typedef struct {
 uint64_t counter;
 int fd;
} stress_perf_stat_t;


typedef struct {
 stress_perf_stat_t perf_stat[(128)];
 int perf_opened;
} stress_perf_t;
# 2268 "stress-ng.h"
typedef struct stress_tz_info {
 char *path;
 char *type;
 uint16_t type_instance;
 size_t index;
 struct stress_tz_info *next;
} stress_tz_info_t;

typedef struct {
 uint64_t temperature;
} stress_tz_stat_t;

typedef struct {
 stress_tz_stat_t tz_stat[(31)];
} stress_tz_t;



typedef struct {
 uint64_t counter;
 
# 2288 "stress-ng.h" 3 4
_Bool 
# 2288 "stress-ng.h"
     counter_ready;
 struct tms tms;
 double start;
 double finish;

 stress_perf_t sp;


 stress_tz_t tz;

 
# 2298 "stress-ng.h" 3 4
_Bool 
# 2298 "stress-ng.h"
     run_ok;
 stress_checksum_t *checksum;
} stress_stats_t;




typedef struct {
 size_t length;
 uint8_t *mem_cache;
 uint64_t mem_cache_size;
 uint16_t mem_cache_level;
 uint16_t padding1;
 uint32_t mem_cache_ways;
 uint64_t zero;
 stress_mapped_t mapped;
 struct {
  uint32_t hash[(128)];

  shim_pthread_spinlock_t lock;

 } warn_once;
 uint32_t warn_once_flags;
 struct {
  uint64_t val64;
  uint32_t val32;
  uint16_t val16;
  uint8_t val8;
  uint8_t padding2;
 } atomic;
 struct {
  uint32_t futex[(8192)];
  uint64_t timeout[(8192)];
 } futex;
 struct {
  key_t key_id;
  int sem_id;
  
# 2335 "stress-ng.h" 3 4
 _Bool 
# 2335 "stress-ng.h"
      init;
 } sem_sysv;

 struct {
  
# 2339 "stress-ng.h" 3 4
 _Bool 
# 2339 "stress-ng.h"
      no_perf;
  shim_pthread_spinlock_t lock;
 } perf;

 
# 2343 "stress-ng.h" 3 4
_Bool 
# 2343 "stress-ng.h"
     *af_alg_hash_skip;
 
# 2344 "stress-ng.h" 3 4
_Bool 
# 2344 "stress-ng.h"
     *af_alg_cipher_skip;

 stress_tz_info_t *tz_info;


 uint32_t softlockup_count;

 uint8_t str_shared[(65536 * 32)];
 stress_checksum_t *checksums;
 size_t checksums_length;
 stress_stats_t stats[0];
} stress_shared_t;


typedef struct {
 stress_class_t class;
 const char *name;
} stress_class_info_t;
# 2623 "stress-ng.h"
typedef enum {
 STRESS_START = -1,
 STRESS_access, STRESS_af_alg, STRESS_affinity, STRESS_aio, STRESS_aiol, STRESS_apparmor, STRESS_atomic, STRESS_bad_altstack, STRESS_bad_ioctl, STRESS_bigheap, STRESS_bind_mount, STRESS_binderfs, STRESS_branch, STRESS_brk, STRESS_bsearch, STRESS_cache, STRESS_cap, STRESS_chattr, STRESS_chdir, STRESS_chmod, STRESS_chown, STRESS_chroot, STRESS_clock, STRESS_clone, STRESS_close, STRESS_context, STRESS_copy_file, STRESS_cpu, STRESS_cpu_online, STRESS_crypt, STRESS_cyclic, STRESS_daemon, STRESS_dccp, STRESS_dentry, STRESS_dev, STRESS_dev_shm, STRESS_dir, STRESS_dirdeep, STRESS_dnotify, STRESS_dup, STRESS_dynlib, STRESS_efivar, STRESS_enosys, STRESS_env, STRESS_epoll, STRESS_eventfd, STRESS_exec, STRESS_fallocate, STRESS_fanotify, STRESS_fault, STRESS_fcntl, STRESS_fiemap, STRESS_fifo, STRESS_file_ioctl, STRESS_filename, STRESS_flock, STRESS_fork, STRESS_fp_error, STRESS_fstat, STRESS_full, STRESS_funccall, STRESS_funcret, STRESS_futex, STRESS_get, STRESS_getdent, STRESS_getrandom, STRESS_handle, STRESS_hdd, STRESS_heapsort, STRESS_hrtimers, STRESS_hsearch, STRESS_icache, STRESS_icmp_flood, STRESS_idle_page, STRESS_inode_flags, STRESS_inotify, STRESS_io, STRESS_iomix, STRESS_ioport, STRESS_ioprio, STRESS_io_uring, STRESS_ipsec_mb, STRESS_itimer, STRESS_judy, STRESS_kcmp, STRESS_key, STRESS_kill, STRESS_klog, STRESS_l1cache, STRESS_lease, STRESS_link, STRESS_locka, STRESS_lockbus, STRESS_lockf, STRESS_lockofd, STRESS_longjmp, STRESS_loop, STRESS_lsearch, STRESS_madvise, STRESS_malloc, STRESS_matrix, STRESS_matrix_3d, STRESS_mcontend, STRESS_membarrier, STRESS_memcpy, STRESS_memfd, STRESS_memhotplug, STRESS_memrate, STRESS_memthrash, STRESS_mergesort, STRESS_mincore, STRESS_mknod, STRESS_mlock, STRESS_mlockmany, STRESS_mmap, STRESS_mmapaddr, STRESS_mmapfixed, STRESS_mmapfork, STRESS_mmapmany, STRESS_mq, STRESS_mremap, STRESS_msg, STRESS_msync, STRESS_nanosleep, STRESS_netdev, STRESS_netlink_proc, STRESS_netlink_task, STRESS_nice, STRESS_nop, STRESS_null, STRESS_numa, STRESS_oom_pipe, STRESS_opcode, STRESS_open, STRESS_personality, STRESS_physpage, STRESS_pidfd, STRESS_ping_sock, STRESS_pipe, STRESS_pipeherd, STRESS_pkey, STRESS_poll, STRESS_prctl, STRESS_procfs, STRESS_pthread, STRESS_ptrace, STRESS_pty, STRESS_qsort, STRESS_quota, STRESS_radixsort, STRESS_ramfs, STRESS_rawdev, STRESS_rawpkt, STRESS_rawsock, STRESS_rawudp, STRESS_rdrand, STRESS_readahead, STRESS_reboot, STRESS_remap, STRESS_rename, STRESS_resources, STRESS_revio, STRESS_rlimit, STRESS_rmap, STRESS_rseq, STRESS_rtc, STRESS_schedpolicy, STRESS_sctp, STRESS_seal, STRESS_seccomp, STRESS_secretmem, STRESS_seek, STRESS_sem, STRESS_sem_sysv, STRESS_sendfile, STRESS_session, STRESS_set, STRESS_shellsort, STRESS_shm, STRESS_shm_sysv, STRESS_sigabrt, STRESS_sigchld, STRESS_sigfd, STRESS_sigfpe, STRESS_sigio, STRESS_signal, STRESS_sigpending, STRESS_sigpipe, STRESS_sigq, STRESS_sigrt, STRESS_sigsegv, STRESS_sigsuspend, STRESS_sigtrap, STRESS_skiplist, STRESS_sleep, STRESS_sock, STRESS_sockabuse, STRESS_sockdiag, STRESS_sockfd, STRESS_sockpair, STRESS_sockmany, STRESS_softlockup, STRESS_spawn, STRESS_splice, STRESS_stack, STRESS_stackmmap, STRESS_str, STRESS_stream, STRESS_swap, STRESS_switch, STRESS_symlink, STRESS_sync_file, STRESS_sysbadaddr, STRESS_sysinfo, STRESS_sysinval, STRESS_sysfs, STRESS_tee, STRESS_timer, STRESS_timerfd, STRESS_tlb_shootdown, STRESS_tmpfs, STRESS_tree, STRESS_tsc, STRESS_tsearch, STRESS_tun, STRESS_udp, STRESS_udp_flood, STRESS_unshare, STRESS_uprobe, STRESS_urandom, STRESS_userfaultfd, STRESS_utime, STRESS_vdso, STRESS_vecmath, STRESS_verity, STRESS_vfork, STRESS_vforkmany, STRESS_vm, STRESS_vm_addr, STRESS_vm_rw, STRESS_vm_segv, STRESS_vm_splice, STRESS_wait, STRESS_watchdog, STRESS_wcs, STRESS_x86syscall, STRESS_xattr, STRESS_yield, STRESS_zero, STRESS_zlib, STRESS_zombie,

 STRESS_MAX
} stress_id_t;


typedef enum {

 OPT_query = '?',
 OPT_all = 'a',
 OPT_backoff = 'b',
 OPT_bigheap = 'B',
 OPT_cpu = 'c',
 OPT_cache = 'C',
 OPT_hdd = 'd',
 OPT_dentry = 'D',
 OPT_fork = 'f',
 OPT_fallocate = 'F',
 OPT_io = 'i',
 OPT_job = 'j',
 OPT_help = 'h',
 OPT_keep_name = 'k',
 OPT_cpu_load = 'l',
 OPT_vm = 'm',
 OPT_metrics = 'M',
 OPT_dry_run = 'n',
 OPT_rename = 'R',
 OPT_open = 'o',
 OPT_pipe = 'p',
 OPT_poll = 'P',
 OPT_quiet = 'q',
 OPT_random = 'r',
 OPT_switch = 's',
 OPT_sock = 'S',
 OPT_timeout = 't',
 OPT_timer = 'T',
 OPT_urandom = 'u',
 OPT_verbose = 'v',
 OPT_version = 'V',
 OPT_yield = 'y',
 OPT_yaml = 'Y',
 OPT_exclude = 'x',



 OPT_long_ops_start = 0x7f,

 OPT_abort,

 OPT_access,
 OPT_access_ops,

 OPT_affinity,
 OPT_affinity_ops,
 OPT_affinity_rand,

 OPT_af_alg,
 OPT_af_alg_ops,
 OPT_af_alg_dump,

 OPT_aggressive,

 OPT_aio,
 OPT_aio_ops,
 OPT_aio_requests,

 OPT_aiol,
 OPT_aiol_ops,
 OPT_aiol_requests,

 OPT_apparmor,
 OPT_apparmor_ops,

 OPT_atomic,
 OPT_atomic_ops,

 OPT_bad_altstack,
 OPT_bad_altstack_ops,

 OPT_bad_ioctl,
 OPT_bad_ioctl_ops,

 OPT_branch,
 OPT_branch_ops,

 OPT_brk,
 OPT_brk_ops,
 OPT_brk_mlock,
 OPT_brk_notouch,

 OPT_bsearch,
 OPT_bsearch_ops,
 OPT_bsearch_size,

 OPT_bigheap_ops,
 OPT_bigheap_growth,

 OPT_bind_mount,
 OPT_bind_mount_ops,

 OPT_binderfs,
 OPT_binderfs_ops,

 OPT_class,
 OPT_cache_ops,
 OPT_cache_prefetch,
 OPT_cache_flush,
 OPT_cache_fence,
 OPT_cache_sfence,
 OPT_cache_level,
 OPT_cache_ways,
 OPT_cache_no_affinity,

 OPT_cap,
 OPT_cap_ops,

 OPT_chattr,
 OPT_chattr_ops,

 OPT_chdir,
 OPT_chdir_dirs,
 OPT_chdir_ops,

 OPT_chmod,
 OPT_chmod_ops,

 OPT_chown,
 OPT_chown_ops,

 OPT_chroot,
 OPT_chroot_ops,

 OPT_clock,
 OPT_clock_ops,

 OPT_clone,
 OPT_clone_ops,
 OPT_clone_max,

 OPT_close,
 OPT_close_ops,

 OPT_context,
 OPT_context_ops,

 OPT_copy_file,
 OPT_copy_file_ops,
 OPT_copy_file_bytes,

 OPT_cpu_ops,
 OPT_cpu_method,
 OPT_cpu_load_slice,

 OPT_cpu_online,
 OPT_cpu_online_ops,
 OPT_cpu_online_all,

 OPT_crypt,
 OPT_crypt_ops,

 OPT_cyclic,
 OPT_cyclic_ops,
 OPT_cyclic_method,
 OPT_cyclic_policy,
 OPT_cyclic_prio,
 OPT_cyclic_sleep,
 OPT_cyclic_dist,

 OPT_daemon,
 OPT_daemon_ops,

 OPT_dccp,
 OPT_dccp_domain,
 OPT_dccp_ops,
 OPT_dccp_opts,
 OPT_dccp_port,

 OPT_dentry_ops,
 OPT_dentries,
 OPT_dentry_order,

 OPT_dev,
 OPT_dev_ops,
 OPT_dev_file,

 OPT_dev_shm,
 OPT_dev_shm_ops,

 OPT_dir,
 OPT_dir_ops,
 OPT_dir_dirs,

 OPT_dirdeep,
 OPT_dirdeep_ops,
 OPT_dirdeep_dirs,
 OPT_dirdeep_inodes,

 OPT_dnotify,
 OPT_dnotify_ops,

 OPT_dup,
 OPT_dup_ops,

 OPT_dynlib,
 OPT_dynlib_ops,

 OPT_efivar,
 OPT_efivar_ops,

 OPT_enosys,
 OPT_enosys_ops,

 OPT_env,
 OPT_env_ops,

 OPT_epoll,
 OPT_epoll_ops,
 OPT_epoll_port,
 OPT_epoll_domain,

 OPT_eventfd,
 OPT_eventfd_ops,
 OPT_eventfd_nonblock,

 OPT_exec,
 OPT_exec_ops,
 OPT_exec_max,

 OPT_fallocate_ops,
 OPT_fallocate_bytes,

 OPT_fanotify,
 OPT_fanotify_ops,

 OPT_fault,
 OPT_fault_ops,

 OPT_fcntl,
 OPT_fcntl_ops,

 OPT_fiemap,
 OPT_fiemap_ops,
 OPT_fiemap_bytes,

 OPT_fifo,
 OPT_fifo_ops,
 OPT_fifo_readers,

 OPT_file_ioctl,
 OPT_file_ioctl_ops,

 OPT_filename,
 OPT_filename_ops,
 OPT_filename_opts,

 OPT_flock,
 OPT_flock_ops,

 OPT_fork_ops,
 OPT_fork_max,

 OPT_fp_error,
 OPT_fp_error_ops,

 OPT_fstat,
 OPT_fstat_ops,
 OPT_fstat_dir,

 OPT_ftrace,

 OPT_full,
 OPT_full_ops,

 OPT_funccall,
 OPT_funccall_ops,
 OPT_funccall_method,

 OPT_funcret,
 OPT_funcret_ops,
 OPT_funcret_method,

 OPT_futex,
 OPT_futex_ops,

 OPT_get,
 OPT_get_ops,

 OPT_getrandom,
 OPT_getrandom_ops,

 OPT_getdent,
 OPT_getdent_ops,

 OPT_handle,
 OPT_handle_ops,

 OPT_hdd_bytes,
 OPT_hdd_write_size,
 OPT_hdd_ops,
 OPT_hdd_opts,

 OPT_heapsort,
 OPT_heapsort_ops,
 OPT_heapsort_integers,

 OPT_hrtimers,
 OPT_hrtimers_ops,

 OPT_hsearch,
 OPT_hsearch_ops,
 OPT_hsearch_size,

 OPT_icache,
 OPT_icache_ops,

 OPT_icmp_flood,
 OPT_icmp_flood_ops,

 OPT_idle_page,
 OPT_idle_page_ops,

 OPT_ignite_cpu,

 OPT_inode_flags,
 OPT_inode_flags_ops,

 OPT_inotify,
 OPT_inotify_ops,

 OPT_iomix,
 OPT_iomix_bytes,
 OPT_iomix_ops,

 OPT_ioport,
 OPT_ioport_ops,
 OPT_ioport_opts,

 OPT_ionice_class,
 OPT_ionice_level,

 OPT_ioprio,
 OPT_ioprio_ops,

 OPT_io_ops,

 OPT_io_uring,
 OPT_io_uring_ops,

 OPT_ipsec_mb,
 OPT_ipsec_mb_ops,
 OPT_ipsec_mb_feature,

 OPT_itimer,
 OPT_itimer_ops,
 OPT_itimer_freq,
 OPT_itimer_rand,

 OPT_judy,
 OPT_judy_ops,
 OPT_judy_size,

 OPT_kcmp,
 OPT_kcmp_ops,

 OPT_key,
 OPT_key_ops,

 OPT_kill,
 OPT_kill_ops,

 OPT_klog,
 OPT_klog_ops,

 OPT_l1cache,
 OPT_l1cache_ops,
 OPT_l1cache_line_size,
 OPT_l1cache_size,
 OPT_l1cache_sets,
 OPT_l1cache_ways,

 OPT_lease,
 OPT_lease_ops,
 OPT_lease_breakers,

 OPT_link,
 OPT_link_ops,

 OPT_lockbus,
 OPT_lockbus_ops,

 OPT_locka,
 OPT_locka_ops,

 OPT_lockf,
 OPT_lockf_ops,
 OPT_lockf_nonblock,

 OPT_lockofd,
 OPT_lockofd_ops,

 OPT_log_brief,
 OPT_log_file,

 OPT_longjmp,
 OPT_longjmp_ops,

 OPT_loop,
 OPT_loop_ops,

 OPT_lsearch,
 OPT_lsearch_ops,
 OPT_lsearch_size,

 OPT_madvise,
 OPT_madvise_ops,

 OPT_malloc,
 OPT_malloc_ops,
 OPT_malloc_bytes,
 OPT_malloc_max,
 OPT_malloc_pthreads,
 OPT_malloc_threshold,

 OPT_matrix,
 OPT_matrix_ops,
 OPT_matrix_size,
 OPT_matrix_method,
 OPT_matrix_yx,

 OPT_matrix_3d,
 OPT_matrix_3d_ops,
 OPT_matrix_3d_size,
 OPT_matrix_3d_method,
 OPT_matrix_3d_zyx,

 OPT_maximize,
 OPT_max_fd,

 OPT_mcontend,
 OPT_mcontend_ops,

 OPT_membarrier,
 OPT_membarrier_ops,

 OPT_memcpy,
 OPT_memcpy_ops,
 OPT_memcpy_method,

 OPT_memfd,
 OPT_memfd_ops,
 OPT_memfd_bytes,
 OPT_memfd_fds,

 OPT_memhotplug,
 OPT_memhotplug_ops,

 OPT_memrate,
 OPT_memrate_ops,
 OPT_memrate_rd_mbs,
 OPT_memrate_wr_mbs,
 OPT_memrate_bytes,

 OPT_memthrash,
 OPT_memthrash_ops,
 OPT_memthrash_method,

 OPT_mergesort,
 OPT_mergesort_ops,
 OPT_mergesort_integers,

 OPT_metrics_brief,

 OPT_mincore,
 OPT_mincore_ops,
 OPT_mincore_rand,

 OPT_mknod,
 OPT_mknod_ops,

 OPT_minimize,

 OPT_mlock,
 OPT_mlock_ops,

 OPT_mlockmany,
 OPT_mlockmany_ops,

 OPT_mmap,
 OPT_mmap_ops,
 OPT_mmap_bytes,
 OPT_mmap_file,
 OPT_mmap_async,
 OPT_mmap_mprotect,
 OPT_mmap_osync,
 OPT_mmap_odirect,
 OPT_mmap_mmap2,

 OPT_mmapaddr,
 OPT_mmapaddr_ops,

 OPT_mmapfixed,
 OPT_mmapfixed_ops,

 OPT_mmapfork,
 OPT_mmapfork_ops,

 OPT_mmapmany,
 OPT_mmapmany_ops,

 OPT_mq,
 OPT_mq_ops,
 OPT_mq_size,

 OPT_mremap,
 OPT_mremap_ops,
 OPT_mremap_bytes,
 OPT_mremap_mlock,

 OPT_msg,
 OPT_msg_ops,
 OPT_msg_types,

 OPT_msync,
 OPT_msync_bytes,
 OPT_msync_ops,

 OPT_nanosleep,
 OPT_nanosleep_ops,

 OPT_netdev,
 OPT_netdev_ops,

 OPT_netlink_proc,
 OPT_netlink_proc_ops,

 OPT_netlink_task,
 OPT_netlink_task_ops,

 OPT_nice,
 OPT_nice_ops,

 OPT_no_madvise,
 OPT_no_rand_seed,

 OPT_nop,
 OPT_nop_ops,

 OPT_null,
 OPT_null_ops,

 OPT_numa,
 OPT_numa_ops,

 OPT_oomable,

 OPT_oom_pipe,
 OPT_oom_pipe_ops,

 OPT_opcode,
 OPT_opcode_ops,
 OPT_opcode_method,

 OPT_open_ops,
 OPT_open_fd,

 OPT_page_in,
 OPT_pathological,

 OPT_perf_stats,

 OPT_personality,
 OPT_personality_ops,

 OPT_physpage,
 OPT_physpage_ops,

 OPT_pidfd,
 OPT_pidfd_ops,

 OPT_ping_sock,
 OPT_ping_sock_ops,

 OPT_pipe_ops,
 OPT_pipe_size,
 OPT_pipe_data_size,

 OPT_pipeherd,
 OPT_pipeherd_ops,
 OPT_pipeherd_yield,

 OPT_pkey,
 OPT_pkey_ops,

 OPT_poll_ops,
 OPT_poll_fds,

 OPT_prctl,
 OPT_prctl_ops,

 OPT_procfs,
 OPT_procfs_ops,

 OPT_pthread,
 OPT_pthread_ops,
 OPT_pthread_max,

 OPT_ptrace,
 OPT_ptrace_ops,

 OPT_pty,
 OPT_pty_ops,
 OPT_pty_max,

 OPT_qsort,
 OPT_qsort_ops,
 OPT_qsort_integers,

 OPT_quota,
 OPT_quota_ops,

 OPT_radixsort,
 OPT_radixsort_ops,
 OPT_radixsort_size,

 OPT_ramfs,
 OPT_ramfs_ops,
 OPT_ramfs_size,

 OPT_rawdev,
 OPT_rawdev_method,
 OPT_rawdev_ops,

 OPT_rawpkt,
 OPT_rawpkt_ops,
 OPT_rawpkt_port,

 OPT_rawsock,
 OPT_rawsock_ops,

 OPT_rawudp,
 OPT_rawudp_ops,
 OPT_rawudp_port,

 OPT_rdrand,
 OPT_rdrand_ops,

 OPT_readahead,
 OPT_readahead_ops,
 OPT_readahead_bytes,

 OPT_reboot,
 OPT_reboot_ops,

 OPT_remap,
 OPT_remap_ops,

 OPT_rename_ops,

 OPT_resources,
 OPT_resources_ops,

 OPT_revio,
 OPT_revio_ops,
 OPT_revio_opts,
 OPT_revio_bytes,

 OPT_rlimit,
 OPT_rlimit_ops,

 OPT_rmap,
 OPT_rmap_ops,

 OPT_rseq,
 OPT_rseq_ops,

 OPT_rtc,
 OPT_rtc_ops,

 OPT_sched,
 OPT_sched_prio,

 OPT_schedpolicy,
 OPT_schedpolicy_ops,

 OPT_sched_period,
 OPT_sched_runtime,
 OPT_sched_deadline,
 OPT_sched_reclaim,

 OPT_sctp,
 OPT_sctp_ops,
 OPT_sctp_domain,
 OPT_sctp_port,

 OPT_seal,
 OPT_seal_ops,

 OPT_seccomp,
 OPT_seccomp_ops,

 OPT_secretmem,
 OPT_secretmem_ops,

 OPT_seek,
 OPT_seek_ops,
 OPT_seek_punch,
 OPT_seek_size,

 OPT_sendfile,
 OPT_sendfile_ops,
 OPT_sendfile_size,

 OPT_sem,
 OPT_sem_ops,
 OPT_sem_procs,

 OPT_sem_sysv,
 OPT_sem_sysv_ops,
 OPT_sem_sysv_procs,

 OPT_session,
 OPT_session_ops,

 OPT_set,
 OPT_set_ops,

 OPT_shellsort,
 OPT_shellsort_ops,
 OPT_shellsort_integers,

 OPT_shm,
 OPT_shm_ops,
 OPT_shm_bytes,
 OPT_shm_objects,

 OPT_shm_sysv,
 OPT_shm_sysv_ops,
 OPT_shm_sysv_bytes,
 OPT_shm_sysv_segments,

 OPT_sequential,

 OPT_sigabrt,
 OPT_sigabrt_ops,

 OPT_sigchld,
 OPT_sigchld_ops,

 OPT_sigfd,
 OPT_sigfd_ops,

 OPT_sigfpe,
 OPT_sigfpe_ops,

 OPT_sigio,
 OPT_sigio_ops,

 OPT_signal,
 OPT_signal_ops,

 OPT_sigpending,
 OPT_sigpending_ops,

 OPT_sigpipe,
 OPT_sigpipe_ops,

 OPT_sigq,
 OPT_sigq_ops,

 OPT_sigrt,
 OPT_sigrt_ops,

 OPT_sigsegv,
 OPT_sigsegv_ops,

 OPT_sigsuspend,
 OPT_sigsuspend_ops,

 OPT_sigtrap,
 OPT_sigtrap_ops,

 OPT_skiplist,
 OPT_skiplist_ops,
 OPT_skiplist_size,

 OPT_sleep,
 OPT_sleep_ops,
 OPT_sleep_max,

 OPT_sock_ops,
 OPT_sock_domain,
 OPT_sock_nodelay,
 OPT_sock_opts,
 OPT_sock_port,
 OPT_sock_type,

 OPT_sockabuse,
 OPT_sockabuse_ops,

 OPT_sockdiag,
 OPT_sockdiag_ops,

 OPT_sockfd,
 OPT_sockfd_ops,
 OPT_sockfd_port,

 OPT_sockmany,
 OPT_sockmany_ops,

 OPT_sockpair,
 OPT_sockpair_ops,

 OPT_softlockup,
 OPT_softlockup_ops,

 OPT_swap,
 OPT_swap_ops,

 OPT_switch_ops,
 OPT_switch_freq,

 OPT_spawn,
 OPT_spawn_ops,

 OPT_splice,
 OPT_splice_ops,
 OPT_splice_bytes,

 OPT_stack,
 OPT_stack_ops,
 OPT_stack_fill,
 OPT_stack_mlock,

 OPT_stackmmap,
 OPT_stackmmap_ops,

 OPT_str,
 OPT_str_ops,
 OPT_str_method,

 OPT_stream,
 OPT_stream_ops,
 OPT_stream_index,
 OPT_stream_l3_size,
 OPT_stream_madvise,

 OPT_stressors,

 OPT_symlink,
 OPT_symlink_ops,

 OPT_sync_file,
 OPT_sync_file_ops,
 OPT_sync_file_bytes,

 OPT_sysbadaddr,
 OPT_sysbadaddr_ops,

 OPT_sysinfo,
 OPT_sysinfo_ops,

 OPT_sysinval,
 OPT_sysinval_ops,

 OPT_sysfs,
 OPT_sysfs_ops,

 OPT_syslog,

 OPT_tee,
 OPT_tee_ops,

 OPT_taskset,

 OPT_temp_path,

 OPT_thermalstat,
 OPT_thermal_zones,

 OPT_thrash,

 OPT_timer_slack,

 OPT_timer_ops,
 OPT_timer_freq,
 OPT_timer_rand,

 OPT_timerfd,
 OPT_timerfd_ops,
 OPT_timerfd_freq,
 OPT_timerfd_rand,

 OPT_times,

 OPT_timestamp,

 OPT_tlb_shootdown,
 OPT_tlb_shootdown_ops,

 OPT_tmpfs,
 OPT_tmpfs_ops,
 OPT_tmpfs_mmap_async,
 OPT_tmpfs_mmap_file,

 OPT_tree,
 OPT_tree_ops,
 OPT_tree_method,
 OPT_tree_size,

 OPT_tsc,
 OPT_tsc_ops,

 OPT_tsearch,
 OPT_tsearch_ops,
 OPT_tsearch_size,

 OPT_tun,
 OPT_tun_ops,
 OPT_tun_tap,

 OPT_udp,
 OPT_udp_ops,
 OPT_udp_port,
 OPT_udp_domain,
 OPT_udp_lite,

 OPT_udp_flood,
 OPT_udp_flood_ops,
 OPT_udp_flood_domain,

 OPT_unshare,
 OPT_unshare_ops,

 OPT_uprobe,
 OPT_uprobe_ops,

 OPT_urandom_ops,

 OPT_userfaultfd,
 OPT_userfaultfd_ops,
 OPT_userfaultfd_bytes,

 OPT_utime,
 OPT_utime_ops,
 OPT_utime_fsync,

 OPT_vdso,
 OPT_vdso_ops,
 OPT_vdso_func,

 OPT_vecmath,
 OPT_vecmath_ops,

 OPT_verify,

 OPT_verity,
 OPT_verity_ops,

 OPT_vfork,
 OPT_vfork_ops,
 OPT_vfork_max,

 OPT_vforkmany,
 OPT_vforkmany_ops,

 OPT_vm_bytes,
 OPT_vm_hang,
 OPT_vm_keep,
 OPT_vm_mmap_populate,
 OPT_vm_mmap_locked,
 OPT_vm_ops,
 OPT_vm_madvise,
 OPT_vm_method,

 OPT_vm_addr,
 OPT_vm_addr_method,
 OPT_vm_addr_ops,

 OPT_vm_rw,
 OPT_vm_rw_ops,
 OPT_vm_rw_bytes,

 OPT_vm_segv,
 OPT_vm_segv_ops,

 OPT_vm_splice,
 OPT_vm_splice_ops,
 OPT_vm_splice_bytes,

 OPT_vmstat,

 OPT_wait,
 OPT_wait_ops,

 OPT_watchdog,
 OPT_watchdog_ops,

 OPT_wcs,
 OPT_wcs_ops,
 OPT_wcs_method,

 OPT_x86syscall,
 OPT_x86syscall_ops,
 OPT_x86syscall_func,

 OPT_xattr,
 OPT_xattr_ops,

 OPT_yield_ops,

 OPT_zero,
 OPT_zero_ops,

 OPT_zlib,
 OPT_zlib_ops,
 OPT_zlib_level,
 OPT_zlib_mem_level,
 OPT_zlib_method,
 OPT_zlib_window_bits,
 OPT_zlib_stream_bytes,
 OPT_zlib_strategy,

 OPT_zombie,
 OPT_zombie_ops,
 OPT_zombie_max,
} stress_op_t;


typedef struct {
 const stressor_info_t *info;
 const stress_id_t id;
 const short int short_getopt;
 const stress_op_t op;
 const char *name;
} stress_t;


typedef struct stress_stressor_info {
 struct stress_stressor_info *next;
 struct stress_stressor_info *prev;
 const stress_t *stressor;
 pid_t *pids;
 stress_stats_t **stats;
 int32_t started_instances;
 int32_t num_instances;
 uint64_t bogo_ops;
} stress_stressor_t;


extern stress_stressor_t *g_stressor_current;


typedef struct {
 const char ch;
 const uint64_t scale;
} stress_scale_t;


typedef enum stress_cache_type {
 CACHE_TYPE_UNKNOWN = 0,
 CACHE_TYPE_DATA,
 CACHE_TYPE_INSTRUCTION,
 CACHE_TYPE_UNIFIED,
} stress_cache_type_t;


typedef struct stress_cpu_cache {
 uint64_t size;
 uint32_t line_size;
 uint32_t ways;
 stress_cache_type_t type;
 uint16_t level;
} stress_cpu_cache_t;

typedef struct stress_cpu {
 stress_cpu_cache_t *caches;
 uint32_t num;
 uint32_t cache_count;
 
# 3703 "stress-ng.h" 3 4
_Bool 
# 3703 "stress-ng.h"
               online;
} stress_cpu_t;

typedef struct stress_cpus {
 stress_cpu_t *cpus;
 uint32_t count;
} stress_cpus_t;


extern const char *g_app_name;
extern stress_shared_t *g_shared;
extern uint64_t g_opt_timeout;
extern uint64_t g_opt_flags;
extern int32_t g_opt_sequential;
extern int32_t g_opt_parallel;
extern volatile 
# 3718 "stress-ng.h" 3 4
               _Bool 
# 3718 "stress-ng.h"
                    g_keep_stressing_flag;
extern volatile 
# 3719 "stress-ng.h" 3 4
               _Bool 
# 3719 "stress-ng.h"
                    g_caught_sigint;
extern pid_t g_pgrp;
extern jmp_buf g_error_env;
extern stress_put_val_t g_put_val;

static inline 
# 3724 "stress-ng.h" 3 4
             _Bool 
# 3724 "stress-ng.h"
                  __attribute__ ((always_inline)) __attribute__ ((hot)) __attribute__((optimize("-O3"))) keep_stressing_flag(void)
{
 return g_keep_stressing_flag;
}

static inline void __attribute__ ((hot)) __attribute__((optimize("-O3"))) keep_stressing_set_flag(const 
# 3729 "stress-ng.h" 3 4
                                                              _Bool 
# 3729 "stress-ng.h"
                                                                   setting)
{
 g_keep_stressing_flag = setting;
}





static inline 
# 3738 "stress-ng.h" 3 4
             _Bool 
# 3738 "stress-ng.h"
                  __attribute__ ((hot)) __attribute__((optimize("-O3"))) keep_stressing(const stress_args_t *args)
{
 return (__builtin_expect((g_keep_stressing_flag),1) &&
  __builtin_expect((!args->max_ops || (get_counter(args) < args->max_ops)),1));
}




extern int stress_set_setting(const char *name, const stress_type_id_t type_id,
 const void *value);
extern int stress_set_setting_global(const char *name, const stress_type_id_t type_id,
 const void *value);
extern 
# 3751 "stress-ng.h" 3 4
      _Bool 
# 3751 "stress-ng.h"
           stress_get_setting(const char *name, void *value);
extern void stress_settings_free(void);






extern uint64_t stress_uint64_zero(void);





static inline void __attribute__ ((always_inline)) stress_uint8_put(const uint8_t a)
{
 g_put_val.uint8_val = a;
}





static inline void __attribute__ ((always_inline)) stress_uint16_put(const uint16_t a)
{
 g_put_val.uint16_val = a;
}





static inline void __attribute__ ((always_inline)) stress_uint32_put(const uint32_t a)
{
 g_put_val.uint32_val = a;
}





static inline void __attribute__ ((always_inline)) stress_uint64_put(const uint64_t a)
{
 g_put_val.uint64_val = a;
}






static inline void __attribute__ ((always_inline)) stress_uint128_put(const __uint128_t a)
{
 g_put_val.uint128_val = a;
}






static inline void __attribute__ ((always_inline)) stress_float_put(const float a)
{
 g_put_val.float_val = a;
}





static inline void __attribute__ ((always_inline)) stress_double_put(const double a)
{
 g_put_val.double_val = a;
}





static inline void __attribute__ ((always_inline)) stress_long_double_put(const double a)
{
 g_put_val.long_double_val = a;
}



extern int stress_temp_filename(char *path, const size_t len,
 const char *name, const pid_t pid, const uint32_t instance,
 const uint64_t magic);
extern int stress_temp_filename_args(const stress_args_t *args, char *path,
 const size_t len, const uint64_t magic);
extern int stress_temp_dir(char *path, const size_t len,
 const char *name, const pid_t pid, const uint32_t instance);
extern int stress_temp_dir_args(const stress_args_t *args, char *path,
 const size_t len);
extern __attribute__((warn_unused_result)) int stress_temp_dir_mk(const char *name, const pid_t pid,
 const uint32_t instance);
extern __attribute__((warn_unused_result)) int stress_temp_dir_mk_args(const stress_args_t *args);
extern int stress_temp_dir_rm(const char *name, const pid_t pid,
 const uint32_t instance);
extern int stress_temp_dir_rm_args(const stress_args_t *args);
extern void stress_cwd_readwriteable(void);

extern const char *stress_strsignal(const int signum);
# 3873 "stress-ng.h"
static inline void __attribute__ ((always_inline)) shim_mfence(void)
{


 __sync_synchronize();







}


extern uint32_t stress_mwc32(void);
extern uint64_t stress_mwc64(void);
extern uint16_t stress_mwc16(void);
extern uint8_t stress_mwc8(void);
extern uint8_t stress_mwc1(void);
extern void stress_mwc_seed(const uint32_t w, const uint32_t z);
extern void stress_mwc_reseed(void);


extern __attribute__((warn_unused_result)) double stress_timeval_to_double(const struct timeval *tv);
extern __attribute__((warn_unused_result)) double stress_time_now(void);
extern const char *stress_duration_to_str(const double duration);



extern int stress_perf_open(stress_perf_t *sp);
extern int stress_perf_enable(stress_perf_t *sp);
extern int stress_perf_disable(stress_perf_t *sp);
extern int stress_perf_close(stress_perf_t *sp);
extern 
# 3907 "stress-ng.h" 3 4
      _Bool 
# 3907 "stress-ng.h"
           stress_perf_stat_succeeded(const stress_perf_t *sp);
extern void stress_perf_stat_dump(FILE *yaml, stress_stressor_t *procs_head,
 const double duration);
extern void stress_perf_init(void);



extern __attribute__((warn_unused_result)) 
# 3914 "stress-ng.h" 3 4
                  _Bool 
# 3914 "stress-ng.h"
                       stress_cpu_is_x86(void);

typedef int stress_oomable_child_func_t(const stress_args_t *args, void *context);






extern size_t stress_mk_filename(char *fullname, const size_t fullname_len,
 const char *pathname, const char *filename);
extern void stress_set_oom_adjustment(const char *name, const 
# 3925 "stress-ng.h" 3 4
                                                             _Bool 
# 3925 "stress-ng.h"
                                                                  killable);
extern __attribute__((warn_unused_result)) 
# 3926 "stress-ng.h" 3 4
                  _Bool 
# 3926 "stress-ng.h"
                       stress_process_oomed(const pid_t pid);
extern __attribute__((warn_unused_result)) int stress_oomable_child(const stress_args_t *args,
 void *context, stress_oomable_child_func_t func, const int flag);
extern __attribute__((warn_unused_result)) int stress_set_sched(const pid_t pid, const int32_t sched,
 const int 
# 3930 "stress-ng.h" 3 4
          sched_priority
# 3930 "stress-ng.h"
                        , const 
# 3930 "stress-ng.h" 3 4
                                _Bool 
# 3930 "stress-ng.h"
                                     quiet);
extern __attribute__((warn_unused_result)) int stress_set_deadline_sched(const pid_t, const uint64_t period,
 const uint64_t runtime, const uint64_t deadline, const 
# 3932 "stress-ng.h" 3 4
                                                       _Bool 
# 3932 "stress-ng.h"
                                                            quiet);
extern int sched_settings_apply(const 
# 3933 "stress-ng.h" 3 4
                                     _Bool 
# 3933 "stress-ng.h"
                                          quiet);
extern const char *stress_get_sched_name(const int sched);
extern void stress_set_iopriority(const int32_t class, const int32_t level);
extern void stress_set_proc_name_init(int argc, char *argv[], char *envp[]);
extern void stress_set_proc_name(const char *name);
extern void stress_set_proc_state(const char *name, const int state);
extern __attribute__((warn_unused_result)) int stress_get_unused_uid(uid_t *uid);


extern int stress_mlock_region(const void *addr_start, const void *addr_end);


extern __attribute__((warn_unused_result)) uint64_t stress_get_uint64(const char *const str);
extern __attribute__((warn_unused_result)) uint64_t stress_get_uint64_scale(const char *const str,
 const stress_scale_t scales[], const char *const msg);
extern __attribute__((warn_unused_result)) uint64_t stress_get_uint64_percent(const char *const str,
 const uint32_t instances, const uint64_t max, const char *const errmsg);
extern __attribute__((warn_unused_result)) uint64_t stress_get_uint64_byte(const char *const str);
extern __attribute__((warn_unused_result)) uint64_t stress_get_uint64_byte_memory(
 const char *const str, const uint32_t instances);
extern __attribute__((warn_unused_result)) uint64_t stress_get_uint64_byte_filesystem(
 const char *const str, const uint32_t instances);
extern __attribute__((warn_unused_result)) uint64_t stress_get_uint64_time(const char *const str);
extern void stress_check_value(const char *const msg, const int val);
extern void stress_check_range(const char *const opt, const uint64_t val,
 const uint64_t lo, const uint64_t hi);
extern void stress_check_range_bytes(const char *const opt,
 const uint64_t val, const uint64_t lo, const uint64_t hi);
extern __attribute__((warn_unused_result)) int stress_set_cpu_affinity(const char *arg);
extern __attribute__((warn_unused_result)) uint32_t stress_get_uint32(const char *const str);
extern __attribute__((warn_unused_result)) int32_t stress_get_int32(const char *const str);
extern __attribute__((warn_unused_result)) int32_t stress_get_opt_sched(const char *const str);
extern __attribute__((warn_unused_result)) int32_t stress_get_opt_ionice_class(const char *const str);


extern __attribute__((warn_unused_result)) size_t stress_sig_stack_size(void);
extern __attribute__((warn_unused_result)) size_t stress_min_sig_stack_size(void);




extern void stress_shared_unmap(void);
extern void stress_log_system_mem_info(void);
extern __attribute__((warn_unused_result)) char *stress_munge_underscore(const char *str);
extern size_t stress_get_pagesize(void);
extern __attribute__((warn_unused_result)) int32_t stress_get_processors_online(void);
extern __attribute__((warn_unused_result)) int32_t stress_get_processors_configured(void);
extern __attribute__((warn_unused_result)) int32_t stress_get_ticks_per_second(void);
extern __attribute__((warn_unused_result)) ssize_t stress_get_stack_direction(void);
extern void stress_get_memlimits(size_t *shmall, size_t *freemem,
 size_t *totalmem, size_t *freeswap);
extern __attribute__((warn_unused_result)) int stress_get_load_avg(double *min1, double *min5,
 double *min15);
extern void stress_set_max_limits(void);
extern void stress_parent_died_alarm(void);
extern int stress_process_dumpable(const 
# 3988 "stress-ng.h" 3 4
                                        _Bool 
# 3988 "stress-ng.h"
                                             dumpable);
extern int stress_set_timer_slack_ns(const char *opt);
extern void stress_set_timer_slack(void);
extern __attribute__((warn_unused_result)) int stress_set_temp_path(const char *path);
extern __attribute__((warn_unused_result)) const char *stress_get_temp_path(void);
extern void stress_temp_path_free(void);
extern void stress_strnrnd(char *str, const size_t len);
extern void stress_get_cache_size(uint64_t *l2, uint64_t *l3);
extern __attribute__((warn_unused_result)) unsigned int stress_get_cpu(void);
extern __attribute__((warn_unused_result)) const char *stress_get_compiler(void);
extern __attribute__((warn_unused_result)) const char *stress_get_uname_info(void);
extern __attribute__((warn_unused_result)) int stress_cache_alloc(const char *name);
extern void stress_cache_free(void);
extern void stress_ignite_cpu_start(void);
extern void stress_ignite_cpu_stop(void);
extern int system_write(const char *path, const char *buf, const size_t buf_len);
extern __attribute__((warn_unused_result)) int stress_set_nonblock(const int fd);
extern __attribute__((warn_unused_result)) int system_read(const char *path, char *buf,
 const size_t buf_len);
extern __attribute__((warn_unused_result)) uint64_t stress_get_prime64(const uint64_t n);
extern __attribute__((warn_unused_result)) size_t stress_get_file_limit(void);
extern __attribute__((warn_unused_result)) size_t stress_get_max_file_limit(void);
extern __attribute__((warn_unused_result)) int stress_get_bad_fd(void);
extern void stress_vmstat_start(void);
extern void stress_vmstat_stop(void);
extern __attribute__((warn_unused_result)) int stress_sigaltstack(void *stack, const size_t size);
extern __attribute__((warn_unused_result)) int stress_sighandler(const char *name, const int signum,
 void (*handler)(int), struct sigaction *orig_action);
extern void stress_handle_stop_stressing(int dummy);
extern __attribute__((warn_unused_result)) int stress_sig_stop_stressing(const char *name,
 const int sig);
extern int stress_sigrestore(const char *name, const int signum,
 struct sigaction *orig_action);
extern __attribute__((warn_unused_result)) int stress_not_implemented(const stress_args_t *args);
extern __attribute__((warn_unused_result)) size_t stress_probe_max_pipe_size(void);
extern __attribute__((warn_unused_result)) void *stress_align_address(const void *addr,
 const size_t alignment);
extern void stress_mmap_set(uint8_t *buf, const size_t sz,
 const size_t page_size);
extern __attribute__((warn_unused_result)) int stress_mmap_check(uint8_t *buf, const size_t sz,
 const size_t page_size);
extern __attribute__((warn_unused_result)) uint64_t stress_get_phys_mem_size(void);
extern __attribute__((warn_unused_result)) uint64_t stress_get_filesystem_size(void);
extern __attribute__((warn_unused_result)) ssize_t stress_read_buffer(int, void*, ssize_t, 
# 4031 "stress-ng.h" 3 4
                                                                  _Bool
# 4031 "stress-ng.h"
                                                                      );
extern __attribute__((warn_unused_result)) ssize_t stress_write_buffer(int, void*, ssize_t, 
# 4032 "stress-ng.h" 3 4
                                                                   _Bool
# 4032 "stress-ng.h"
                                                                       );
extern __attribute__((warn_unused_result)) uint64_t stress_get_filesystem_available_inodes(void);
extern __attribute__((warn_unused_result)) int stress_kernel_release(const int major,
 const int minor, const int patchlevel);
extern __attribute__((warn_unused_result)) int stress_get_kernel_release(void);
extern char *stress_uint64_to_str(char *str, size_t len, const uint64_t val);
extern __attribute__((warn_unused_result)) int stress_drop_capabilities(const char *name);
extern __attribute__((warn_unused_result)) 
# 4039 "stress-ng.h" 3 4
                  _Bool 
# 4039 "stress-ng.h"
                       stress_is_dot_filename(const char *name);
extern __attribute__((warn_unused_result)) char *stress_const_optdup(const char *opt);
extern size_t stress_text_addr(char **start, char **end);
extern __attribute__((warn_unused_result)) 
# 4042 "stress-ng.h" 3 4
                  _Bool 
# 4042 "stress-ng.h"
                       stress_check_capability(const int capability);
extern __attribute__((warn_unused_result)) 
# 4043 "stress-ng.h" 3 4
                  _Bool 
# 4043 "stress-ng.h"
                       stress_sigalrm_pending(void);
extern __attribute__((warn_unused_result)) 
# 4044 "stress-ng.h" 3 4
                  _Bool 
# 4044 "stress-ng.h"
                       stress_is_dev_tty(const int fd);
extern __attribute__((warn_unused_result)) stress_hash_table_t *stress_hash_create(const size_t n);
extern stress_hash_t *stress_hash_add(stress_hash_table_t *hash_table,
 const char *str);
extern __attribute__((warn_unused_result)) stress_hash_t *stress_hash_get(
 stress_hash_table_t *hash_table, const char *str);
extern void stress_hash_delete(stress_hash_table_t *hash_table);
extern __attribute__((warn_unused_result)) int stress_try_open(const stress_args_t *args,
 const char *path, const int flags, const unsigned long timeout_ns);
extern __attribute__((warn_unused_result)) int stress_open_timeout(const char *name,
        const char *path, const int flags, const unsigned long timeout_ns);
extern __attribute__((warn_unused_result)) uint32_t stress_hash_jenkin(const uint8_t *data,
 const size_t len);
extern __attribute__((warn_unused_result)) uint32_t stress_hash_pjw(const char *str);
extern __attribute__((warn_unused_result)) uint32_t stress_hash_djb2a(const char *str);
extern __attribute__((warn_unused_result)) uint32_t stress_hash_fnv1a(const char *str);
extern __attribute__((warn_unused_result)) uint32_t stress_hash_sdbm(const char *str);
extern __attribute__((warn_unused_result)) uint32_t stress_hash_nhash(const char *str);
extern __attribute__((warn_unused_result)) uint32_t stress_hash_murmur3_32(const uint8_t* key, size_t len, uint32_t seed);
extern void stress_dirent_list_free(struct dirent **dlist, const int n);
extern __attribute__((warn_unused_result)) int stress_dirent_list_prune(struct dirent **dlist, const int n);
extern __attribute__((warn_unused_result)) uint16_t stress_ipv4_checksum(uint16_t *ptr, const size_t n);
extern int stress_read_fdinfo(const pid_t pid, const int fd);
extern __attribute__((warn_unused_result)) pid_t stress_get_unused_pid_racy(const 
# 4067 "stress-ng.h" 3 4
                                                         _Bool 
# 4067 "stress-ng.h"
                                                              fork_test);
extern __attribute__((warn_unused_result)) size_t stress_hostname_length(void);
extern __attribute__((warn_unused_result)) int32_t stress_set_vmstat(const char *const str);
extern __attribute__((warn_unused_result)) int32_t stress_set_thermalstat(const char *const str);

extern int stress_ftrace_start(void);
extern int stress_ftrace_stop(void);
extern void stress_ftrace_free(void);
extern void stress_ftrace_add_pid(const pid_t pid);






static inline __attribute__((warn_unused_result)) __attribute__ ((always_inline)) int exit_status(const int err)
{
 switch (err) {
 case 
# 4085 "stress-ng.h" 3 4
     12
# 4085 "stress-ng.h"
           :
 case 
# 4086 "stress-ng.h" 3 4
     28
# 4086 "stress-ng.h"
           :
  return (3);
 case 
# 4088 "stress-ng.h" 3 4
     38
# 4088 "stress-ng.h"
           :
  return (4);
 }
 return 
# 4091 "stress-ng.h" 3 4
       1
# 4091 "stress-ng.h"
                   ;
}






static inline __attribute__((warn_unused_result)) __attribute__ ((always_inline)) void *stress_align_stack(void *stack_top)
{
 return (void *)((uintptr_t)stack_top & ~(uintptr_t)0xf);
}






extern __attribute__((warn_unused_result)) 
# 4109 "stress-ng.h" 3 4
                  _Bool 
# 4109 "stress-ng.h"
                       stress_warn_once_hash(const char *filename, const int line);



extern __attribute__((warn_unused_result)) int stress_parse_jobfile(int argc, char **argv,
 const char *jobfile);
extern __attribute__((warn_unused_result)) int stress_parse_opts(int argc, char **argv,
 const 
# 4116 "stress-ng.h" 3 4
      _Bool 
# 4116 "stress-ng.h"
           jobmode);


extern int stress_madvise_random(void *addr, const size_t length);
extern int stress_mincore_touch_pages(void *buf, const size_t buf_len);
extern int stress_mincore_touch_pages_interruptible(void *buf,
 const size_t buf_len);


extern void stress_mount_free(char *mnts[], const int n);
extern __attribute__((warn_unused_result)) int stress_mount_get(char *mnts[], const int max);



extern int stress_tz_init(stress_tz_info_t **tz_info_list);
extern void stress_tz_free(stress_tz_info_t **tz_info_list);
extern int stress_tz_get_temperatures(stress_tz_info_t **tz_info_list,
 stress_tz_t *tz);
extern void stress_tz_dump(FILE *yaml, stress_stressor_t *procs_head);







extern void stress_set_net_port(const char *optname, const char *opt,
 const int min_port, const int max_port, int *port);
extern __attribute__((warn_unused_result)) int stress_set_net_domain(const int domain_mask,
 const char *name, const char *domain_name, int *domain);
extern void stress_set_sockaddr(const char *name, const uint32_t instance,
 const pid_t ppid, const int domain, const int port,
 struct sockaddr **sockaddr, socklen_t *len, const int net_addr);
extern void stress_set_sockaddr_port(const int domain, const int port,
 struct sockaddr *sockaddr);


extern stress_cpus_t *stress_get_all_cpu_cache_details(void);
extern uint16_t stress_get_max_cache_level(const stress_cpus_t *cpus);
extern stress_cpu_cache_t *stress_get_cpu_cache(const stress_cpus_t *cpus,
 const uint16_t cache_level);
extern void stress_free_cpu_caches(stress_cpus_t *cpus);


extern int stress_thrash_start(void);
extern void stress_thrash_stop(void);


extern void stress_adjust_pthread_max(const uint64_t max);
extern void stress_adjust_sleep_max(const uint64_t max);



typedef loff_t shim_loff_t;





typedef off64_t shim_off64_t;





struct shim_clone_args {
 uint64_t flags;
 uint64_t pidfd;
 uint64_t child_tid;
 uint64_t parent_tid;
 uint64_t exit_signal;
 uint64_t stack;
 uint64_t stack_size;
 uint64_t tls;
};

struct shim_getcpu_cache {
        unsigned long blob[128 / sizeof(long)];
};





struct shim_linux_dirent {
 unsigned long d_ino;
 unsigned long d_off;
 unsigned short d_reclen;
 char d_name[];
};


struct shim_linux_dirent64 {

 ino64_t d_ino;



 shim_off64_t d_off;
 unsigned short d_reclen;
 unsigned char d_type;
 char d_name[];
};


struct shim_sched_attr {
 uint32_t size;
 uint32_t sched_policy;
 uint64_t sched_flags;
 int32_t sched_nice;
 uint32_t 
# 4226 "stress-ng.h" 3 4
         sched_priority
# 4226 "stress-ng.h"
                       ;
 uint64_t sched_runtime;
 uint64_t sched_deadline;
 uint64_t sched_period;
 uint32_t sched_util_min;
 uint32_t sched_util_max;
};





typedef unsigned int shim_speed_t;


struct shim_termios2 {
 tcflag_t c_iflag;
 tcflag_t c_oflag;
 tcflag_t c_cflag;
 tcflag_t c_lflag;
 cc_t c_line;
 cc_t c_cc[
# 4247 "stress-ng.h" 3 4
          32
# 4247 "stress-ng.h"
              ];
 shim_speed_t c_ispeed;
 shim_speed_t c_ospeed;
};
# 4269 "stress-ng.h"
struct shim_statx_timestamp {
 int64_t tv_sec;
 int32_t tv_nsec;
 int32_t __reserved;
};


struct shim_statx {
 uint32_t stx_mask;
 uint32_t stx_blksize;
 uint64_t stx_attributes;
 uint32_t stx_nlink;
 uint32_t stx_uid;
 uint32_t stx_gid;
 uint16_t stx_mode;
 uint16_t __spare0[1];
 uint64_t stx_ino;
 uint64_t stx_size;
 uint64_t stx_blocks;
 uint64_t __spare1[1];
 struct shim_statx_timestamp stx_atime;
 struct shim_statx_timestamp stx_btime;
 struct shim_statx_timestamp stx_ctime;
 struct shim_statx_timestamp stx_mtime;
 uint32_t stx_rdev_major;
 uint32_t stx_rdev_minor;
 uint32_t stx_dev_major;
 uint32_t stx_dev_minor;
 uint64_t __spare2[14];
};


struct shim_ustat {

 daddr_t f_tfree;



 ino_t f_tinode;
 char f_fname[6];
 char f_fpack[6];
};
# 4341 "stress-ng.h"
extern int shim_arch_prctl(int code, unsigned long addr);
extern int shim_brk(void *addr);
extern int shim_cacheflush(char *addr, int nbytes, int cache);
extern void shim_flush_icache(void *begin, void *end);
extern int shim_clock_adjtime(clockid_t clk_id, struct timex *tx);
extern int shim_clock_getres(clockid_t clk_id, struct timespec *res);
extern int shim_clock_gettime(clockid_t clk_id, struct timespec *tp);
extern int shim_clock_settime(clockid_t clk_id, struct timespec *tp);
extern int sys_clone3(struct shim_clone_args *cl_args, size_t size);
extern int shim_close_range(unsigned int fd, unsigned int max_fd, unsigned int flags);
extern ssize_t shim_copy_file_range(int fd_in, shim_loff_t *off_in,
 int fd_out, shim_loff_t *off_out, size_t len, unsigned int flags);
extern int shim_dup3(int oldfd, int newfd, int flags);
extern int shim_execveat(int dir_fd, const char *pathname, char *const argv[],
 char *const envp[], int flags);
extern void shim_exit_group(int status);
extern int shim_fallocate(int fd, int mode, off_t offset, off_t len);
extern int shim_fdatasync(int fd);
extern ssize_t shim_fgetxattr(int fd, const char *name, void *value, size_t size);
extern ssize_t shim_flistxattr(int fd, char *list, size_t size);
extern int shim_fsconfig(int fd, unsigned int cmd, const char *key,
 const void *value, int aux);
extern int shim_fsetxattr(int fd, const char *name, const void *value,
 size_t size, int flags);
extern int shim_fsmount(int fd, unsigned int flags, unsigned int ms_flags);
extern int shim_fsopen(const char *fsname, unsigned int flags);
extern int shim_fsync(int fd);
extern int shim_futex_wait(const void *futex, const int val,
 const struct timespec *timeout);
extern int shim_futex_wake(const void *futex, const int n);
extern long shim_getcpu(unsigned *cpu, unsigned *node, void *tcache);
extern int shim_getdents(unsigned int fd, struct shim_linux_dirent *dirp,
 unsigned int count);
extern int shim_getdents64(unsigned int fd, struct shim_linux_dirent64 *dirp,
 unsigned int count);
extern char *shim_getlogin(void);
extern int shim_get_mempolicy(int *mode, unsigned long *nodemask,
 unsigned long maxnode, unsigned long addr, unsigned long flags);
extern int shim_getrandom(void *buff, size_t buflen, unsigned int flags);
extern int shim_getrusage(int who, struct rusage *usage);
extern int shim_gettid(void);
extern ssize_t shim_getxattr(const char *path, const char *name,
 void *value, size_t size);
extern int shim_ioprio_set(int which, int who, int ioprio);
extern int shim_ioprio_get(int which, int who);
extern long shim_kcmp(pid_t pid1, pid_t pid2, int type, unsigned long idx1,
 unsigned long idx2);
extern int shim_klogctl(int type, char *bufp, int len);
extern ssize_t shim_lgetxattr(const char *path, const char *name, void *value,
 size_t size);
extern ssize_t shim_llistxattr(const char *path, char *list, size_t size);
extern int shim_lsetxattr(const char *path, const char *name,
 const void *value, size_t size, int flags);
extern ssize_t shim_listxattr(const char *path, char *list, size_t size);
extern int shim_lookup_dcookie(uint64_t cookie, char *buffer, size_t len);
extern int shim_lremovexattr(const char *path, const char *name);
extern int shim_madvise(void *addr, size_t length, int advice);
extern long shim_mbind(void *addr, unsigned long len,
 int mode, const unsigned long *nodemask,
 unsigned long maxnode, unsigned flags);
extern int shim_membarrier(int cmd, int flags);
extern int shim_memfd_create(const char *name, unsigned int flags);
extern int shim_memfd_secret(unsigned long flags);
extern long shim_migrate_pages(int pid, unsigned long maxnode,
 const unsigned long *old_nodes, const unsigned long *new_nodes);
extern int shim_mincore(void *addr, size_t length, unsigned char *vec);
extern int shim_mlock(const void *addr, size_t len);
extern int shim_mlock2(const void *addr, size_t len, int flags);
extern int shim_mlockall(int flags);
extern int shim_move_mount(int from_dfd, const char *from_pathname,
 int to_dfd, const char *to_pathname, unsigned int flags);
extern long shim_move_pages(int pid, unsigned long count,
 void **pages, const int *nodes, int *status, int flags);
extern int shim_msync(void *addr, size_t length, int flags);
extern int shim_munlock(const void *addr, size_t len);
extern int shim_munlockall(void);
extern int shim_nanosleep_uint64(uint64_t usec);
extern int shim_nice(int inc);
extern time_t shim_time(time_t *tloc);
extern int shim_gettimeofday(struct timeval *tv, struct timezone *tz);
extern int shim_pidfd_getfd(int pidfd, int targetfd, unsigned int flags);
extern int shim_pidfd_open(pid_t pid, unsigned int flags);
extern int shim_pidfd_send_signal(int pidfd, int sig, siginfo_t *info,
 unsigned int flags);
extern int shim_pkey_alloc(unsigned long flags, unsigned long access_rights);
extern int shim_pkey_free(int pkey);
extern int shim_pkey_mprotect(void *addr, size_t len, int prot, int pkey);
extern int shim_pkey_get(int pkey);
extern int shim_pkey_set(int pkey, unsigned int rights);
extern ssize_t shim_process_madvise(int pidfd, const struct iovec *iovec,
 unsigned long vlen, int advice, unsigned int flags);
extern ssize_t shim_readlink(const char *pathname, char *buf, size_t bufsiz);
extern int shim_reboot(int magic, int magic2, int cmd, void *arg);
extern int shim_removexattr(const char *path, const char *name);
extern void *shim_sbrk(intptr_t increment);
extern int shim_sched_getattr(pid_t pid, struct shim_sched_attr *attr,
 unsigned int size, unsigned int flags);
extern int shim_sched_setattr(pid_t pid, struct shim_sched_attr *attr,
 unsigned int flags);
extern long shim_sgetmask(void);
extern long shim_ssetmask(long newmask);
extern int shim_stime(const time_t *t);
extern int shim_sched_yield(void);
extern int shim_set_mempolicy(int mode, unsigned long *nodemask,
 unsigned long maxnode);
extern int shim_seccomp(unsigned int operation, unsigned int flags, void *args);
extern ssize_t shim_statx(int dfd, const char *filename, unsigned int flags,
 unsigned int mask, struct shim_statx *buffer);
extern int shim_setxattr(const char *path, const char *name, const void *value,
 size_t size, int flags);
extern size_t shim_strlcat(char *dst, const char *src, size_t len);
extern size_t shim_strlcpy(char *dst, const char *src, size_t len);
extern int shim_sync_file_range(int fd, shim_off64_t offset,
 shim_off64_t nbytes, unsigned int flags);
extern int shim_sysfs(int option, ...);
extern int shim_tgkill(int tgid, int tid, int sig);
extern int shim_tkill(int tid, int sig);
extern int shim_fremovexattr(int fd, const char *name);
extern int shim_unshare(int flags);
extern int shim_userfaultfd(int flags);
extern int shim_usleep(uint64_t usec);
extern int shim_usleep_interruptible(uint64_t usec);
extern int shim_ustat(dev_t dev, struct shim_ustat *ubuf);
extern int shim_vhangup(void);
extern pid_t shim_waitpid(pid_t pid, int *wstatus, int options);
extern pid_t shim_wait(int *wstatus);
extern pid_t shim_wait3(int *wstatus, int options, struct rusage *rusage);
extern pid_t shim_wait4(pid_t pid, int *wstatus, int options, struct rusage *rusage);
# 26 "stress-ng.c" 2

typedef struct {
 const int opt;
 const uint64_t opt_flag;
} stress_opt_flag_t;


static stress_stressor_t *stressors_head, *stressors_tail;
stress_stressor_t *g_stressor_current;


static volatile 
# 37 "stress-ng.c" 3 4
               _Bool 
# 37 "stress-ng.c"
                    wait_flag = 
# 37 "stress-ng.c" 3 4
                                1
# 37 "stress-ng.c"
                                    ;
static int terminate_signum;


int32_t g_opt_sequential = (0);
int32_t g_opt_parallel = (0);
uint64_t g_opt_timeout = (~0ULL);
uint64_t g_opt_flags = (0x00000000000001ULL) | (0x00000000000002ULL) | (0x00000000000800ULL);
volatile 
# 45 "stress-ng.c" 3 4
        _Bool 
# 45 "stress-ng.c"
             g_keep_stressing_flag = 
# 45 "stress-ng.c" 3 4
                                     1
# 45 "stress-ng.c"
                                         ;
volatile 
# 46 "stress-ng.c" 3 4
        _Bool 
# 46 "stress-ng.c"
             g_caught_sigint = 
# 46 "stress-ng.c" 3 4
                               0
# 46 "stress-ng.c"
                                    ;
pid_t g_pgrp;
const char *g_app_name = "stress-ng";
stress_shared_t *g_shared;
jmp_buf g_error_env;
stress_put_val_t g_put_val;

# 52 "stress-ng.c" 3 4
_Bool 
# 52 "stress-ng.c"
    g_unsupported = 
# 52 "stress-ng.c" 3 4
                    0
# 52 "stress-ng.c"
                         ;




static const stress_opt_flag_t opt_flags[] = {
 { OPT_abort, (0x00000200000000ULL) },
 { OPT_aggressive, ((0x00000000000800ULL) | (0x00000000001000ULL) | (0x00000000004000ULL) | (0x00000000008000ULL) | (0x00000000010000ULL) | (0x00000000200000ULL) | (0x00000010000000ULL)) },
 { OPT_cpu_online_all, (0x00000400000000ULL) },
 { OPT_dry_run, (0x00000000000010ULL) },
 { OPT_ftrace, (0x00002000000000ULL) },
 { OPT_ignite_cpu, (0x00000010000000ULL) },
 { OPT_keep_name, (0x00000000000100ULL) },
 { OPT_log_brief, (0x00000002000000ULL) },
 { OPT_maximize, (0x00000000080000ULL) },
 { OPT_metrics, (0x00000000000020ULL) },
 { OPT_metrics_brief, (0x00000000000200ULL) | (0x00000000000020ULL) },
 { OPT_minimize, (0x00000000040000ULL) },
 { OPT_no_rand_seed, (0x00000040000000ULL) },
 { OPT_oomable, (0x00000100000000ULL) },
 { OPT_page_in, (0x00000000001000ULL) },
 { OPT_pathological, (0x00000020000000ULL) },


 { OPT_perf_stats, (0x00000001000000ULL) },

 { OPT_sock_nodelay, (0x00000008000000ULL) },

 { OPT_syslog, (0x00000000100000ULL) },

 { OPT_thrash, (0x00000080000000ULL) },
 { OPT_times, (0x00000000002000ULL) },
 { OPT_timestamp, (0x00000800000000ULL) },
 { OPT_thermal_zones, (0x00000004000000ULL) },
 { OPT_verbose, ((0x00000000000001ULL) | (0x00000000000002ULL) | (0x00000000000004ULL) | (0x00000000000008ULL)) },
 { OPT_verify, (0x00000000000400ULL) | (0x00000000000008ULL) },
};






static const int terminate_signals[] = {


 
# 98 "stress-ng.c" 3 4
1
# 98 "stress-ng.c"
      ,


 
# 101 "stress-ng.c" 3 4
2
# 101 "stress-ng.c"
      ,


 
# 104 "stress-ng.c" 3 4
4
# 104 "stress-ng.c"
      ,


 
# 107 "stress-ng.c" 3 4
3
# 107 "stress-ng.c"
       ,


 
# 110 "stress-ng.c" 3 4
6
# 110 "stress-ng.c"
       ,


 
# 113 "stress-ng.c" 3 4
8
# 113 "stress-ng.c"
      ,


 
# 116 "stress-ng.c" 3 4
15
# 116 "stress-ng.c"
       ,


 
# 119 "stress-ng.c" 3 4
24
# 119 "stress-ng.c"
       ,


 
# 122 "stress-ng.c" 3 4
25
# 122 "stress-ng.c"
       ,



 
# 126 "stress-ng.c" 3 4
6
# 126 "stress-ng.c"
      ,


 
# 129 "stress-ng.c" 3 4
16
# 129 "stress-ng.c"
         ,


 
# 132 "stress-ng.c" 3 4
30
# 132 "stress-ng.c"
      ,





 
# 138 "stress-ng.c" 3 4
26
# 138 "stress-ng.c"
         ,

};

static const int ignore_signals[] = {

 
# 144 "stress-ng.c" 3 4
10
# 144 "stress-ng.c"
       ,


 
# 147 "stress-ng.c" 3 4
12
# 147 "stress-ng.c"
       ,


 
# 150 "stress-ng.c" 3 4
22
# 150 "stress-ng.c"
       ,


 
# 153 "stress-ng.c" 3 4
21
# 153 "stress-ng.c"
       ,


 
# 156 "stress-ng.c" 3 4
28
# 156 "stress-ng.c"
        ,

};







extern stressor_info_t stress_access_info; extern stressor_info_t stress_af_alg_info; extern stressor_info_t stress_affinity_info; extern stressor_info_t stress_aio_info; extern stressor_info_t stress_aiol_info; extern stressor_info_t stress_apparmor_info; extern stressor_info_t stress_atomic_info; extern stressor_info_t stress_bad_altstack_info; extern stressor_info_t stress_bad_ioctl_info; extern stressor_info_t stress_bigheap_info; extern stressor_info_t stress_bind_mount_info; extern stressor_info_t stress_binderfs_info; extern stressor_info_t stress_branch_info; extern stressor_info_t stress_brk_info; extern stressor_info_t stress_bsearch_info; extern stressor_info_t stress_cache_info; extern stressor_info_t stress_cap_info; extern stressor_info_t stress_chattr_info; extern stressor_info_t stress_chdir_info; extern stressor_info_t stress_chmod_info; extern stressor_info_t stress_chown_info; extern stressor_info_t stress_chroot_info; extern stressor_info_t stress_clock_info; extern stressor_info_t stress_clone_info; extern stressor_info_t stress_close_info; extern stressor_info_t stress_context_info; extern stressor_info_t stress_copy_file_info; extern stressor_info_t stress_cpu_info; extern stressor_info_t stress_cpu_online_info; extern stressor_info_t stress_crypt_info; extern stressor_info_t stress_cyclic_info; extern stressor_info_t stress_daemon_info; extern stressor_info_t stress_dccp_info; extern stressor_info_t stress_dentry_info; extern stressor_info_t stress_dev_info; extern stressor_info_t stress_dev_shm_info; extern stressor_info_t stress_dir_info; extern stressor_info_t stress_dirdeep_info; extern stressor_info_t stress_dnotify_info; extern stressor_info_t stress_dup_info; extern stressor_info_t stress_dynlib_info; extern stressor_info_t stress_efivar_info; extern stressor_info_t stress_enosys_info; extern stressor_info_t stress_env_info; extern stressor_info_t stress_epoll_info; extern stressor_info_t stress_eventfd_info; extern stressor_info_t stress_exec_info; extern stressor_info_t stress_fallocate_info; extern stressor_info_t stress_fanotify_info; extern stressor_info_t stress_fault_info; extern stressor_info_t stress_fcntl_info; extern stressor_info_t stress_fiemap_info; extern stressor_info_t stress_fifo_info; extern stressor_info_t stress_file_ioctl_info; extern stressor_info_t stress_filename_info; extern stressor_info_t stress_flock_info; extern stressor_info_t stress_fork_info; extern stressor_info_t stress_fp_error_info; extern stressor_info_t stress_fstat_info; extern stressor_info_t stress_full_info; extern stressor_info_t stress_funccall_info; extern stressor_info_t stress_funcret_info; extern stressor_info_t stress_futex_info; extern stressor_info_t stress_get_info; extern stressor_info_t stress_getdent_info; extern stressor_info_t stress_getrandom_info; extern stressor_info_t stress_handle_info; extern stressor_info_t stress_hdd_info; extern stressor_info_t stress_heapsort_info; extern stressor_info_t stress_hrtimers_info; extern stressor_info_t stress_hsearch_info; extern stressor_info_t stress_icache_info; extern stressor_info_t stress_icmp_flood_info; extern stressor_info_t stress_idle_page_info; extern stressor_info_t stress_inode_flags_info; extern stressor_info_t stress_inotify_info; extern stressor_info_t stress_io_info; extern stressor_info_t stress_iomix_info; extern stressor_info_t stress_ioport_info; extern stressor_info_t stress_ioprio_info; extern stressor_info_t stress_io_uring_info; extern stressor_info_t stress_ipsec_mb_info; extern stressor_info_t stress_itimer_info; extern stressor_info_t stress_judy_info; extern stressor_info_t stress_kcmp_info; extern stressor_info_t stress_key_info; extern stressor_info_t stress_kill_info; extern stressor_info_t stress_klog_info; extern stressor_info_t stress_l1cache_info; extern stressor_info_t stress_lease_info; extern stressor_info_t stress_link_info; extern stressor_info_t stress_locka_info; extern stressor_info_t stress_lockbus_info; extern stressor_info_t stress_lockf_info; extern stressor_info_t stress_lockofd_info; extern stressor_info_t stress_longjmp_info; extern stressor_info_t stress_loop_info; extern stressor_info_t stress_lsearch_info; extern stressor_info_t stress_madvise_info; extern stressor_info_t stress_malloc_info; extern stressor_info_t stress_matrix_info; extern stressor_info_t stress_matrix_3d_info; extern stressor_info_t stress_mcontend_info; extern stressor_info_t stress_membarrier_info; extern stressor_info_t stress_memcpy_info; extern stressor_info_t stress_memfd_info; extern stressor_info_t stress_memhotplug_info; extern stressor_info_t stress_memrate_info; extern stressor_info_t stress_memthrash_info; extern stressor_info_t stress_mergesort_info; extern stressor_info_t stress_mincore_info; extern stressor_info_t stress_mknod_info; extern stressor_info_t stress_mlock_info; extern stressor_info_t stress_mlockmany_info; extern stressor_info_t stress_mmap_info; extern stressor_info_t stress_mmapaddr_info; extern stressor_info_t stress_mmapfixed_info; extern stressor_info_t stress_mmapfork_info; extern stressor_info_t stress_mmapmany_info; extern stressor_info_t stress_mq_info; extern stressor_info_t stress_mremap_info; extern stressor_info_t stress_msg_info; extern stressor_info_t stress_msync_info; extern stressor_info_t stress_nanosleep_info; extern stressor_info_t stress_netdev_info; extern stressor_info_t stress_netlink_proc_info; extern stressor_info_t stress_netlink_task_info; extern stressor_info_t stress_nice_info; extern stressor_info_t stress_nop_info; extern stressor_info_t stress_null_info; extern stressor_info_t stress_numa_info; extern stressor_info_t stress_oom_pipe_info; extern stressor_info_t stress_opcode_info; extern stressor_info_t stress_open_info; extern stressor_info_t stress_personality_info; extern stressor_info_t stress_physpage_info; extern stressor_info_t stress_pidfd_info; extern stressor_info_t stress_ping_sock_info; extern stressor_info_t stress_pipe_info; extern stressor_info_t stress_pipeherd_info; extern stressor_info_t stress_pkey_info; extern stressor_info_t stress_poll_info; extern stressor_info_t stress_prctl_info; extern stressor_info_t stress_procfs_info; extern stressor_info_t stress_pthread_info; extern stressor_info_t stress_ptrace_info; extern stressor_info_t stress_pty_info; extern stressor_info_t stress_qsort_info; extern stressor_info_t stress_quota_info; extern stressor_info_t stress_radixsort_info; extern stressor_info_t stress_ramfs_info; extern stressor_info_t stress_rawdev_info; extern stressor_info_t stress_rawpkt_info; extern stressor_info_t stress_rawsock_info; extern stressor_info_t stress_rawudp_info; extern stressor_info_t stress_rdrand_info; extern stressor_info_t stress_readahead_info; extern stressor_info_t stress_reboot_info; extern stressor_info_t stress_remap_info; extern stressor_info_t stress_rename_info; extern stressor_info_t stress_resources_info; extern stressor_info_t stress_revio_info; extern stressor_info_t stress_rlimit_info; extern stressor_info_t stress_rmap_info; extern stressor_info_t stress_rseq_info; extern stressor_info_t stress_rtc_info; extern stressor_info_t stress_schedpolicy_info; extern stressor_info_t stress_sctp_info; extern stressor_info_t stress_seal_info; extern stressor_info_t stress_seccomp_info; extern stressor_info_t stress_secretmem_info; extern stressor_info_t stress_seek_info; extern stressor_info_t stress_sem_info; extern stressor_info_t stress_sem_sysv_info; extern stressor_info_t stress_sendfile_info; extern stressor_info_t stress_session_info; extern stressor_info_t stress_set_info; extern stressor_info_t stress_shellsort_info; extern stressor_info_t stress_shm_info; extern stressor_info_t stress_shm_sysv_info; extern stressor_info_t stress_sigabrt_info; extern stressor_info_t stress_sigchld_info; extern stressor_info_t stress_sigfd_info; extern stressor_info_t stress_sigfpe_info; extern stressor_info_t stress_sigio_info; extern stressor_info_t stress_signal_info; extern stressor_info_t stress_sigpending_info; extern stressor_info_t stress_sigpipe_info; extern stressor_info_t stress_sigq_info; extern stressor_info_t stress_sigrt_info; extern stressor_info_t stress_sigsegv_info; extern stressor_info_t stress_sigsuspend_info; extern stressor_info_t stress_sigtrap_info; extern stressor_info_t stress_skiplist_info; extern stressor_info_t stress_sleep_info; extern stressor_info_t stress_sock_info; extern stressor_info_t stress_sockabuse_info; extern stressor_info_t stress_sockdiag_info; extern stressor_info_t stress_sockfd_info; extern stressor_info_t stress_sockpair_info; extern stressor_info_t stress_sockmany_info; extern stressor_info_t stress_softlockup_info; extern stressor_info_t stress_spawn_info; extern stressor_info_t stress_splice_info; extern stressor_info_t stress_stack_info; extern stressor_info_t stress_stackmmap_info; extern stressor_info_t stress_str_info; extern stressor_info_t stress_stream_info; extern stressor_info_t stress_swap_info; extern stressor_info_t stress_switch_info; extern stressor_info_t stress_symlink_info; extern stressor_info_t stress_sync_file_info; extern stressor_info_t stress_sysbadaddr_info; extern stressor_info_t stress_sysinfo_info; extern stressor_info_t stress_sysinval_info; extern stressor_info_t stress_sysfs_info; extern stressor_info_t stress_tee_info; extern stressor_info_t stress_timer_info; extern stressor_info_t stress_timerfd_info; extern stressor_info_t stress_tlb_shootdown_info; extern stressor_info_t stress_tmpfs_info; extern stressor_info_t stress_tree_info; extern stressor_info_t stress_tsc_info; extern stressor_info_t stress_tsearch_info; extern stressor_info_t stress_tun_info; extern stressor_info_t stress_udp_info; extern stressor_info_t stress_udp_flood_info; extern stressor_info_t stress_unshare_info; extern stressor_info_t stress_uprobe_info; extern stressor_info_t stress_urandom_info; extern stressor_info_t stress_userfaultfd_info; extern stressor_info_t stress_utime_info; extern stressor_info_t stress_vdso_info; extern stressor_info_t stress_vecmath_info; extern stressor_info_t stress_verity_info; extern stressor_info_t stress_vfork_info; extern stressor_info_t stress_vforkmany_info; extern stressor_info_t stress_vm_info; extern stressor_info_t stress_vm_addr_info; extern stressor_info_t stress_vm_rw_info; extern stressor_info_t stress_vm_segv_info; extern stressor_info_t stress_vm_splice_info; extern stressor_info_t stress_wait_info; extern stressor_info_t stress_watchdog_info; extern stressor_info_t stress_wcs_info; extern stressor_info_t stress_x86syscall_info; extern stressor_info_t stress_xattr_info; extern stressor_info_t stress_yield_info; extern stressor_info_t stress_zero_info; extern stressor_info_t stress_zlib_info; extern stressor_info_t stress_zombie_info;
# 183 "stress-ng.c"
static const stress_t stressors[] = {
 { &stress_access_info, STRESS_access, OPT_access, OPT_access_ops, "access" }, { &stress_af_alg_info, STRESS_af_alg, OPT_af_alg, OPT_af_alg_ops, "af_alg" }, { &stress_affinity_info, STRESS_affinity, OPT_affinity, OPT_affinity_ops, "affinity" }, { &stress_aio_info, STRESS_aio, OPT_aio, OPT_aio_ops, "aio" }, { &stress_aiol_info, STRESS_aiol, OPT_aiol, OPT_aiol_ops, "aiol" }, { &stress_apparmor_info, STRESS_apparmor, OPT_apparmor, OPT_apparmor_ops, "apparmor" }, { &stress_atomic_info, STRESS_atomic, OPT_atomic, OPT_atomic_ops, "atomic" }, { &stress_bad_altstack_info, STRESS_bad_altstack, OPT_bad_altstack, OPT_bad_altstack_ops, "bad_altstack" }, { &stress_bad_ioctl_info, STRESS_bad_ioctl, OPT_bad_ioctl, OPT_bad_ioctl_ops, "bad_ioctl" }, { &stress_bigheap_info, STRESS_bigheap, OPT_bigheap, OPT_bigheap_ops, "bigheap" }, { &stress_bind_mount_info, STRESS_bind_mount, OPT_bind_mount, OPT_bind_mount_ops, "bind_mount" }, { &stress_binderfs_info, STRESS_binderfs, OPT_binderfs, OPT_binderfs_ops, "binderfs" }, { &stress_branch_info, STRESS_branch, OPT_branch, OPT_branch_ops, "branch" }, { &stress_brk_info, STRESS_brk, OPT_brk, OPT_brk_ops, "brk" }, { &stress_bsearch_info, STRESS_bsearch, OPT_bsearch, OPT_bsearch_ops, "bsearch" }, { &stress_cache_info, STRESS_cache, OPT_cache, OPT_cache_ops, "cache" }, { &stress_cap_info, STRESS_cap, OPT_cap, OPT_cap_ops, "cap" }, { &stress_chattr_info, STRESS_chattr, OPT_chattr, OPT_chattr_ops, "chattr" }, { &stress_chdir_info, STRESS_chdir, OPT_chdir, OPT_chdir_ops, "chdir" }, { &stress_chmod_info, STRESS_chmod, OPT_chmod, OPT_chmod_ops, "chmod" }, { &stress_chown_info, STRESS_chown, OPT_chown, OPT_chown_ops, "chown" }, { &stress_chroot_info, STRESS_chroot, OPT_chroot, OPT_chroot_ops, "chroot" }, { &stress_clock_info, STRESS_clock, OPT_clock, OPT_clock_ops, "clock" }, { &stress_clone_info, STRESS_clone, OPT_clone, OPT_clone_ops, "clone" }, { &stress_close_info, STRESS_close, OPT_close, OPT_close_ops, "close" }, { &stress_context_info, STRESS_context, OPT_context, OPT_context_ops, "context" }, { &stress_copy_file_info, STRESS_copy_file, OPT_copy_file, OPT_copy_file_ops, "copy_file" }, { &stress_cpu_info, STRESS_cpu, OPT_cpu, OPT_cpu_ops, "cpu" }, { &stress_cpu_online_info, STRESS_cpu_online, OPT_cpu_online, OPT_cpu_online_ops, "cpu_online" }, { &stress_crypt_info, STRESS_crypt, OPT_crypt, OPT_crypt_ops, "crypt" }, { &stress_cyclic_info, STRESS_cyclic, OPT_cyclic, OPT_cyclic_ops, "cyclic" }, { &stress_daemon_info, STRESS_daemon, OPT_daemon, OPT_daemon_ops, "daemon" }, { &stress_dccp_info, STRESS_dccp, OPT_dccp, OPT_dccp_ops, "dccp" }, { &stress_dentry_info, STRESS_dentry, OPT_dentry, OPT_dentry_ops, "dentry" }, { &stress_dev_info, STRESS_dev, OPT_dev, OPT_dev_ops, "dev" }, { &stress_dev_shm_info, STRESS_dev_shm, OPT_dev_shm, OPT_dev_shm_ops, "dev_shm" }, { &stress_dir_info, STRESS_dir, OPT_dir, OPT_dir_ops, "dir" }, { &stress_dirdeep_info, STRESS_dirdeep, OPT_dirdeep, OPT_dirdeep_ops, "dirdeep" }, { &stress_dnotify_info, STRESS_dnotify, OPT_dnotify, OPT_dnotify_ops, "dnotify" }, { &stress_dup_info, STRESS_dup, OPT_dup, OPT_dup_ops, "dup" }, { &stress_dynlib_info, STRESS_dynlib, OPT_dynlib, OPT_dynlib_ops, "dynlib" }, { &stress_efivar_info, STRESS_efivar, OPT_efivar, OPT_efivar_ops, "efivar" }, { &stress_enosys_info, STRESS_enosys, OPT_enosys, OPT_enosys_ops, "enosys" }, { &stress_env_info, STRESS_env, OPT_env, OPT_env_ops, "env" }, { &stress_epoll_info, STRESS_epoll, OPT_epoll, OPT_epoll_ops, "epoll" }, { &stress_eventfd_info, STRESS_eventfd, OPT_eventfd, OPT_eventfd_ops, "eventfd" }, { &stress_exec_info, STRESS_exec, OPT_exec, OPT_exec_ops, "exec" }, { &stress_fallocate_info, STRESS_fallocate, OPT_fallocate, OPT_fallocate_ops, "fallocate" }, { &stress_fanotify_info, STRESS_fanotify, OPT_fanotify, OPT_fanotify_ops, "fanotify" }, { &stress_fault_info, STRESS_fault, OPT_fault, OPT_fault_ops, "fault" }, { &stress_fcntl_info, STRESS_fcntl, OPT_fcntl, OPT_fcntl_ops, "fcntl" }, { &stress_fiemap_info, STRESS_fiemap, OPT_fiemap, OPT_fiemap_ops, "fiemap" }, { &stress_fifo_info, STRESS_fifo, OPT_fifo, OPT_fifo_ops, "fifo" }, { &stress_file_ioctl_info, STRESS_file_ioctl, OPT_file_ioctl, OPT_file_ioctl_ops, "file_ioctl" }, { &stress_filename_info, STRESS_filename, OPT_filename, OPT_filename_ops, "filename" }, { &stress_flock_info, STRESS_flock, OPT_flock, OPT_flock_ops, "flock" }, { &stress_fork_info, STRESS_fork, OPT_fork, OPT_fork_ops, "fork" }, { &stress_fp_error_info, STRESS_fp_error, OPT_fp_error, OPT_fp_error_ops, "fp_error" }, { &stress_fstat_info, STRESS_fstat, OPT_fstat, OPT_fstat_ops, "fstat" }, { &stress_full_info, STRESS_full, OPT_full, OPT_full_ops, "full" }, { &stress_funccall_info, STRESS_funccall, OPT_funccall, OPT_funccall_ops, "funccall" }, { &stress_funcret_info, STRESS_funcret, OPT_funcret, OPT_funcret_ops, "funcret" }, { &stress_futex_info, STRESS_futex, OPT_futex, OPT_futex_ops, "futex" }, { &stress_get_info, STRESS_get, OPT_get, OPT_get_ops, "get" }, { &stress_getdent_info, STRESS_getdent, OPT_getdent, OPT_getdent_ops, "getdent" }, { &stress_getrandom_info, STRESS_getrandom, OPT_getrandom, OPT_getrandom_ops, "getrandom" }, { &stress_handle_info, STRESS_handle, OPT_handle, OPT_handle_ops, "handle" }, { &stress_hdd_info, STRESS_hdd, OPT_hdd, OPT_hdd_ops, "hdd" }, { &stress_heapsort_info, STRESS_heapsort, OPT_heapsort, OPT_heapsort_ops, "heapsort" }, { &stress_hrtimers_info, STRESS_hrtimers, OPT_hrtimers, OPT_hrtimers_ops, "hrtimers" }, { &stress_hsearch_info, STRESS_hsearch, OPT_hsearch, OPT_hsearch_ops, "hsearch" }, { &stress_icache_info, STRESS_icache, OPT_icache, OPT_icache_ops, "icache" }, { &stress_icmp_flood_info, STRESS_icmp_flood, OPT_icmp_flood, OPT_icmp_flood_ops, "icmp_flood" }, { &stress_idle_page_info, STRESS_idle_page, OPT_idle_page, OPT_idle_page_ops, "idle_page" }, { &stress_inode_flags_info, STRESS_inode_flags, OPT_inode_flags, OPT_inode_flags_ops, "inode_flags" }, { &stress_inotify_info, STRESS_inotify, OPT_inotify, OPT_inotify_ops, "inotify" }, { &stress_io_info, STRESS_io, OPT_io, OPT_io_ops, "io" }, { &stress_iomix_info, STRESS_iomix, OPT_iomix, OPT_iomix_ops, "iomix" }, { &stress_ioport_info, STRESS_ioport, OPT_ioport, OPT_ioport_ops, "ioport" }, { &stress_ioprio_info, STRESS_ioprio, OPT_ioprio, OPT_ioprio_ops, "ioprio" }, { &stress_io_uring_info, STRESS_io_uring, OPT_io_uring, OPT_io_uring_ops, "io_uring" }, { &stress_ipsec_mb_info, STRESS_ipsec_mb, OPT_ipsec_mb, OPT_ipsec_mb_ops, "ipsec_mb" }, { &stress_itimer_info, STRESS_itimer, OPT_itimer, OPT_itimer_ops, "itimer" }, { &stress_judy_info, STRESS_judy, OPT_judy, OPT_judy_ops, "judy" }, { &stress_kcmp_info, STRESS_kcmp, OPT_kcmp, OPT_kcmp_ops, "kcmp" }, { &stress_key_info, STRESS_key, OPT_key, OPT_key_ops, "key" }, { &stress_kill_info, STRESS_kill, OPT_kill, OPT_kill_ops, "kill" }, { &stress_klog_info, STRESS_klog, OPT_klog, OPT_klog_ops, "klog" }, { &stress_l1cache_info, STRESS_l1cache, OPT_l1cache, OPT_l1cache_ops, "l1cache" }, { &stress_lease_info, STRESS_lease, OPT_lease, OPT_lease_ops, "lease" }, { &stress_link_info, STRESS_link, OPT_link, OPT_link_ops, "link" }, { &stress_locka_info, STRESS_locka, OPT_locka, OPT_locka_ops, "locka" }, { &stress_lockbus_info, STRESS_lockbus, OPT_lockbus, OPT_lockbus_ops, "lockbus" }, { &stress_lockf_info, STRESS_lockf, OPT_lockf, OPT_lockf_ops, "lockf" }, { &stress_lockofd_info, STRESS_lockofd, OPT_lockofd, OPT_lockofd_ops, "lockofd" }, { &stress_longjmp_info, STRESS_longjmp, OPT_longjmp, OPT_longjmp_ops, "longjmp" }, { &stress_loop_info, STRESS_loop, OPT_loop, OPT_loop_ops, "loop" }, { &stress_lsearch_info, STRESS_lsearch, OPT_lsearch, OPT_lsearch_ops, "lsearch" }, { &stress_madvise_info, STRESS_madvise, OPT_madvise, OPT_madvise_ops, "madvise" }, { &stress_malloc_info, STRESS_malloc, OPT_malloc, OPT_malloc_ops, "malloc" }, { &stress_matrix_info, STRESS_matrix, OPT_matrix, OPT_matrix_ops, "matrix" }, { &stress_matrix_3d_info, STRESS_matrix_3d, OPT_matrix_3d, OPT_matrix_3d_ops, "matrix_3d" }, { &stress_mcontend_info, STRESS_mcontend, OPT_mcontend, OPT_mcontend_ops, "mcontend" }, { &stress_membarrier_info, STRESS_membarrier, OPT_membarrier, OPT_membarrier_ops, "membarrier" }, { &stress_memcpy_info, STRESS_memcpy, OPT_memcpy, OPT_memcpy_ops, "memcpy" }, { &stress_memfd_info, STRESS_memfd, OPT_memfd, OPT_memfd_ops, "memfd" }, { &stress_memhotplug_info, STRESS_memhotplug, OPT_memhotplug, OPT_memhotplug_ops, "memhotplug" }, { &stress_memrate_info, STRESS_memrate, OPT_memrate, OPT_memrate_ops, "memrate" }, { &stress_memthrash_info, STRESS_memthrash, OPT_memthrash, OPT_memthrash_ops, "memthrash" }, { &stress_mergesort_info, STRESS_mergesort, OPT_mergesort, OPT_mergesort_ops, "mergesort" }, { &stress_mincore_info, STRESS_mincore, OPT_mincore, OPT_mincore_ops, "mincore" }, { &stress_mknod_info, STRESS_mknod, OPT_mknod, OPT_mknod_ops, "mknod" }, { &stress_mlock_info, STRESS_mlock, OPT_mlock, OPT_mlock_ops, "mlock" }, { &stress_mlockmany_info, STRESS_mlockmany, OPT_mlockmany, OPT_mlockmany_ops, "mlockmany" }, { &stress_mmap_info, STRESS_mmap, OPT_mmap, OPT_mmap_ops, "mmap" }, { &stress_mmapaddr_info, STRESS_mmapaddr, OPT_mmapaddr, OPT_mmapaddr_ops, "mmapaddr" }, { &stress_mmapfixed_info, STRESS_mmapfixed, OPT_mmapfixed, OPT_mmapfixed_ops, "mmapfixed" }, { &stress_mmapfork_info, STRESS_mmapfork, OPT_mmapfork, OPT_mmapfork_ops, "mmapfork" }, { &stress_mmapmany_info, STRESS_mmapmany, OPT_mmapmany, OPT_mmapmany_ops, "mmapmany" }, { &stress_mq_info, STRESS_mq, OPT_mq, OPT_mq_ops, "mq" }, { &stress_mremap_info, STRESS_mremap, OPT_mremap, OPT_mremap_ops, "mremap" }, { &stress_msg_info, STRESS_msg, OPT_msg, OPT_msg_ops, "msg" }, { &stress_msync_info, STRESS_msync, OPT_msync, OPT_msync_ops, "msync" }, { &stress_nanosleep_info, STRESS_nanosleep, OPT_nanosleep, OPT_nanosleep_ops, "nanosleep" }, { &stress_netdev_info, STRESS_netdev, OPT_netdev, OPT_netdev_ops, "netdev" }, { &stress_netlink_proc_info, STRESS_netlink_proc, OPT_netlink_proc, OPT_netlink_proc_ops, "netlink_proc" }, { &stress_netlink_task_info, STRESS_netlink_task, OPT_netlink_task, OPT_netlink_task_ops, "netlink_task" }, { &stress_nice_info, STRESS_nice, OPT_nice, OPT_nice_ops, "nice" }, { &stress_nop_info, STRESS_nop, OPT_nop, OPT_nop_ops, "nop" }, { &stress_null_info, STRESS_null, OPT_null, OPT_null_ops, "null" }, { &stress_numa_info, STRESS_numa, OPT_numa, OPT_numa_ops, "numa" }, { &stress_oom_pipe_info, STRESS_oom_pipe, OPT_oom_pipe, OPT_oom_pipe_ops, "oom_pipe" }, { &stress_opcode_info, STRESS_opcode, OPT_opcode, OPT_opcode_ops, "opcode" }, { &stress_open_info, STRESS_open, OPT_open, OPT_open_ops, "open" }, { &stress_personality_info, STRESS_personality, OPT_personality, OPT_personality_ops, "personality" }, { &stress_physpage_info, STRESS_physpage, OPT_physpage, OPT_physpage_ops, "physpage" }, { &stress_pidfd_info, STRESS_pidfd, OPT_pidfd, OPT_pidfd_ops, "pidfd" }, { &stress_ping_sock_info, STRESS_ping_sock, OPT_ping_sock, OPT_ping_sock_ops, "ping_sock" }, { &stress_pipe_info, STRESS_pipe, OPT_pipe, OPT_pipe_ops, "pipe" }, { &stress_pipeherd_info, STRESS_pipeherd, OPT_pipeherd, OPT_pipeherd_ops, "pipeherd" }, { &stress_pkey_info, STRESS_pkey, OPT_pkey, OPT_pkey_ops, "pkey" }, { &stress_poll_info, STRESS_poll, OPT_poll, OPT_poll_ops, "poll" }, { &stress_prctl_info, STRESS_prctl, OPT_prctl, OPT_prctl_ops, "prctl" }, { &stress_procfs_info, STRESS_procfs, OPT_procfs, OPT_procfs_ops, "procfs" }, { &stress_pthread_info, STRESS_pthread, OPT_pthread, OPT_pthread_ops, "pthread" }, { &stress_ptrace_info, STRESS_ptrace, OPT_ptrace, OPT_ptrace_ops, "ptrace" }, { &stress_pty_info, STRESS_pty, OPT_pty, OPT_pty_ops, "pty" }, { &stress_qsort_info, STRESS_qsort, OPT_qsort, OPT_qsort_ops, "qsort" }, { &stress_quota_info, STRESS_quota, OPT_quota, OPT_quota_ops, "quota" }, { &stress_radixsort_info, STRESS_radixsort, OPT_radixsort, OPT_radixsort_ops, "radixsort" }, { &stress_ramfs_info, STRESS_ramfs, OPT_ramfs, OPT_ramfs_ops, "ramfs" }, { &stress_rawdev_info, STRESS_rawdev, OPT_rawdev, OPT_rawdev_ops, "rawdev" }, { &stress_rawpkt_info, STRESS_rawpkt, OPT_rawpkt, OPT_rawpkt_ops, "rawpkt" }, { &stress_rawsock_info, STRESS_rawsock, OPT_rawsock, OPT_rawsock_ops, "rawsock" }, { &stress_rawudp_info, STRESS_rawudp, OPT_rawudp, OPT_rawudp_ops, "rawudp" }, { &stress_rdrand_info, STRESS_rdrand, OPT_rdrand, OPT_rdrand_ops, "rdrand" }, { &stress_readahead_info, STRESS_readahead, OPT_readahead, OPT_readahead_ops, "readahead" }, { &stress_reboot_info, STRESS_reboot, OPT_reboot, OPT_reboot_ops, "reboot" }, { &stress_remap_info, STRESS_remap, OPT_remap, OPT_remap_ops, "remap" }, { &stress_rename_info, STRESS_rename, OPT_rename, OPT_rename_ops, "rename" }, { &stress_resources_info, STRESS_resources, OPT_resources, OPT_resources_ops, "resources" }, { &stress_revio_info, STRESS_revio, OPT_revio, OPT_revio_ops, "revio" }, { &stress_rlimit_info, STRESS_rlimit, OPT_rlimit, OPT_rlimit_ops, "rlimit" }, { &stress_rmap_info, STRESS_rmap, OPT_rmap, OPT_rmap_ops, "rmap" }, { &stress_rseq_info, STRESS_rseq, OPT_rseq, OPT_rseq_ops, "rseq" }, { &stress_rtc_info, STRESS_rtc, OPT_rtc, OPT_rtc_ops, "rtc" }, { &stress_schedpolicy_info, STRESS_schedpolicy, OPT_schedpolicy, OPT_schedpolicy_ops, "schedpolicy" }, { &stress_sctp_info, STRESS_sctp, OPT_sctp, OPT_sctp_ops, "sctp" }, { &stress_seal_info, STRESS_seal, OPT_seal, OPT_seal_ops, "seal" }, { &stress_seccomp_info, STRESS_seccomp, OPT_seccomp, OPT_seccomp_ops, "seccomp" }, { &stress_secretmem_info, STRESS_secretmem, OPT_secretmem, OPT_secretmem_ops, "secretmem" }, { &stress_seek_info, STRESS_seek, OPT_seek, OPT_seek_ops, "seek" }, { &stress_sem_info, STRESS_sem, OPT_sem, OPT_sem_ops, "sem" }, { &stress_sem_sysv_info, STRESS_sem_sysv, OPT_sem_sysv, OPT_sem_sysv_ops, "sem_sysv" }, { &stress_sendfile_info, STRESS_sendfile, OPT_sendfile, OPT_sendfile_ops, "sendfile" }, { &stress_session_info, STRESS_session, OPT_session, OPT_session_ops, "session" }, { &stress_set_info, STRESS_set, OPT_set, OPT_set_ops, "set" }, { &stress_shellsort_info, STRESS_shellsort, OPT_shellsort, OPT_shellsort_ops, "shellsort" }, { &stress_shm_info, STRESS_shm, OPT_shm, OPT_shm_ops, "shm" }, { &stress_shm_sysv_info, STRESS_shm_sysv, OPT_shm_sysv, OPT_shm_sysv_ops, "shm_sysv" }, { &stress_sigabrt_info, STRESS_sigabrt, OPT_sigabrt, OPT_sigabrt_ops, "sigabrt" }, { &stress_sigchld_info, STRESS_sigchld, OPT_sigchld, OPT_sigchld_ops, "sigchld" }, { &stress_sigfd_info, STRESS_sigfd, OPT_sigfd, OPT_sigfd_ops, "sigfd" }, { &stress_sigfpe_info, STRESS_sigfpe, OPT_sigfpe, OPT_sigfpe_ops, "sigfpe" }, { &stress_sigio_info, STRESS_sigio, OPT_sigio, OPT_sigio_ops, "sigio" }, { &stress_signal_info, STRESS_signal, OPT_signal, OPT_signal_ops, "signal" }, { &stress_sigpending_info, STRESS_sigpending, OPT_sigpending, OPT_sigpending_ops, "sigpending" }, { &stress_sigpipe_info, STRESS_sigpipe, OPT_sigpipe, OPT_sigpipe_ops, "sigpipe" }, { &stress_sigq_info, STRESS_sigq, OPT_sigq, OPT_sigq_ops, "sigq" }, { &stress_sigrt_info, STRESS_sigrt, OPT_sigrt, OPT_sigrt_ops, "sigrt" }, { &stress_sigsegv_info, STRESS_sigsegv, OPT_sigsegv, OPT_sigsegv_ops, "sigsegv" }, { &stress_sigsuspend_info, STRESS_sigsuspend, OPT_sigsuspend, OPT_sigsuspend_ops, "sigsuspend" }, { &stress_sigtrap_info, STRESS_sigtrap, OPT_sigtrap, OPT_sigtrap_ops, "sigtrap" }, { &stress_skiplist_info, STRESS_skiplist, OPT_skiplist, OPT_skiplist_ops, "skiplist" }, { &stress_sleep_info, STRESS_sleep, OPT_sleep, OPT_sleep_ops, "sleep" }, { &stress_sock_info, STRESS_sock, OPT_sock, OPT_sock_ops, "sock" }, { &stress_sockabuse_info, STRESS_sockabuse, OPT_sockabuse, OPT_sockabuse_ops, "sockabuse" }, { &stress_sockdiag_info, STRESS_sockdiag, OPT_sockdiag, OPT_sockdiag_ops, "sockdiag" }, { &stress_sockfd_info, STRESS_sockfd, OPT_sockfd, OPT_sockfd_ops, "sockfd" }, { &stress_sockpair_info, STRESS_sockpair, OPT_sockpair, OPT_sockpair_ops, "sockpair" }, { &stress_sockmany_info, STRESS_sockmany, OPT_sockmany, OPT_sockmany_ops, "sockmany" }, { &stress_softlockup_info, STRESS_softlockup, OPT_softlockup, OPT_softlockup_ops, "softlockup" }, { &stress_spawn_info, STRESS_spawn, OPT_spawn, OPT_spawn_ops, "spawn" }, { &stress_splice_info, STRESS_splice, OPT_splice, OPT_splice_ops, "splice" }, { &stress_stack_info, STRESS_stack, OPT_stack, OPT_stack_ops, "stack" }, { &stress_stackmmap_info, STRESS_stackmmap, OPT_stackmmap, OPT_stackmmap_ops, "stackmmap" }, { &stress_str_info, STRESS_str, OPT_str, OPT_str_ops, "str" }, { &stress_stream_info, STRESS_stream, OPT_stream, OPT_stream_ops, "stream" }, { &stress_swap_info, STRESS_swap, OPT_swap, OPT_swap_ops, "swap" }, { &stress_switch_info, STRESS_switch, OPT_switch, OPT_switch_ops, "switch" }, { &stress_symlink_info, STRESS_symlink, OPT_symlink, OPT_symlink_ops, "symlink" }, { &stress_sync_file_info, STRESS_sync_file, OPT_sync_file, OPT_sync_file_ops, "sync_file" }, { &stress_sysbadaddr_info, STRESS_sysbadaddr, OPT_sysbadaddr, OPT_sysbadaddr_ops, "sysbadaddr" }, { &stress_sysinfo_info, STRESS_sysinfo, OPT_sysinfo, OPT_sysinfo_ops, "sysinfo" }, { &stress_sysinval_info, STRESS_sysinval, OPT_sysinval, OPT_sysinval_ops, "sysinval" }, { &stress_sysfs_info, STRESS_sysfs, OPT_sysfs, OPT_sysfs_ops, "sysfs" }, { &stress_tee_info, STRESS_tee, OPT_tee, OPT_tee_ops, "tee" }, { &stress_timer_info, STRESS_timer, OPT_timer, OPT_timer_ops, "timer" }, { &stress_timerfd_info, STRESS_timerfd, OPT_timerfd, OPT_timerfd_ops, "timerfd" }, { &stress_tlb_shootdown_info, STRESS_tlb_shootdown, OPT_tlb_shootdown, OPT_tlb_shootdown_ops, "tlb_shootdown" }, { &stress_tmpfs_info, STRESS_tmpfs, OPT_tmpfs, OPT_tmpfs_ops, "tmpfs" }, { &stress_tree_info, STRESS_tree, OPT_tree, OPT_tree_ops, "tree" }, { &stress_tsc_info, STRESS_tsc, OPT_tsc, OPT_tsc_ops, "tsc" }, { &stress_tsearch_info, STRESS_tsearch, OPT_tsearch, OPT_tsearch_ops, "tsearch" }, { &stress_tun_info, STRESS_tun, OPT_tun, OPT_tun_ops, "tun" }, { &stress_udp_info, STRESS_udp, OPT_udp, OPT_udp_ops, "udp" }, { &stress_udp_flood_info, STRESS_udp_flood, OPT_udp_flood, OPT_udp_flood_ops, "udp_flood" }, { &stress_unshare_info, STRESS_unshare, OPT_unshare, OPT_unshare_ops, "unshare" }, { &stress_uprobe_info, STRESS_uprobe, OPT_uprobe, OPT_uprobe_ops, "uprobe" }, { &stress_urandom_info, STRESS_urandom, OPT_urandom, OPT_urandom_ops, "urandom" }, { &stress_userfaultfd_info, STRESS_userfaultfd, OPT_userfaultfd, OPT_userfaultfd_ops, "userfaultfd" }, { &stress_utime_info, STRESS_utime, OPT_utime, OPT_utime_ops, "utime" }, { &stress_vdso_info, STRESS_vdso, OPT_vdso, OPT_vdso_ops, "vdso" }, { &stress_vecmath_info, STRESS_vecmath, OPT_vecmath, OPT_vecmath_ops, "vecmath" }, { &stress_verity_info, STRESS_verity, OPT_verity, OPT_verity_ops, "verity" }, { &stress_vfork_info, STRESS_vfork, OPT_vfork, OPT_vfork_ops, "vfork" }, { &stress_vforkmany_info, STRESS_vforkmany, OPT_vforkmany, OPT_vforkmany_ops, "vforkmany" }, { &stress_vm_info, STRESS_vm, OPT_vm, OPT_vm_ops, "vm" }, { &stress_vm_addr_info, STRESS_vm_addr, OPT_vm_addr, OPT_vm_addr_ops, "vm_addr" }, { &stress_vm_rw_info, STRESS_vm_rw, OPT_vm_rw, OPT_vm_rw_ops, "vm_rw" }, { &stress_vm_segv_info, STRESS_vm_segv, OPT_vm_segv, OPT_vm_segv_ops, "vm_segv" }, { &stress_vm_splice_info, STRESS_vm_splice, OPT_vm_splice, OPT_vm_splice_ops, "vm_splice" }, { &stress_wait_info, STRESS_wait, OPT_wait, OPT_wait_ops, "wait" }, { &stress_watchdog_info, STRESS_watchdog, OPT_watchdog, OPT_watchdog_ops, "watchdog" }, { &stress_wcs_info, STRESS_wcs, OPT_wcs, OPT_wcs_ops, "wcs" }, { &stress_x86syscall_info, STRESS_x86syscall, OPT_x86syscall, OPT_x86syscall_ops, "x86syscall" }, { &stress_xattr_info, STRESS_xattr, OPT_xattr, OPT_xattr_ops, "xattr" }, { &stress_yield_info, STRESS_yield, OPT_yield, OPT_yield_ops, "yield" }, { &stress_zero_info, STRESS_zero, OPT_zero, OPT_zero_ops, "zero" }, { &stress_zlib_info, STRESS_zlib, OPT_zlib, OPT_zlib_ops, "zlib" }, { &stress_zombie_info, STRESS_zombie, OPT_zombie, OPT_zombie_ops, "zombie" },
 { 
# 185 "stress-ng.c" 3 4
  ((void *)0)
# 185 "stress-ng.c"
      , STRESS_MAX, 0, 0, 
# 185 "stress-ng.c" 3 4
                          ((void *)0) 
# 185 "stress-ng.c"
                               }
};

enum { STRESS_ASSERT_AT_LINE_188 = 1 / !!((sizeof(stressors) / sizeof(stressors[0])) != STRESS_MAX) };




static const stress_class_info_t classes[] = {
 { (0x00000004), "cpu-cache" },
 { (0x00000001), "cpu" },
 { (0x00000800), "device" },
 { (0x00000400), "filesystem" },
 { (0x00000080), "interrupt" },
 { (0x00000008), "io" },
 { (0x00000002), "memory" },
 { (0x00000010), "network" },
 { (0x00000100), "os" },
 { (0x00000200), "pipe" },
 { (0x00000020), "scheduler" },
 { (0x00001000), "security" },
 { (0x00000040), "vm" },
};




static const struct option long_options[] = {
 { "abort", 0, 0, OPT_abort },
 { "access", 1, 0, OPT_access },
 { "access-ops", 1, 0, OPT_access_ops },
 { "af-alg", 1, 0, OPT_af_alg },
 { "af-alg-ops", 1, 0, OPT_af_alg_ops },
 { "af-alg-dump",0, 0, OPT_af_alg_dump },
 { "affinity", 1, 0, OPT_affinity },
 { "affinity-ops",1, 0, OPT_affinity_ops },
 { "affinity-rand",0, 0, OPT_affinity_rand },
 { "aggressive", 0, 0, OPT_aggressive },
 { "aio", 1, 0, OPT_aio },
 { "aio-ops", 1, 0, OPT_aio_ops },
 { "aio-requests",1, 0, OPT_aio_requests },
 { "aiol", 1, 0, OPT_aiol},
 { "aiol-ops", 1, 0, OPT_aiol_ops },
 { "aiol-requests",1, 0, OPT_aiol_requests },
 { "all", 1, 0, OPT_all },
 { "apparmor", 1, 0, OPT_apparmor },
 { "apparmor-ops",1, 0, OPT_apparmor_ops },
 { "atomic", 1, 0, OPT_atomic },
 { "atomic-ops", 1, 0, OPT_atomic_ops },
 { "bad-altstack",1, 0, OPT_bad_altstack },
 { "bad-altstack-ops",1, 0, OPT_bad_altstack_ops },
 { "bad-ioctl",1, 0, OPT_bad_ioctl },
 { "bad-ioctl-ops",1, 0, OPT_bad_ioctl_ops },
 { "backoff", 1, 0, OPT_backoff },
 { "bigheap", 1, 0, OPT_bigheap },
 { "bigheap-ops",1, 0, OPT_bigheap_ops },
 { "bigheap-growth",1, 0, OPT_bigheap_growth },
 { "bind-mount", 1, 0, OPT_bind_mount },
 { "bind-mount-ops",1, 0, OPT_bind_mount_ops },
 { "binderfs", 1, 0, OPT_binderfs },
 { "binderfs-opts",1, 0, OPT_binderfs_ops },
 { "branch", 1, 0, OPT_branch },
 { "branch-ops", 1, 0, OPT_branch_ops },
 { "brk", 1, 0, OPT_brk },
 { "brk-ops", 1, 0, OPT_brk_ops },
 { "brk-mlock",0, 0, OPT_brk_mlock },
 { "brk-notouch",0, 0, OPT_brk_notouch },
 { "bsearch", 1, 0, OPT_bsearch },
 { "bsearch-ops",1, 0, OPT_bsearch_ops },
 { "bsearch-size",1, 0, OPT_bsearch_size },
 { "cache", 1, 0, OPT_cache },
 { "cache-ops", 1, 0, OPT_cache_ops },
 { "cache-prefetch",0, 0, OPT_cache_prefetch },
 { "cache-flush",0, 0, OPT_cache_flush },
 { "cache-fence",0, 0, OPT_cache_fence },
 { "cache-level",1, 0, OPT_cache_level},
 { "cache-sfence",0, 0, OPT_cache_sfence },
 { "cache-ways",1, 0, OPT_cache_ways},
 { "cache-no-affinity",0,0, OPT_cache_no_affinity },
 { "cap", 1, 0, OPT_cap },
 { "cap-ops", 1, 0, OPT_cap_ops },
 { "chattr", 1, 0, OPT_chattr },
 { "chattr-ops", 1, 0, OPT_chattr_ops },
 { "chdir", 1, 0, OPT_chdir },
 { "chdir-ops", 1, 0, OPT_chdir_ops },
 { "chdir-dirs", 1, 0, OPT_chdir_dirs },
 { "chmod", 1, 0, OPT_chmod },
 { "chmod-ops", 1, 0, OPT_chmod_ops },
 { "chown", 1, 0, OPT_chown},
 { "chown-ops", 1, 0, OPT_chown_ops },
 { "chroot", 1, 0, OPT_chroot},
 { "chroot-ops", 1, 0, OPT_chroot_ops },
 { "class", 1, 0, OPT_class },
 { "clock", 1, 0, OPT_clock },
 { "clock-ops", 1, 0, OPT_clock_ops },
 { "clone", 1, 0, OPT_clone },
 { "clone-ops", 1, 0, OPT_clone_ops },
 { "clone-max", 1, 0, OPT_clone_max },
 { "close", 1, 0, OPT_close },
 { "close-ops", 1, 0, OPT_close_ops },
 { "context", 1, 0, OPT_context },
 { "context-ops",1, 0, OPT_context_ops },
 { "copy-file", 1, 0, OPT_copy_file },
 { "copy-file-ops", 1, 0, OPT_copy_file_ops },
 { "copy-file-bytes", 1, 0, OPT_copy_file_bytes },
 { "cpu", 1, 0, OPT_cpu },
 { "cpu-ops", 1, 0, OPT_cpu_ops },
 { "cpu-load", 1, 0, OPT_cpu_load },
 { "cpu-load-slice",1, 0, OPT_cpu_load_slice },
 { "cpu-method", 1, 0, OPT_cpu_method },
 { "cpu-online", 1, 0, OPT_cpu_online },
 { "cpu-online-ops",1, 0, OPT_cpu_online_ops },
 { "cpu-online-all", 0, 0, OPT_cpu_online_all },
 { "crypt", 1, 0, OPT_crypt },
 { "crypt-ops", 1, 0, OPT_crypt_ops },
 { "cyclic", 1, 0, OPT_cyclic },
 { "cyclic-dist",1, 0, OPT_cyclic_dist },
 { "cyclic-method",1, 0, OPT_cyclic_method },
 { "cyclic-ops",1, 0, OPT_cyclic_ops },
 { "cyclic-policy",1, 0, OPT_cyclic_policy },
 { "cyclic-prio",1, 0, OPT_cyclic_prio },
 { "cyclic-sleep",1, 0, OPT_cyclic_sleep },
 { "daemon", 1, 0, OPT_daemon },
 { "daemon-ops", 1, 0, OPT_daemon_ops },
 { "dccp", 1, 0, OPT_dccp },
 { "dccp-domain",1, 0, OPT_dccp_domain },
 { "dccp-ops", 1, 0, OPT_dccp_ops },
 { "dccp-opts", 1, 0, OPT_dccp_opts },
 { "dccp-port", 1, 0, OPT_dccp_port },
 { "dentry", 1, 0, OPT_dentry },
 { "dentry-ops", 1, 0, OPT_dentry_ops },
 { "dentries", 1, 0, OPT_dentries },
 { "dentry-order",1, 0, OPT_dentry_order },
 { "dev", 1, 0, OPT_dev },
 { "dev-ops", 1, 0, OPT_dev_ops },
 { "dev-file", 1, 0, OPT_dev_file },
 { "dev-shm", 1, 0, OPT_dev_shm },
 { "dev-shm-ops",1, 0, OPT_dev_shm_ops },
 { "dir", 1, 0, OPT_dir },
 { "dir-ops", 1, 0, OPT_dir_ops },
 { "dir-dirs", 1, 0, OPT_dir_dirs },
 { "dirdeep", 1, 0, OPT_dirdeep },
 { "dirdeep-ops",1, 0, OPT_dirdeep_ops },
 { "dirdeep-dirs",1, 0, OPT_dirdeep_dirs },
 { "dirdeep-inodes",1, 0, OPT_dirdeep_inodes },
 { "dry-run", 0, 0, OPT_dry_run },
 { "dnotify", 1, 0, OPT_dnotify },
 { "dnotify-ops",1, 0, OPT_dnotify_ops },
 { "dup", 1, 0, OPT_dup },
 { "dup-ops", 1, 0, OPT_dup_ops },
 { "dynlib", 1, 0, OPT_dynlib },
 { "dyblib-ops", 1, 0, OPT_dynlib_ops },
 { "efivar", 1, 0, OPT_efivar },
 { "efivar-ops", 1, 0, OPT_efivar_ops },
 { "enosys", 1, 0, OPT_enosys },
 { "enosys-ops", 1, 0, OPT_enosys_ops },
 { "env", 1, 0, OPT_env },
 { "env-ops", 1, 0, OPT_env_ops },
 { "epoll", 1, 0, OPT_epoll },
 { "epoll-ops", 1, 0, OPT_epoll_ops },
 { "epoll-port", 1, 0, OPT_epoll_port },
 { "epoll-domain",1, 0, OPT_epoll_domain },
 { "eventfd", 1, 0, OPT_eventfd },
 { "eventfd-ops",1, 0, OPT_eventfd_ops },
 { "eventfd-nonblock",0, 0, OPT_eventfd_nonblock },
 { "exclude", 1, 0, OPT_exclude },
 { "exec", 1, 0, OPT_exec },
 { "exec-ops", 1, 0, OPT_exec_ops },
 { "exec-max", 1, 0, OPT_exec_max },
 { "fallocate", 1, 0, OPT_fallocate },
 { "fallocate-ops",1, 0, OPT_fallocate_ops },
 { "fallocate-bytes",1, 0, OPT_fallocate_bytes },
 { "fault", 1, 0, OPT_fault },
 { "fault-ops", 1, 0, OPT_fault_ops },
 { "fcntl", 1, 0, OPT_fcntl},
 { "fcntl-ops", 1, 0, OPT_fcntl_ops },
 { "fiemap", 1, 0, OPT_fiemap },
 { "fiemap-ops", 1, 0, OPT_fiemap_ops },
 { "fiemap-bytes",1, 0, OPT_fiemap_bytes },
 { "fifo", 1, 0, OPT_fifo },
 { "fifo-ops", 1, 0, OPT_fifo_ops },
 { "fifo-readers",1, 0, OPT_fifo_readers },
 { "file-ioctl", 1, 0, OPT_file_ioctl },
 { "file-ioctl-ops",1, 0, OPT_file_ioctl_ops },
 { "filename", 1, 0, OPT_filename },
 { "filename-ops",1, 0, OPT_filename_ops },
 { "filename-opts",1, 0, OPT_filename_opts },
 { "flock", 1, 0, OPT_flock },
 { "flock-ops", 1, 0, OPT_flock_ops },
 { "fanotify", 1, 0, OPT_fanotify },
 { "fanotify-ops",1, 0, OPT_fanotify_ops },
 { "fork", 1, 0, OPT_fork },
 { "fork-ops", 1, 0, OPT_fork_ops },
 { "fork-max", 1, 0, OPT_fork_max },
 { "fp-error", 1, 0, OPT_fp_error},
 { "fp-error-ops",1, 0, OPT_fp_error_ops },
 { "fstat", 1, 0, OPT_fstat },
 { "fstat-ops", 1, 0, OPT_fstat_ops },
 { "fstat-dir", 1, 0, OPT_fstat_dir },
 { "ftrace", 0, 0, OPT_ftrace },
 { "full", 1, 0, OPT_full },
 { "full-ops", 1, 0, OPT_full_ops },
 { "funccall", 1, 0, OPT_funccall },
 { "funccall-ops",1, 0, OPT_funccall_ops },
 { "funccall-method",1, 0, OPT_funccall_method },
 { "funcret", 1, 0, OPT_funcret },
 { "funcret-ops",1, 0, OPT_funcret_ops },
 { "funcret-method",1, 0, OPT_funcret_method },
 { "futex", 1, 0, OPT_futex },
 { "futex-ops", 1, 0, OPT_futex_ops },
 { "get", 1, 0, OPT_get },
 { "get-ops", 1, 0, OPT_get_ops },
 { "getrandom", 1, 0, OPT_getrandom },
 { "getrandom-ops",1, 0, OPT_getrandom_ops },
 { "getdent", 1, 0, OPT_getdent },
 { "getdent-ops",1, 0, OPT_getdent_ops },
 { "handle", 1, 0, OPT_handle },
 { "handle-ops", 1, 0, OPT_handle_ops },
 { "hdd", 1, 0, OPT_hdd },
 { "hdd-ops", 1, 0, OPT_hdd_ops },
 { "hdd-bytes", 1, 0, OPT_hdd_bytes },
 { "hdd-write-size", 1, 0, OPT_hdd_write_size },
 { "hdd-opts", 1, 0, OPT_hdd_opts },
 { "heapsort", 1, 0, OPT_heapsort },
 { "heapsort-ops",1, 0, OPT_heapsort_ops },
 { "heapsort-size",1, 0, OPT_heapsort_integers },
 { "hrtimers", 1, 0, OPT_hrtimers },
 { "hrtimers-ops",1, 0, OPT_hrtimers_ops },
 { "help", 0, 0, OPT_help },
 { "hsearch", 1, 0, OPT_hsearch },
 { "hsearch-ops",1, 0, OPT_hsearch_ops },
 { "hsearch-size",1, 0, OPT_hsearch_size },
 { "icache", 1, 0, OPT_icache },
 { "icache-ops", 1, 0, OPT_icache_ops },
 { "icmp-flood", 1, 0, OPT_icmp_flood },
 { "icmp-flood-ops",1, 0, OPT_icmp_flood_ops },
 { "idle-page", 1, 0, OPT_idle_page },
 { "idle-page-ops",1, 0, OPT_idle_page_ops },
 { "ignite-cpu", 0, 0, OPT_ignite_cpu },
 { "inode-flags",1, 0, OPT_inode_flags },
 { "inode-flags-ops",1, 0, OPT_inode_flags_ops },
 { "inotify", 1, 0, OPT_inotify },
 { "inotify-ops",1, 0, OPT_inotify_ops },
 { "io", 1, 0, OPT_io },
 { "io-ops", 1, 0, OPT_io_ops },
 { "iomix", 1, 0, OPT_iomix },
 { "iomix-bytes",1, 0, OPT_iomix_bytes },
 { "iomix-ops", 1, 0, OPT_iomix_ops },
 { "ionice-class",1, 0, OPT_ionice_class },
 { "ionice-level",1, 0, OPT_ionice_level },
 { "ioport", 1, 0, OPT_ioport },
 { "ioport-ops", 1, 0, OPT_ioport_ops },
 { "ioport-opts",1, 0, OPT_ioport_opts },
 { "ioprio", 1, 0, OPT_ioprio },
 { "ioprio-ops", 1, 0, OPT_ioprio_ops },
 { "io-uring", 1, 0, OPT_io_uring },
 { "io-uring-ops",1, 0, OPT_io_uring_ops },
 { "ipsec-mb", 1, 0, OPT_ipsec_mb },
 { "ipsec-mb-ops",1, 0, OPT_ipsec_mb_ops },
 { "ipsec-mb-feature",1, 0, OPT_ipsec_mb_feature },
 { "itimer", 1, 0, OPT_itimer },
 { "itimer-ops", 1, 0, OPT_itimer_ops },
 { "itimer-freq",1, 0, OPT_itimer_freq },
 { "itimer-rand",0, 0, OPT_itimer_rand },
 { "job", 1, 0, OPT_job },
 { "judy", 1, 0, OPT_judy },
 { "judy-ops", 1, 0, OPT_judy_ops },
 { "judy-size", 1, 0, OPT_judy_size },
 { "kcmp", 1, 0, OPT_kcmp },
 { "kcmp-ops", 1, 0, OPT_kcmp_ops },
 { "key", 1, 0, OPT_key },
 { "key-ops", 1, 0, OPT_key_ops },
 { "keep-name", 0, 0, OPT_keep_name },
 { "kill", 1, 0, OPT_kill },
 { "kill-ops", 1, 0, OPT_kill_ops },
 { "klog", 1, 0, OPT_klog },
 { "klog-ops", 1, 0, OPT_klog_ops },
 { "l1cache", 1, 0, OPT_l1cache },
 { "l1cache-ops",1, 0, OPT_l1cache_ops },
 { "l1cache-line-size",1,0, OPT_l1cache_line_size },
 { "l1cache-sets",1, 0, OPT_l1cache_sets},
 { "l1cache-size",1, 0, OPT_l1cache_size },
 { "l1cache-ways",1, 0, OPT_l1cache_ways},
 { "lease", 1, 0, OPT_lease },
 { "lease-ops", 1, 0, OPT_lease_ops },
 { "lease-breakers",1, 0, OPT_lease_breakers },
 { "link", 1, 0, OPT_link },
 { "link-ops", 1, 0, OPT_link_ops },
 { "locka", 1, 0, OPT_locka },
 { "locka-ops", 1, 0, OPT_locka_ops },
 { "lockbus", 1, 0, OPT_lockbus },
 { "lockbus-ops",1, 0, OPT_lockbus_ops },
 { "lockf", 1, 0, OPT_lockf },
 { "lockf-ops", 1, 0, OPT_lockf_ops },
 { "lockf-nonblock", 0, 0, OPT_lockf_nonblock },
 { "lockofd", 1, 0, OPT_lockofd },
 { "lockofd-ops",1, 0, OPT_lockofd_ops },
 { "log-brief", 0, 0, OPT_log_brief },
 { "log-file", 1, 0, OPT_log_file },
 { "longjmp", 1, 0, OPT_longjmp },
 { "longjmp-ops",1, 0, OPT_longjmp_ops },
 { "loop", 1, 0, OPT_loop },
 { "loop-ops", 1, 0, OPT_loop_ops },
 { "lsearch", 1, 0, OPT_lsearch },
 { "lsearch-ops",1, 0, OPT_lsearch_ops },
 { "lsearch-size",1, 0, OPT_lsearch_size },
 { "madvise", 1, 0, OPT_madvise },
 { "madvise-ops",1, 0, OPT_madvise_ops },
 { "malloc", 1, 0, OPT_malloc },
 { "malloc-bytes",1, 0, OPT_malloc_bytes },
 { "malloc-max", 1, 0, OPT_malloc_max },
 { "malloc-ops", 1, 0, OPT_malloc_ops },
 { "malloc-pthreads",1, 0, OPT_malloc_pthreads },
 { "malloc-thresh",1, 0, OPT_malloc_threshold },
 { "matrix", 1, 0, OPT_matrix },
 { "matrix-ops", 1, 0, OPT_matrix_ops },
 { "matrix-method",1, 0, OPT_matrix_method },
 { "matrix-size",1, 0, OPT_matrix_size },
 { "matrix-yx", 0, 0, OPT_matrix_yx },
 { "matrix-3d", 1, 0, OPT_matrix_3d },
 { "matrix-3d-ops",1, 0, OPT_matrix_3d_ops },
 { "matrix-3d-method",1, 0, OPT_matrix_3d_method },
 { "matrix-3d-size",1, 0, OPT_matrix_3d_size },
 { "matrix-3d-zyx",0, 0, OPT_matrix_3d_zyx },
 { "maximize", 0, 0, OPT_maximize },
 { "max-fd", 1, 0, OPT_max_fd },
 { "mcontend", 1, 0, OPT_mcontend },
 { "mcontend-ops",1, 0, OPT_mcontend_ops },
 { "membarrier", 1, 0, OPT_membarrier },
 { "membarrier-ops",1, 0, OPT_membarrier_ops },
 { "memcpy", 1, 0, OPT_memcpy },
 { "memcpy-ops", 1, 0, OPT_memcpy_ops },
 { "memcpy-method",1, 0, OPT_memcpy_method },
 { "memfd", 1, 0, OPT_memfd },
 { "memfd-ops", 1, 0, OPT_memfd_ops },
 { "memfd-bytes",1, 0, OPT_memfd_bytes },
 { "memfd-fds", 1, 0, OPT_memfd_fds },
 { "memhotplug", 1, 0, OPT_memhotplug },
 { "memhotplug-ops",1, 0, OPT_memhotplug_ops },
 { "memrate", 1, 0, OPT_memrate },
 { "memrate-ops",1, 0, OPT_memrate_ops },
 { "memrate-rd-mbs",1, 0, OPT_memrate_rd_mbs },
 { "memrate-wr-mbs",1, 0, OPT_memrate_wr_mbs },
 { "memrate-bytes",1, 0, OPT_memrate_bytes },
 { "memthrash", 1, 0, OPT_memthrash },
 { "memthrash-ops",1, 0, OPT_memthrash_ops },
 { "memthrash-method",1, 0, OPT_memthrash_method },
 { "mergesort", 1, 0, OPT_mergesort },
 { "mergesort-ops",1, 0, OPT_mergesort_ops },
 { "mergesort-size",1, 0, OPT_mergesort_integers },
 { "metrics", 0, 0, OPT_metrics },
 { "metrics-brief",0, 0, OPT_metrics_brief },
 { "mincore", 1, 0, OPT_mincore },
 { "mincore-ops",1, 0, OPT_mincore_ops },
 { "mincore-random",0, 0, OPT_mincore_rand },
 { "minimize", 0, 0, OPT_minimize },
 { "mknod", 1, 0, OPT_mknod },
 { "mknod-ops", 1, 0, OPT_mknod_ops },
 { "mlock", 1, 0, OPT_mlock },
 { "mlock-ops", 1, 0, OPT_mlock_ops },
 { "mlockmany", 1, 0, OPT_mlockmany },
 { "mlockmany-ops",1, 0, OPT_mlockmany_ops },
 { "mmap", 1, 0, OPT_mmap },
 { "mmap-ops", 1, 0, OPT_mmap_ops },
 { "mmap-async", 0, 0, OPT_mmap_async },
 { "mmap-bytes", 1, 0, OPT_mmap_bytes },
 { "mmap-file", 0, 0, OPT_mmap_file },
 { "mmap-mprotect",0, 0, OPT_mmap_mprotect },
 { "mmap-osync", 0, 0, OPT_mmap_osync },
 { "mmap-odirect",0, 0, OPT_mmap_odirect },
 { "mmap-mmap2", 0, 0, OPT_mmap_mmap2 },
 { "mmapaddr", 1, 0, OPT_mmapaddr },
 { "mmapaddr-ops",1, 0, OPT_mmapaddr_ops },
 { "mmapfixed", 1, 0, OPT_mmapfixed},
 { "mmapfixed-ops",1, 0, OPT_mmapfixed_ops },
 { "mmapfork", 1, 0, OPT_mmapfork },
 { "mmapfork-ops",1, 0, OPT_mmapfork_ops },
 { "mmapmany", 1, 0, OPT_mmapmany },
 { "mmapmany-ops",1, 0, OPT_mmapmany_ops },
 { "mq", 1, 0, OPT_mq },
 { "mq-ops", 1, 0, OPT_mq_ops },
 { "mq-size", 1, 0, OPT_mq_size },
 { "mremap", 1, 0, OPT_mremap },
 { "mremap-ops", 1, 0, OPT_mremap_ops },
 { "mremap-bytes",1, 0, OPT_mremap_bytes },
 { "mremap-mlock",0, 0, OPT_mremap_mlock },
 { "msg", 1, 0, OPT_msg },
 { "msg-ops", 1, 0, OPT_msg_ops },
 { "msg-types", 1, 0, OPT_msg_types },
 { "msync", 1, 0, OPT_msync },
 { "msync-ops", 1, 0, OPT_msync_ops },
 { "msync-bytes",1, 0, OPT_msync_bytes },
 { "nanosleep", 1, 0, OPT_nanosleep },
 { "nanosleep-ops",1, 0, OPT_nanosleep_ops },
 { "netdev", 1, 0, OPT_netdev },
 { "netdev-ops",1, 0, OPT_netdev_ops },
 { "netlink-proc",1, 0, OPT_netlink_proc },
 { "netlink-proc-ops",1, 0, OPT_netlink_proc_ops },
 { "netlink-task",1, 0, OPT_netlink_task },
 { "netlink-task-ops",1, 0, OPT_netlink_task_ops },
 { "nice", 1, 0, OPT_nice },
 { "nice-ops", 1, 0, OPT_nice_ops },
 { "no-madvise", 0, 0, OPT_no_madvise },
 { "no-rand-seed", 0, 0, OPT_no_rand_seed },
 { "nop", 1, 0, OPT_nop },
 { "nop-ops", 1, 0, OPT_nop_ops },
 { "null", 1, 0, OPT_null },
 { "null-ops", 1, 0, OPT_null_ops },
 { "numa", 1, 0, OPT_numa },
 { "numa-ops", 1, 0, OPT_numa_ops },
 { "oomable", 0, 0, OPT_oomable },
 { "oom-pipe", 1, 0, OPT_oom_pipe },
 { "oom-pipe-ops",1, 0, OPT_oom_pipe_ops },
 { "opcode", 1, 0, OPT_opcode },
 { "opcode-ops", 1, 0, OPT_opcode_ops },
 { "opcode-method",1, 0, OPT_opcode_method },
 { "open", 1, 0, OPT_open },
 { "open-fd", 0, 0, OPT_open_fd },
 { "open-ops", 1, 0, OPT_open_ops },
 { "page-in", 0, 0, OPT_page_in },
 { "parallel", 1, 0, OPT_all },
 { "pathological",0, 0, OPT_pathological },


 { "perf", 0, 0, OPT_perf_stats },

 { "personality",1, 0, OPT_personality },
 { "personality-ops",1, 0, OPT_personality_ops },
 { "physpage", 1, 0, OPT_physpage },
 { "physpage-ops",1, 0, OPT_physpage_ops },
 { "pidfd", 1, 0, OPT_pidfd },
 { "pidfd-ops", 1, 0, OPT_pidfd_ops },
 { "ping-sock", 1, 0, OPT_ping_sock },
 { "ping-sock-ops",1, 0, OPT_ping_sock_ops },
 { "pipe", 1, 0, OPT_pipe },
 { "pipe-ops", 1, 0, OPT_pipe_ops },
 { "pipe-data-size",1, 0, OPT_pipe_data_size },

 { "pipe-size", 1, 0, OPT_pipe_size },

 { "pipeherd", 1, 0, OPT_pipeherd },
 { "pipeherd-ops",1, 0, OPT_pipeherd_ops },
 { "pipeherd-yield", 0, 0, OPT_pipeherd_yield },
 { "pkey", 1, 0, OPT_pkey },
 { "pkey-ops", 1, 0, OPT_pkey_ops },
 { "poll", 1, 0, OPT_poll },
 { "poll-ops", 1, 0, OPT_poll_ops },
 { "poll-fds", 1, 0, OPT_poll_fds },
 { "prctl", 1, 0, OPT_prctl },
 { "prctl-ops", 1, 0, OPT_prctl_ops },
 { "procfs", 1, 0, OPT_procfs },
 { "procfs-ops", 1, 0, OPT_procfs_ops },
 { "pthread", 1, 0, OPT_pthread },
 { "pthread-ops",1, 0, OPT_pthread_ops },
 { "pthread-max",1, 0, OPT_pthread_max },
 { "ptrace", 1, 0, OPT_ptrace },
 { "ptrace-ops",1, 0, OPT_ptrace_ops },
 { "pty", 1, 0, OPT_pty },
 { "pty-ops", 1, 0, OPT_pty_ops },
 { "pty-max", 1, 0, OPT_pty_max },
 { "qsort", 1, 0, OPT_qsort },
 { "qsort-ops", 1, 0, OPT_qsort_ops },
 { "qsort-size", 1, 0, OPT_qsort_integers },
 { "quiet", 0, 0, OPT_quiet },
 { "quota", 1, 0, OPT_quota },
 { "quota-ops", 1, 0, OPT_quota_ops },
 { "radixsort", 1, 0, OPT_radixsort },
 { "radixsort-ops",1, 0, OPT_radixsort_ops },
 { "radixsort-size",1, 0, OPT_radixsort_size },
 { "ramfs", 1, 0, OPT_ramfs },
 { "ramfs-ops", 1, 0, OPT_ramfs_ops },
 { "ramfs-size", 1, 0, OPT_ramfs_size },
 { "random", 1, 0, OPT_random },
 { "rawdev", 1, 0, OPT_rawdev },
 { "rawdev-ops",1, 0, OPT_rawdev_ops },
 { "rawdev-method",1, 0, OPT_rawdev_method },
 { "rawpkt", 1, 0, OPT_rawpkt },
 { "rawpkt-ops",1, 0, OPT_rawpkt_ops },
 { "rawpkt-port",1, 0, OPT_rawpkt_port },
 { "rawsock", 1, 0, OPT_rawsock },
 { "rawsock-ops",1, 0, OPT_rawsock_ops },
 { "rawudp", 1, 0, OPT_rawudp },
 { "rawudp-ops", 1, 0, OPT_rawudp_ops },
 { "rawudp-port",1, 0, OPT_rawudp_port },
 { "rdrand", 1, 0, OPT_rdrand },
 { "rdrand-ops", 1, 0, OPT_rdrand_ops },
 { "readahead", 1, 0, OPT_readahead },
 { "readahead-ops",1, 0, OPT_readahead_ops },
 { "readahead-bytes",1, 0, OPT_readahead_bytes },
 { "reboot", 1, 0, OPT_reboot },
 { "reboot-ops", 1, 0, OPT_reboot_ops },
 { "remap", 1, 0, OPT_remap },
 { "remap-ops", 1, 0, OPT_remap_ops },
 { "rename", 1, 0, OPT_rename },
 { "rename-ops", 1, 0, OPT_rename_ops },
 { "resources", 1, 0, OPT_resources },
 { "resources-ops",1, 0, OPT_resources_ops },
 { "revio", 1, 0, OPT_revio },
 { "revio-ops", 1, 0, OPT_revio_ops },
 { "revio-opts", 1, 0, OPT_revio_opts },
 { "revio-bytes",1, 0, OPT_revio_bytes },
 { "rlimit", 1, 0, OPT_rlimit },
 { "rlimit-ops", 1, 0, OPT_rlimit_ops },
 { "rmap", 1, 0, OPT_rmap },
 { "rmap-ops", 1, 0, OPT_rmap_ops },
 { "rseq", 1, 0, OPT_rseq },
 { "rseq-ops", 1, 0, OPT_rseq_ops },
 { "rtc", 1, 0, OPT_rtc },
 { "rtc-ops", 1, 0, OPT_rtc_ops },
 { "sched", 1, 0, OPT_sched },
 { "sched-prio", 1, 0, OPT_sched_prio },
 { "schedpolicy",1, 0, OPT_schedpolicy },
 { "schedpolicy-ops",1, 0, OPT_schedpolicy_ops },
 { "sched-period",1, 0, OPT_sched_period },
 { "sched-runtime",1, 0, OPT_sched_runtime },
 { "sched-deadline",1, 0, OPT_sched_deadline },
 { "sched-reclaim",0, 0, OPT_sched_reclaim },
 { "schedpolicy",1, 0, OPT_schedpolicy },
 { "sctp", 1, 0, OPT_sctp },
 { "sctp-ops", 1, 0, OPT_sctp_ops },
 { "sctp-domain",1, 0, OPT_sctp_domain },
 { "sctp-port", 1, 0, OPT_sctp_port },
 { "seal", 1, 0, OPT_seal },
 { "seal-ops", 1, 0, OPT_seal_ops },
 { "seccomp", 1, 0, OPT_seccomp },
 { "seccomp-ops",1, 0, OPT_seccomp_ops },
 { "secretmem", 1, 0, OPT_secretmem },
 { "secretmem-ops",1, 0, OPT_secretmem_ops },
 { "seek", 1, 0, OPT_seek },
 { "seek-ops", 1, 0, OPT_seek_ops },
 { "seek-punch", 0, 0, OPT_seek_punch },
 { "seek-size", 1, 0, OPT_seek_size },
 { "sem", 1, 0, OPT_sem },
 { "sem-ops", 1, 0, OPT_sem_ops },
 { "sem-procs", 1, 0, OPT_sem_procs },
 { "sem-sysv", 1, 0, OPT_sem_sysv },
 { "sem-sysv-ops",1, 0, OPT_sem_sysv_ops },
 { "sem-sysv-procs",1, 0, OPT_sem_sysv_procs },
 { "sendfile", 1, 0, OPT_sendfile },
 { "sendfile-ops",1, 0, OPT_sendfile_ops },
 { "sendfile-size",1, 0, OPT_sendfile_size },
 { "sequential", 1, 0, OPT_sequential },
 { "session", 1, 0, OPT_session },
 { "session-ops",1, 0, OPT_session_ops },
 { "set", 1, 0, OPT_set },
 { "set-ops", 1, 0, OPT_set_ops },
 { "shellsort", 1, 0, OPT_shellsort },
 { "shellsort-ops",1, 0, OPT_shellsort_ops },
 { "shellsort-size",1, 0, OPT_shellsort_integers },
 { "shm", 1, 0, OPT_shm },
 { "shm-ops", 1, 0, OPT_shm_ops },
 { "shm-bytes", 1, 0, OPT_shm_bytes },
 { "shm-objs", 1, 0, OPT_shm_objects },
 { "shm-sysv", 1, 0, OPT_shm_sysv },
 { "shm-sysv-ops",1, 0, OPT_shm_sysv_ops },
 { "shm-sysv-bytes",1, 0, OPT_shm_sysv_bytes },
 { "shm-sysv-segs",1, 0, OPT_shm_sysv_segments },
 { "sigabrt", 1, 0, OPT_sigabrt },
 { "sigabrt-ops",1, 0, OPT_sigabrt_ops },
 { "sigchld", 1, 0, OPT_sigchld },
 { "sigchld-ops",1, 0, OPT_sigchld_ops },
 { "sigfd", 1, 0, OPT_sigfd },
 { "sigfd-ops", 1, 0, OPT_sigfd_ops },
 { "sigio", 1, 0, OPT_sigio },
 { "sigio-ops", 1, 0, OPT_sigio_ops },
 { "sigfpe", 1, 0, OPT_sigfpe },
 { "sigfpe-ops", 1, 0, OPT_sigfpe_ops },
 { "signal", 1, 0, OPT_signal },
 { "signal-ops", 1, 0, OPT_signal_ops },
 { "sigpending", 1, 0, OPT_sigpending},
 { "sigpending-ops",1, 0, OPT_sigpending_ops },
 { "sigpipe", 1, 0, OPT_sigpipe },
 { "sigpipe-ops",1, 0, OPT_sigpipe_ops },
 { "sigq", 1, 0, OPT_sigq },
 { "sigq-ops", 1, 0, OPT_sigq_ops },
 { "sigrt", 1, 0, OPT_sigrt },
 { "sigrt-ops", 1, 0, OPT_sigrt_ops },
 { "sigsegv", 1, 0, OPT_sigsegv },
 { "sigsegv-ops",1, 0, OPT_sigsegv_ops },
 { "sigsuspend", 1, 0, OPT_sigsuspend },
 { "sigsuspend-ops",1, 0, OPT_sigsuspend_ops },
 { "sigtrap", 1, 0, OPT_sigtrap },
 { "sigtrap-ops",1, 0, OPT_sigtrap_ops},
 { "skiplist", 1, 0, OPT_skiplist },
 { "skiplist-ops",1, 0, OPT_skiplist_ops },
 { "skiplist-size",1, 0, OPT_skiplist_size },
 { "sleep", 1, 0, OPT_sleep },
 { "sleep-ops", 1, 0, OPT_sleep_ops },
 { "sleep-max", 1, 0, OPT_sleep_max },
 { "sock", 1, 0, OPT_sock },
 { "sock-domain",1, 0, OPT_sock_domain },
 { "sock-nodelay",0, 0, OPT_sock_nodelay },
 { "sock-ops", 1, 0, OPT_sock_ops },
 { "sock-opts", 1, 0, OPT_sock_opts },
 { "sock-port", 1, 0, OPT_sock_port },
 { "sock-type", 1, 0, OPT_sock_type },
 { "sockabuse", 1, 0, OPT_sockabuse },
 { "sockabuse-ops",1, 0, OPT_sockabuse_ops },
 { "sockdiag", 1, 0, OPT_sockdiag },
 { "sockdiag-ops",1, 0, OPT_sockdiag_ops },
 { "sockfd", 1, 0, OPT_sockfd },
 { "sockfd-ops",1, 0, OPT_sockfd_ops },
 { "sockfd-port",1, 0, OPT_sockfd_port },
 { "sockmany", 1, 0, OPT_sockmany },
 { "sockmany-ops",1, 0, OPT_sockmany_ops },
 { "sockpair", 1, 0, OPT_sockpair },
 { "sockpair-ops",1, 0, OPT_sockpair_ops },
 { "softlockup", 1, 0, OPT_softlockup },
 { "softlockup-ops",1, 0, OPT_softlockup_ops },
 { "spawn", 1, 0, OPT_spawn },
 { "spawn-ops", 1, 0, OPT_spawn_ops },
 { "splice", 1, 0, OPT_splice },
 { "splice-bytes",1, 0, OPT_splice_bytes },
 { "splice-ops", 1, 0, OPT_splice_ops },
 { "stack", 1, 0, OPT_stack},
 { "stack-fill", 0, 0, OPT_stack_fill },
 { "stack-mlock",0, 0, OPT_stack_mlock },
 { "stack-ops", 1, 0, OPT_stack_ops },
 { "stackmmap", 1, 0, OPT_stackmmap },
 { "stackmmap-ops",1, 0, OPT_stackmmap_ops },
 { "str", 1, 0, OPT_str },
 { "str-ops", 1, 0, OPT_str_ops },
 { "str-method", 1, 0, OPT_str_method },
 { "stressors", 0, 0, OPT_stressors },
 { "stream", 1, 0, OPT_stream },
 { "stream-ops", 1, 0, OPT_stream_ops },
 { "stream-index",1, 0, OPT_stream_index },
 { "stream-l3-size",1, 0, OPT_stream_l3_size },
 { "stream-madvise",1, 0, OPT_stream_madvise },
 { "swap", 1, 0, OPT_swap },
 { "swap-ops", 1, 0, OPT_swap_ops },
 { "switch", 1, 0, OPT_switch },
 { "switch-ops", 1, 0, OPT_switch_ops },
 { "switch-freq",1, 0, OPT_switch_freq },
 { "symlink", 1, 0, OPT_symlink },
 { "symlink-ops",1, 0, OPT_symlink_ops },
 { "sync-file", 1, 0, OPT_sync_file },
 { "sync-file-ops", 1, 0, OPT_sync_file_ops },
 { "sync-file-bytes", 1, 0, OPT_sync_file_bytes },
 { "sysbadaddr", 1, 0, OPT_sysbadaddr },
 { "sysbadaddr-ops",1, 0, OPT_sysbadaddr_ops },
 { "sysfs", 1, 0, OPT_sysfs },
 { "sysfs-ops",1, 0, OPT_sysfs_ops },
 { "sysinfo", 1, 0, OPT_sysinfo },
 { "sysinfo-ops",1, 0, OPT_sysinfo_ops },
 { "sysinval", 1, 0, OPT_sysinval },
 { "sysinval-ops",1, 0, OPT_sysinval_ops },

 { "syslog", 0, 0, OPT_syslog },

 { "taskset", 1, 0, OPT_taskset },
 { "tee", 1, 0, OPT_tee },
 { "tee-ops", 1, 0, OPT_tee_ops },
 { "temp-path", 1, 0, OPT_temp_path },
 { "timeout", 1, 0, OPT_timeout },
 { "timer", 1, 0, OPT_timer },
 { "timer-ops", 1, 0, OPT_timer_ops },
 { "timer-freq", 1, 0, OPT_timer_freq },
 { "timer-rand", 0, 0, OPT_timer_rand },
 { "timerfd", 1, 0, OPT_timerfd },
 { "timerfd-ops",1, 0, OPT_timerfd_ops },
 { "timerfd-freq",1, 0, OPT_timerfd_freq },
 { "timerfd-rand",0, 0, OPT_timerfd_rand },
 { "timer-slack" ,1, 0, OPT_timer_slack },
 { "tlb-shootdown",1, 0, OPT_tlb_shootdown },
 { "tlb-shootdown-ops",1,0, OPT_tlb_shootdown_ops },
 { "tmpfs", 1, 0, OPT_tmpfs },
 { "tmpfs-ops", 1, 0, OPT_tmpfs_ops },
 { "tmpfs-mmap-async",0, 0, OPT_tmpfs_mmap_async },
 { "tmpfs-mmap-file",0, 0, OPT_tmpfs_mmap_file },
 { "tree", 1, 0, OPT_tree },
 { "tree-ops", 1, 0, OPT_tree_ops },
 { "tree-method",1, 0, OPT_tree_method },
 { "tree-size", 1, 0, OPT_tree_size },
 { "tsc", 1, 0, OPT_tsc },
 { "tsc-ops", 1, 0, OPT_tsc_ops },
 { "tsearch", 1, 0, OPT_tsearch },
 { "tsearch-ops",1, 0, OPT_tsearch_ops },
 { "tsearch-size",1, 0, OPT_tsearch_size },
 { "thermalstat",1, 0, OPT_thermalstat },
 { "thrash", 0, 0, OPT_thrash },
 { "times", 0, 0, OPT_times },
 { "timestamp", 0, 0, OPT_timestamp },
 { "tz", 0, 0, OPT_thermal_zones },
 { "tun", 1, 0, OPT_tun},
 { "tun-ops", 1, 0, OPT_tun_ops },
 { "tun-tap", 0, 0, OPT_tun_tap },
 { "udp", 1, 0, OPT_udp },
 { "udp-ops", 1, 0, OPT_udp_ops },
 { "udp-domain",1, 0, OPT_udp_domain },
 { "udp-lite", 0, 0, OPT_udp_lite },
 { "udp-port", 1, 0, OPT_udp_port },
 { "udp-flood", 1, 0, OPT_udp_flood },
 { "udp-flood-domain",1, 0, OPT_udp_flood_domain },
 { "udp-flood-ops",1, 0, OPT_udp_flood_ops },
 { "unshare", 1, 0, OPT_unshare },
 { "unshare-ops",1, 0, OPT_unshare_ops },
 { "uprobe", 1, 0, OPT_uprobe },
 { "uprobe-ops", 1, 0, OPT_uprobe_ops },
 { "urandom", 1, 0, OPT_urandom },
 { "urandom-ops",1, 0, OPT_urandom_ops },
 { "userfaultfd",1, 0, OPT_userfaultfd },
 { "userfaultfd-ops",1, 0, OPT_userfaultfd_ops },
 { "userfaultfd-bytes",1,0, OPT_userfaultfd_bytes },
 { "utime", 1, 0, OPT_utime },
 { "utime-ops", 1, 0, OPT_utime_ops },
 { "utime-fsync",0, 0, OPT_utime_fsync },
 { "vdso", 1, 0, OPT_vdso },
 { "vdso-ops", 1, 0, OPT_vdso_ops },
 { "vdso-func", 1, 0, OPT_vdso_func },
 { "vecmath", 1, 0, OPT_vecmath },
 { "vecmath-ops",1, 0, OPT_vecmath_ops },
 { "verbose", 0, 0, OPT_verbose },
 { "verify", 0, 0, OPT_verify },
 { "verity", 1, 0, OPT_verity },
 { "verity-ops", 1, 0, OPT_verity_ops },
 { "version", 0, 0, OPT_version },
 { "vfork", 1, 0, OPT_vfork },
 { "vfork-ops", 1, 0, OPT_vfork_ops },
 { "vfork-max", 1, 0, OPT_vfork_max },
 { "vforkmany", 1, 0, OPT_vforkmany },
 { "vforkmany-ops", 1, 0, OPT_vforkmany_ops },
 { "vm", 1, 0, OPT_vm },
 { "vm-bytes", 1, 0, OPT_vm_bytes },
 { "vm-hang", 1, 0, OPT_vm_hang },
 { "vm-keep", 0, 0, OPT_vm_keep },

 { "vm-populate",0, 0, OPT_vm_mmap_populate },


 { "vm-locked", 0, 0, OPT_vm_mmap_locked },

 { "vm-ops", 1, 0, OPT_vm_ops },
 { "vm-madvise", 1, 0, OPT_vm_madvise },
 { "vm-method", 1, 0, OPT_vm_method },
 { "vm-addr", 1, 0, OPT_vm_addr },
 { "vm-addr-ops",1, 0, OPT_vm_addr_ops },
 { "vm-addr-method",1, 0, OPT_vm_addr_method },
 { "vm-rw", 1, 0, OPT_vm_rw },
 { "vm-rw-bytes",1, 0, OPT_vm_rw_bytes },
 { "vm-rw-ops", 1, 0, OPT_vm_rw_ops },
 { "vm-segv", 1, 0, OPT_vm_segv },
 { "vm-segv-ops",1, 0, OPT_vm_segv_ops },
 { "vm-splice", 1, 0, OPT_vm_splice },
 { "vm-splice-bytes",1, 0, OPT_vm_splice_bytes },
 { "vm-splice-ops",1, 0, OPT_vm_splice_ops },
 { "vmstat", 1, 0, OPT_vmstat },
 { "wait", 1, 0, OPT_wait },
 { "wait-ops", 1, 0, OPT_wait_ops },
 { "watchdog", 1, 0, OPT_watchdog },
 { "watchdog-ops",1, 0, OPT_watchdog_ops },
 { "wcs", 1, 0, OPT_wcs},
 { "wcs-ops", 1, 0, OPT_wcs_ops },
 { "wcs-method", 1, 0, OPT_wcs_method },
 { "x86syscall", 1, 0, OPT_x86syscall },
 { "x86syscall-ops",1, 0, OPT_x86syscall_ops },
 { "x86syscall-func",1, 0, OPT_x86syscall_func },
 { "xattr", 1, 0, OPT_xattr },
 { "xattr-ops", 1, 0, OPT_xattr_ops },
 { "yaml", 1, 0, OPT_yaml },
 { "yield", 1, 0, OPT_yield },
 { "yield-ops", 1, 0, OPT_yield_ops },
 { "zero", 1, 0, OPT_zero },
 { "zero-ops", 1, 0, OPT_zero_ops },
 { "zlib", 1, 0, OPT_zlib },
 { "zlib-ops", 1, 0, OPT_zlib_ops },
 { "zlib-method",1, 0, OPT_zlib_method },
 { "zlib-level", 1, 0, OPT_zlib_level },
 { "zlib-mem-level", 1, 0, OPT_zlib_mem_level },
 { "zlib-window-bits", 1, 0, OPT_zlib_window_bits },
 { "zlib-stream-bytes", 1, 0, OPT_zlib_stream_bytes, },
 { "zlib-strategy", 1, 0, OPT_zlib_strategy, },
 { "zombie", 1, 0, OPT_zombie },
 { "zombie-ops", 1, 0, OPT_zombie_ops },
 { "zombie-max", 1, 0, OPT_zombie_max },
 { 
# 960 "stress-ng.c" 3 4
  ((void *)0)
# 960 "stress-ng.c"
      , 0, 0, 0 }
};




static const stress_help_t help_generic[] = {
 { 
# 967 "stress-ng.c" 3 4
  ((void *)0)
# 967 "stress-ng.c"
      , "abort", "abort all stressors if any stressor fails" },
 { 
# 968 "stress-ng.c" 3 4
  ((void *)0)
# 968 "stress-ng.c"
      , "aggressive", "enable all aggressive options" },
 { "a N", "all N", "start N workers of each stress test" },
 { "b N", "backoff N", "wait of N microseconds before work starts" },
 { 
# 971 "stress-ng.c" 3 4
  ((void *)0)
# 971 "stress-ng.c"
      , "class name", "specify a class of stressors, use with --sequential" },
 { "n", "dry-run", "do not run" },
 { "h", "help", "show help" },
 { 
# 974 "stress-ng.c" 3 4
  ((void *)0)
# 974 "stress-ng.c"
      , "ignite-cpu", "alter kernel controls to make CPU run hot" },
 { 
# 975 "stress-ng.c" 3 4
  ((void *)0)
# 975 "stress-ng.c"
      , "ionice-class C", "specify ionice class (idle, besteffort, realtime)" },
 { 
# 976 "stress-ng.c" 3 4
  ((void *)0)
# 976 "stress-ng.c"
      , "ionice-level L", "specify ionice level (0 max, 7 min)" },
 { "j", "job jobfile", "run the named jobfile" },
 { "k", "keep-name", "keep stress worker names to be 'stress-ng'" },
 { 
# 979 "stress-ng.c" 3 4
  ((void *)0)
# 979 "stress-ng.c"
      , "log-brief", "less verbose log messages" },
 { 
# 980 "stress-ng.c" 3 4
  ((void *)0)
# 980 "stress-ng.c"
      , "log-file filename", "log messages to a log file" },
 { 
# 981 "stress-ng.c" 3 4
  ((void *)0)
# 981 "stress-ng.c"
      , "maximize", "enable maximum stress options" },
 { 
# 982 "stress-ng.c" 3 4
  ((void *)0)
# 982 "stress-ng.c"
      , "max-fd", "set maximum file descriptor limit" },
 { "M", "metrics", "print pseudo metrics of activity" },
 { 
# 984 "stress-ng.c" 3 4
  ((void *)0)
# 984 "stress-ng.c"
      , "metrics-brief", "enable metrics and only show non-zero results" },
 { 
# 985 "stress-ng.c" 3 4
  ((void *)0)
# 985 "stress-ng.c"
      , "minimize", "enable minimal stress options" },
 { 
# 986 "stress-ng.c" 3 4
  ((void *)0)
# 986 "stress-ng.c"
      , "no-madvise", "don't use random madvise options for each mmap" },
 { 
# 987 "stress-ng.c" 3 4
  ((void *)0)
# 987 "stress-ng.c"
      , "no-rand-seed", "seed random numbers with the same constant" },
 { 
# 988 "stress-ng.c" 3 4
  ((void *)0)
# 988 "stress-ng.c"
      , "page-in", "touch allocated pages that are not in core" },
 { 
# 989 "stress-ng.c" 3 4
  ((void *)0)
# 989 "stress-ng.c"
      , "parallel N", "synonym for 'all N'" },
 { 
# 990 "stress-ng.c" 3 4
  ((void *)0)
# 990 "stress-ng.c"
      , "pathological", "enable stressors that are known to hang a machine" },


 { 
# 993 "stress-ng.c" 3 4
  ((void *)0)
# 993 "stress-ng.c"
      , "perf", "display perf statistics" },

 { "q", "quiet", "quiet output" },
 { "r", "random N", "start N random workers" },
 { 
# 997 "stress-ng.c" 3 4
  ((void *)0)
# 997 "stress-ng.c"
      , "sched type", "set scheduler type" },
 { 
# 998 "stress-ng.c" 3 4
  ((void *)0)
# 998 "stress-ng.c"
      , "sched-prio N", "set scheduler priority level N" },
 { 
# 999 "stress-ng.c" 3 4
  ((void *)0)
# 999 "stress-ng.c"
      , "sched-period N", "set period for SCHED_DEADLINE to N nanosecs (Linux only)" },
 { 
# 1000 "stress-ng.c" 3 4
  ((void *)0)
# 1000 "stress-ng.c"
      , "sched-runtime N", "set runtime for SCHED_DEADLINE to N nanosecs (Linux only)" },
 { 
# 1001 "stress-ng.c" 3 4
  ((void *)0)
# 1001 "stress-ng.c"
      , "sched-deadline N", "set deadline for SCHED_DEADLINE to N nanosecs (Liunx only)" },
 { 
# 1002 "stress-ng.c" 3 4
  ((void *)0)
# 1002 "stress-ng.c"
      , "sched-reclaim", "set reclaim cpu bandwidth for deadline scheduler (Liunx only)" },
 { 
# 1003 "stress-ng.c" 3 4
  ((void *)0)
# 1003 "stress-ng.c"
      , "sequential N", "run all stressors one by one, invoking N of them" },
 { 
# 1004 "stress-ng.c" 3 4
  ((void *)0)
# 1004 "stress-ng.c"
      , "stressors", "show available stress tests" },

 { 
# 1006 "stress-ng.c" 3 4
  ((void *)0)
# 1006 "stress-ng.c"
      , "syslog", "log messages to the syslog" },

 { 
# 1008 "stress-ng.c" 3 4
  ((void *)0)
# 1008 "stress-ng.c"
      , "taskset", "use specific CPUs (set CPU affinity)" },
 { 
# 1009 "stress-ng.c" 3 4
  ((void *)0)
# 1009 "stress-ng.c"
      , "temp-path path", "specify path for temporary directories and files" },
 { 
# 1010 "stress-ng.c" 3 4
  ((void *)0)
# 1010 "stress-ng.c"
      , "thrash", "force all pages in causing swap thrashing" },
 { "t N", "timeout T", "timeout after T seconds" },
 { 
# 1012 "stress-ng.c" 3 4
  ((void *)0)
# 1012 "stress-ng.c"
      , "timer-slack", "enable timer slack mode" },
 { 
# 1013 "stress-ng.c" 3 4
  ((void *)0)
# 1013 "stress-ng.c"
      , "times", "show run time summary at end of the run" },
 { 
# 1014 "stress-ng.c" 3 4
  ((void *)0)
# 1014 "stress-ng.c"
      , "timestamp", "timestamp log output " },

 { 
# 1016 "stress-ng.c" 3 4
  ((void *)0)
# 1016 "stress-ng.c"
      , "tz", "collect temperatures from thermal zones (Linux only)" },

 { "v", "verbose", "verbose output" },
 { 
# 1019 "stress-ng.c" 3 4
  ((void *)0)
# 1019 "stress-ng.c"
      , "verify", "verify results (not available on all tests)" },
 { "V", "version", "show version" },
 { "Y", "yaml file", "output results to YAML formatted filed" },
 { "x", "exclude", "list of stressors to exclude (not run)" },
 { 
# 1023 "stress-ng.c" 3 4
  ((void *)0)
# 1023 "stress-ng.c"
      , 
# 1023 "stress-ng.c" 3 4
         ((void *)0)
# 1023 "stress-ng.c"
             , 
# 1023 "stress-ng.c" 3 4
                 ((void *)0) 
# 1023 "stress-ng.c"
                      }
};





static inline void stress_hash_checksum(stress_checksum_t *checksum)
{
 checksum->hash = stress_hash_jenkin((uint8_t *)&checksum->data,
    sizeof(checksum->data));
}





static inline int32_t stressor_name_find(const char *name)
{
 int32_t i;
 const char *tmp = stress_munge_underscore(name);
 const size_t len = strlen(tmp) + 1;
 char munged_name[len];

 (void)shim_strlcpy(munged_name, tmp, len);

 for (i = 0; stressors[i].name; i++) {
  const char *munged_stressor_name =
   stress_munge_underscore(stressors[i].name);

  if (!strcmp(munged_stressor_name, munged_name))
   break;
 }

 return i;
}





static void stress_remove_stressor(stress_stressor_t *ss)
{
 if (stressors_head == ss) {
  stressors_head = ss->next;
  if (ss->next)
   ss->next->prev = ss->prev;
 } else {
  if (ss->prev)
   ss->prev->next = ss->next;
 }

 if (stressors_tail == ss) {
  stressors_tail = ss->prev;
  if (ss->prev)
   ss->prev->next = ss->next;
 } else {
  if (ss->next)
   ss->next->prev = ss->prev;
 }
 free(ss);
}





static uint32_t stress_get_class_id(char *const str)
{
 size_t i;

 for (i = 0; i < (sizeof(classes) / sizeof(classes[0])); i++) {
  if (!strcmp(classes[i].name, str))
   return classes[i].class;
 }
 return 0;
}





static int stress_get_class(char *const class_str, uint32_t *class)
{
 char *str, *token;
 int ret = 0;

 *class = 0;
 for (str = class_str; (token = strtok(str, ",")) != 
# 1111 "stress-ng.c" 3 4
                                                    ((void *)0)
# 1111 "stress-ng.c"
                                                        ; str = 
# 1111 "stress-ng.c" 3 4
                                                                ((void *)0)
# 1111 "stress-ng.c"
                                                                    ) {
  uint32_t cl = stress_get_class_id(token);
  if (!cl) {
   size_t i;
   const size_t len = strlen(token);

   if ((len > 1) && (token[len - 1] == '?')) {
    token[len - 1] = '\0';

    cl = stress_get_class_id(token);
    if (cl) {
     size_t j;

     (void)printf("class '%s' stressors:",
      token);
     for (j = 0; stressors[j].name; j++) {
      if (stressors[j].info->class & cl)
       (void)printf(" %s", stress_munge_underscore(stressors[j].name));
     }
     (void)printf("\n");
     return 1;
    }
   }
   (void)fprintf(
# 1134 "stress-ng.c" 3 4
                stderr
# 1134 "stress-ng.c"
                      , "Unknown class: '%s', "
    "available classes:", token);
   for (i = 0; i < (sizeof(classes) / sizeof(classes[0])); i++)
    (void)fprintf(
# 1137 "stress-ng.c" 3 4
                 stderr
# 1137 "stress-ng.c"
                       , " %s", classes[i].name);
   (void)fprintf(
# 1138 "stress-ng.c" 3 4
                stderr
# 1138 "stress-ng.c"
                      , "\n\n");
   return -1;
  }
  *class |= cl;
 }
 return ret;
}





static int stress_exclude(void)
{
 char *str, *token, *opt_exclude;

 if (!stress_get_setting("exclude", &opt_exclude))
  return 0;

 for (str = opt_exclude; (token = strtok(str, ",")) != 
# 1157 "stress-ng.c" 3 4
                                                      ((void *)0)
# 1157 "stress-ng.c"
                                                          ; str = 
# 1157 "stress-ng.c" 3 4
                                                                  ((void *)0)
# 1157 "stress-ng.c"
                                                                      ) {
  stress_id_t id;
  stress_stressor_t *ss = stressors_head;
  const uint32_t i = stressor_name_find(token);

  if (!stressors[i].name) {
   (void)fprintf(
# 1163 "stress-ng.c" 3 4
                stderr
# 1163 "stress-ng.c"
                      , "Unknown stressor: '%s', "
    "invalid exclude option\n", token);
   return -1;
  }
  id = stressors[i].id;

  while (ss) {
   stress_stressor_t *next = ss->next;

   if (ss->stressor->id == id)
    stress_remove_stressor(ss);
   ss = next;
  }
 }
 return 0;
}





static void __attribute__((__section__("mlocked_text"))) stress_sigint_handler(int signum)
{
 (void)signum;
 g_caught_sigint = 
# 1187 "stress-ng.c" 3 4
                  1
# 1187 "stress-ng.c"
                      ;
 keep_stressing_set_flag(
# 1188 "stress-ng.c" 3 4
                        0
# 1188 "stress-ng.c"
                             );
 wait_flag = 
# 1189 "stress-ng.c" 3 4
            0
# 1189 "stress-ng.c"
                 ;

 (void)kill(-getpid(), 
# 1191 "stress-ng.c" 3 4
                      14
# 1191 "stress-ng.c"
                             );
}





static void __attribute__((__section__("mlocked_text"))) stress_sigalrm_parent_handler(int signum)
{
 (void)signum;
 wait_flag = 
# 1201 "stress-ng.c" 3 4
            0
# 1201 "stress-ng.c"
                 ;
}






static void __attribute__((__section__("mlocked_text"))) stress_stats_handler(int signum)
{
 static char buffer[80];
 char *ptr = buffer;
 int ret;
 double min1, min5, min15;
 size_t shmall, freemem, totalmem, freeswap;

 (void)signum;

 *ptr = '\0';

 if (stress_get_load_avg(&min1, &min5, &min15) == 0) {
  ret = snprintf(ptr, sizeof(buffer),
   "Load Avg: %.2f %.2f %.2f, ",
   min1, min5, min15);
  if (ret > 0)
   ptr += ret;
 }
 stress_get_memlimits(&shmall, &freemem, &totalmem, &freeswap);

 (void)snprintf(ptr, buffer - ptr,
  "MemFree: %zu MB, MemTotal: %zu MB",
  freemem / (size_t)(1ULL << 20), totalmem / (size_t)(1ULL << 20));

 (void)fprintf(
# 1234 "stress-ng.c" 3 4
              stdout
# 1234 "stress-ng.c"
                    , "%s\n", buffer);
 (void)fflush(
# 1235 "stress-ng.c" 3 4
             stdout
# 1235 "stress-ng.c"
                   );
}






static int stress_set_handler(const char *stress, const 
# 1243 "stress-ng.c" 3 4
                                                       _Bool 
# 1243 "stress-ng.c"
                                                            child)
{
 if (stress_sighandler(stress, 
# 1245 "stress-ng.c" 3 4
                              2
# 1245 "stress-ng.c"
                                    , stress_sigint_handler, 
# 1245 "stress-ng.c" 3 4
                                                             ((void *)0)
# 1245 "stress-ng.c"
                                                                 ) < 0)
  return -1;
 if (stress_sighandler(stress, 
# 1247 "stress-ng.c" 3 4
                              1
# 1247 "stress-ng.c"
                                    , stress_sigint_handler, 
# 1247 "stress-ng.c" 3 4
                                                             ((void *)0)
# 1247 "stress-ng.c"
                                                                 ) < 0)
  return -1;

 if (!child) {
  if (stress_sighandler(stress, 
# 1251 "stress-ng.c" 3 4
                               12
# 1251 "stress-ng.c"
                                      ,
   stress_stats_handler, 
# 1252 "stress-ng.c" 3 4
                        ((void *)0)
# 1252 "stress-ng.c"
                            ) < 0) {
   return -1;
  }
 }

 if (stress_sighandler(stress, 
# 1257 "stress-ng.c" 3 4
                              14
# 1257 "stress-ng.c"
                                     ,
     child ? stress_handle_stop_stressing :
      stress_sigalrm_parent_handler, 
# 1259 "stress-ng.c" 3 4
                                    ((void *)0)
# 1259 "stress-ng.c"
                                        ) < 0)
  return -1;
 return 0;
}





static void stress_version(void)
{
 (void)printf("%s, version " "0.12.06" " (%s, %s)%s\n",
  g_app_name, stress_get_compiler(), stress_get_uname_info(),
  stress_is_dev_tty(
# 1272 "stress-ng.c" 3 4
                   1
# 1272 "stress-ng.c"
                                ) ? "" : " \U0001F4BB\U0001F525");
}





static void stress_usage_help(const stress_help_t help_info[])
{
 size_t i;

 for (i = 0; help_info[i].description; i++) {
  char opt_s[10] = "";

  if (help_info[i].opt_s)
   (void)snprintf(opt_s, sizeof(opt_s), "-%s,",
     help_info[i].opt_s);
  (void)printf("%-6s--%-19s%s\n", opt_s,
   help_info[i].opt_l, help_info[i].description);
 }
}





static void stress_usage_help_stressors(void)
{
 size_t i;

 for (i = 0; stressors[i].id != STRESS_MAX; i++) {
  if (stressors[i].info->help)
   stress_usage_help(stressors[i].info->help);
 }
}





static inline void stress_show_stressor_names(void)
{
 size_t i;

 for (i = 0; stressors[i].name; i++)
  (void)printf("%s%s", i ? " " : "",
   stress_munge_underscore(stressors[i].name));
 (void)putchar('\n');
}





static void stress_usage(void)
{
 stress_version();
 (void)printf("\nUsage: %s [OPTION [ARG]]\n", g_app_name);
 (void)printf("\nGeneral control options:\n");
 stress_usage_help(help_generic);
 (void)printf("\nStressor specific options:\n");
 stress_usage_help_stressors();
 (void)printf("\nExample: %s --cpu 8 --io 4 --vm 2 --vm-bytes 128M "
  "--fork 4 --timeout 10s\n\n"
  "Note: Sizes can be suffixed with B,K,M,G and times with "
  "s,m,h,d,y\n", g_app_name);
 stress_settings_free();
 exit(
# 1339 "stress-ng.c" 3 4
     0
# 1339 "stress-ng.c"
                 );
}





static const char *stress_opt_name(const int opt_val)
{
 size_t i;

 for (i = 0; long_options[i].name; i++)
  if (long_options[i].val == opt_val)
   return long_options[i].name;

 return "<unknown>";
}







static void stress_get_processors(int32_t *count)
{
 if (*count == 0)
  *count = stress_get_processors_configured();
 else if (*count < 0)
  *count = stress_get_processors_online();
}





static inline void stress_stressor_finished(pid_t *pid)
{
 *pid = 0;
}





static void stress_kill_stressors(const int sig)
{
 static int count = 0;
 int signum = sig;
 stress_stressor_t *ss;


 count++;
 if (count > 5) {
  pr_dbg("killing process group %d with SIGKILL\n", (int)g_pgrp);
  signum = 
# 1394 "stress-ng.c" 3 4
          9
# 1394 "stress-ng.c"
                 ;
 }

 (void)killpg(g_pgrp, sig);

 for (ss = stressors_head; ss; ss = ss->next) {
  int32_t i;

  for (i = 0; i < ss->started_instances; i++) {
   if (ss->pids[i])
    (void)kill(ss->pids[i], signum);
  }
 }
}





static char *stress_exit_status_to_string(const int status)
{
 switch (status) {
 case 
# 1416 "stress-ng.c" 3 4
     0
# 1416 "stress-ng.c"
                 :
  return "success";
 case 
# 1418 "stress-ng.c" 3 4
     1
# 1418 "stress-ng.c"
                 :
  return "stress-ng core failure";
 case (2):
  return "stressor failed";
 case (3):
  return "no resource(s)";
 case (4):
  return "not implemented";
 case (5):
  return "killed by signal";
 case (6):
  return "stressor terminated using _exit()";
 case (7):
  return "metrics may be untrustyworthy";
 default:
  return "unknown";
 }
}




static int stress_dot_filter(const struct dirent *d)
{
 if (d->d_name[0] == '.') {
  if (d->d_name[1] == '\0')
   return 0;
  if ((d->d_name[1] == '.') && (d->d_name[2] == '\0'))
   return 0;
 }
 return 1;
}





static void stress_clean_dir_files(
 const char *temp_path,
 const size_t temp_path_len,
 char *path,
 const size_t path_posn)
{
 struct stat statbuf;
 char *ptr = path + path_posn;
 char *end = path + 
# 1463 "stress-ng.c" 3 4
                   4096
# 1463 "stress-ng.c"
                           ;
 int n;
 struct dirent **names = 
# 1465 "stress-ng.c" 3 4
                        ((void *)0)
# 1465 "stress-ng.c"
                            ;

 if (stat(path, &statbuf) < 0) {
  pr_inf("STAT FAIL: %s %d %s\n", path, 
# 1468 "stress-ng.c" 3 4
                                       (*__errno_location ())
# 1468 "stress-ng.c"
                                            , strerror(
# 1468 "stress-ng.c" 3 4
                                                       (*__errno_location ())
# 1468 "stress-ng.c"
                                                            ));
  return;
 }


 if (
# 1473 "stress-ng.c" 3 4
    ((((
# 1473 "stress-ng.c"
    statbuf.st_mode
# 1473 "stress-ng.c" 3 4
    )) & 0170000) == (0120000))
# 1473 "stress-ng.c"
                            )
  return;


 if (strstr(path, ".."))
  return;


 if (strncmp(path, temp_path, temp_path_len))
  return;

 n = scandir(path, &names, stress_dot_filter, alphasort);
 if (n < 0) {
  (void)rmdir(path);
  return;
 }

 while (n--) {
  size_t name_len = strlen(names[n]->d_name) + 1;







  if (ptr + name_len > end) {
   free(names[n]);
   continue;
  }

  snprintf(ptr, end - ptr, "/%s", names[n]->d_name);
  name_len = strlen(ptr);
  free(names[n]);





  switch (names[n]->d_type) {
  case 
# 1513 "stress-ng.c" 3 4
      DT_DIR
# 1513 "stress-ng.c"
            :
   stress_clean_dir_files(temp_path, temp_path_len, path, path_posn + name_len);
   (void)rmdir(path);
   break;
  case 
# 1517 "stress-ng.c" 3 4
      DT_LNK
# 1517 "stress-ng.c"
            :
  case 
# 1518 "stress-ng.c" 3 4
      DT_REG
# 1518 "stress-ng.c"
            :
   (void)unlink(path);
   break;
  default:
   break;
  }
# 1538 "stress-ng.c"
 }
 *ptr = '\0';
 free(names);
 (void)rmdir(path);
}







static void stress_clean_dir(
 const char *name,
 const pid_t pid,
 uint32_t instance)
{
 char path[
# 1555 "stress-ng.c" 3 4
          4096
# 1555 "stress-ng.c"
                  ];
 const char *temp_path = stress_get_temp_path();
 const size_t temp_path_len = strlen(temp_path);

 (void)stress_temp_dir(path, sizeof(path), name, pid, instance);

 if (access(path, 
# 1561 "stress-ng.c" 3 4
                 0
# 1561 "stress-ng.c"
                     ) == 0) {
  pr_dbg("%s: removing temporary files in %s\n", name, path);
  stress_clean_dir_files(temp_path, temp_path_len, path, strlen(path));
 }
}





static void __attribute__((__section__("mlocked_text"))) stress_wait_stressors(
 stress_stressor_t *stressors_list,
 
# 1573 "stress-ng.c" 3 4
_Bool 
# 1573 "stress-ng.c"
     *success,
 
# 1574 "stress-ng.c" 3 4
_Bool 
# 1574 "stress-ng.c"
     *resource_success,
 
# 1575 "stress-ng.c" 3 4
_Bool 
# 1575 "stress-ng.c"
     *metrics_success)
{
 stress_stressor_t *ss;

 if (g_opt_flags & (0x00000010000000ULL))
  stress_ignite_cpu_start();
# 1590 "stress-ng.c"
 if (g_opt_flags & (0x00000000200000ULL)) {
  cpu_set_t proc_mask;
  unsigned long int cpu = 0;
  const uint32_t ticks_per_sec =
   stress_get_ticks_per_second() * 5;
  const useconds_t usec_sleep =
   ticks_per_sec ? 1000000 / ticks_per_sec : 1000000 / 250;

  while (wait_flag) {
   const int32_t cpus = stress_get_processors_configured();
   
# 1600 "stress-ng.c" 3 4
  _Bool 
# 1600 "stress-ng.c"
       procs_alive = 
# 1600 "stress-ng.c" 3 4
                     0
# 1600 "stress-ng.c"
                          ;





   if (sched_getaffinity(0, sizeof(proc_mask), &proc_mask) < 0)
    goto do_wait;
   if (!
# 1608 "stress-ng.c" 3 4
       __sched_cpucount (sizeof (cpu_set_t), 
# 1608 "stress-ng.c"
       &proc_mask
# 1608 "stress-ng.c" 3 4
       )
# 1608 "stress-ng.c"
                            )
    goto do_wait;

   (void)shim_usleep(usec_sleep);

   for (ss = stressors_list; ss; ss = ss->next) {
    int32_t j;

    for (j = 0; j < ss->started_instances; j++) {
     const pid_t pid = ss->pids[j];

     if (pid) {
      cpu_set_t mask;
      int32_t cpu_num;
      int status, ret;

      ret = waitpid(pid, &status, 
# 1624 "stress-ng.c" 3 4
                                 1
# 1624 "stress-ng.c"
                                        );
      if ((ret < 0) && (
# 1625 "stress-ng.c" 3 4
                       (*__errno_location ()) 
# 1625 "stress-ng.c"
                             == 
# 1625 "stress-ng.c" 3 4
                                3
# 1625 "stress-ng.c"
                                     ))
       continue;
      procs_alive = 
# 1627 "stress-ng.c" 3 4
                   1
# 1627 "stress-ng.c"
                       ;

      do {
       cpu_num = stress_mwc32() % cpus;
      } while (!(
# 1631 "stress-ng.c" 3 4
                (__extension__ ({ size_t __cpu = (
# 1631 "stress-ng.c"
                cpu_num
# 1631 "stress-ng.c" 3 4
                ); __cpu / 8 < (sizeof (cpu_set_t)) ? ((((const __cpu_mask *) ((
# 1631 "stress-ng.c"
                &proc_mask
# 1631 "stress-ng.c" 3 4
                )->__bits))[((__cpu) / (8 * sizeof (__cpu_mask)))] & ((__cpu_mask) 1 << ((__cpu) % (8 * sizeof (__cpu_mask)))))) != 0 : 0; }))
# 1631 "stress-ng.c"
                                              ));

      
# 1633 "stress-ng.c" 3 4
     do __builtin_memset (
# 1633 "stress-ng.c"
     &mask
# 1633 "stress-ng.c" 3 4
     , '\0', sizeof (cpu_set_t)); while (0)
# 1633 "stress-ng.c"
                    ;
      
# 1634 "stress-ng.c" 3 4
     (__extension__ ({ size_t __cpu = (
# 1634 "stress-ng.c"
     cpu_num
# 1634 "stress-ng.c" 3 4
     ); __cpu / 8 < (sizeof (cpu_set_t)) ? (((__cpu_mask *) ((
# 1634 "stress-ng.c"
     &mask
# 1634 "stress-ng.c" 3 4
     )->__bits))[((__cpu) / (8 * sizeof (__cpu_mask)))] |= ((__cpu_mask) 1 << ((__cpu) % (8 * sizeof (__cpu_mask))))) : 0; }))
# 1634 "stress-ng.c"
                            ;
      if (sched_setaffinity(pid, sizeof(mask), &mask) < 0)
       goto do_wait;
     }
    }
   }
   if (!procs_alive)
    break;
   cpu++;
  }
 }
do_wait:

 for (ss = stressors_list; ss; ss = ss->next) {
  int32_t j;

  for (j = 0; j < ss->started_instances; j++) {
   pid_t pid;
redo:
   pid = ss->pids[j];
   if (pid) {
    int status, ret;
    
# 1656 "stress-ng.c" 3 4
   _Bool 
# 1656 "stress-ng.c"
        do_abort = 
# 1656 "stress-ng.c" 3 4
                   0
# 1656 "stress-ng.c"
                        ;
    const char *stressor_name = stress_munge_underscore(ss->stressor->name);
    char name[64];

    (void)snprintf(name, sizeof(name), "%s-%s", g_app_name,
                                        stress_munge_underscore(stressor_name));

    ret = shim_waitpid(pid, &status, 0);
    if (ret > 0) {
     if (
# 1665 "stress-ng.c" 3 4
        (((signed char) (((
# 1665 "stress-ng.c"
        status
# 1665 "stress-ng.c" 3 4
        ) & 0x7f) + 1) >> 1) > 0)
# 1665 "stress-ng.c"
                           ) {


      const char *signame = strsignal(
# 1668 "stress-ng.c" 3 4
                                     ((
# 1668 "stress-ng.c"
                                     status
# 1668 "stress-ng.c" 3 4
                                     ) & 0x7f)
# 1668 "stress-ng.c"
                                                     );

      pr_dbg("process [%d] (stress-ng-%s) terminated on signal: %d (%s)\n",
       ret, stressor_name,
       
# 1672 "stress-ng.c" 3 4
      ((
# 1672 "stress-ng.c"
      status
# 1672 "stress-ng.c" 3 4
      ) & 0x7f)
# 1672 "stress-ng.c"
                      , signame);
# 1688 "stress-ng.c"
      if (stress_process_oomed(ret)) {
       pr_dbg("process [%d] (stress-ng-%s) was killed by the OOM killer\n",
        ret, stressor_name);
      } else if (
# 1691 "stress-ng.c" 3 4
                ((
# 1691 "stress-ng.c"
                status
# 1691 "stress-ng.c" 3 4
                ) & 0x7f) 
# 1691 "stress-ng.c"
                                 == 
# 1691 "stress-ng.c" 3 4
                                    9
# 1691 "stress-ng.c"
                                           ) {
       pr_dbg("process [%d] (stress-ng-%s) was possibly killed by the OOM killer\n",
        ret, stressor_name);
      } else {
       *success = 
# 1695 "stress-ng.c" 3 4
                 0
# 1695 "stress-ng.c"
                      ;
      }
     }
     switch (
# 1698 "stress-ng.c" 3 4
            (((
# 1698 "stress-ng.c"
            status
# 1698 "stress-ng.c" 3 4
            ) & 0xff00) >> 8)
# 1698 "stress-ng.c"
                               ) {
     case 
# 1699 "stress-ng.c" 3 4
         0
# 1699 "stress-ng.c"
                     :
      break;
     case (3):
      pr_err("process [%d] (stress-ng-%s) aborted early, out of system resources\n",
       ret, stressor_name);
      *resource_success = 
# 1704 "stress-ng.c" 3 4
                         0
# 1704 "stress-ng.c"
                              ;
      do_abort = 
# 1705 "stress-ng.c" 3 4
                1
# 1705 "stress-ng.c"
                    ;
      break;
     case (4):
      do_abort = 
# 1708 "stress-ng.c" 3 4
                1
# 1708 "stress-ng.c"
                    ;
      break;
     case (6):
      pr_dbg("process [%d] (stress-ng-%s) aborted via exit() which was not expected\n",
       ret, stressor_name);
      do_abort = 
# 1713 "stress-ng.c" 3 4
                1
# 1713 "stress-ng.c"
                    ;
      break;
     case (7):
      *metrics_success = 
# 1716 "stress-ng.c" 3 4
                        0
# 1716 "stress-ng.c"
                             ;
      break;
     default:
      pr_err("process %d (stress-ng-%s) terminated with an error, exit status=%d (%s)\n",
       ret, stressor_name, 
# 1720 "stress-ng.c" 3 4
                          (((
# 1720 "stress-ng.c"
                          status
# 1720 "stress-ng.c" 3 4
                          ) & 0xff00) >> 8)
# 1720 "stress-ng.c"
                                             ,
       stress_exit_status_to_string(
# 1721 "stress-ng.c" 3 4
                                   (((
# 1721 "stress-ng.c"
                                   status
# 1721 "stress-ng.c" 3 4
                                   ) & 0xff00) >> 8)
# 1721 "stress-ng.c"
                                                      ));
      *success = 
# 1722 "stress-ng.c" 3 4
                0
# 1722 "stress-ng.c"
                     ;
      do_abort = 
# 1723 "stress-ng.c" 3 4
                1
# 1723 "stress-ng.c"
                    ;
      break;
     }
     if ((g_opt_flags & (0x00000200000000ULL)) && do_abort) {
      keep_stressing_set_flag(
# 1727 "stress-ng.c" 3 4
                             0
# 1727 "stress-ng.c"
                                  );
      wait_flag = 
# 1728 "stress-ng.c" 3 4
                 0
# 1728 "stress-ng.c"
                      ;
      stress_kill_stressors(
# 1729 "stress-ng.c" 3 4
                           14
# 1729 "stress-ng.c"
                                  );
     }

     stress_stressor_finished(&ss->pids[j]);
     pr_dbg("process [%d] terminated\n", ret);

     stress_clean_dir(name, pid, j);

    } else if (ret == -1) {

     if (
# 1739 "stress-ng.c" 3 4
        (*__errno_location ()) 
# 1739 "stress-ng.c"
              == 
# 1739 "stress-ng.c" 3 4
                 4
# 1739 "stress-ng.c"
                      )
      goto redo;

     if (
# 1742 "stress-ng.c" 3 4
        (*__errno_location ()) 
# 1742 "stress-ng.c"
              == 
# 1742 "stress-ng.c" 3 4
                 10
# 1742 "stress-ng.c"
                       )
      stress_stressor_finished(&ss->pids[j]);
    }
   }
  }
 }
 if (g_opt_flags & (0x00000010000000ULL))
  stress_ignite_cpu_stop();
}





static void __attribute__((__section__("mlocked_text"))) stress_handle_terminate(int signum)
{
 terminate_signum = signum;
 keep_stressing_set_flag(
# 1759 "stress-ng.c" 3 4
                        0
# 1759 "stress-ng.c"
                             );
 stress_kill_stressors(
# 1760 "stress-ng.c" 3 4
                      14
# 1760 "stress-ng.c"
                             );

 switch (signum) {
 case 
# 1763 "stress-ng.c" 3 4
     4
# 1763 "stress-ng.c"
           :
 case 
# 1764 "stress-ng.c" 3 4
     11
# 1764 "stress-ng.c"
            :
 case 
# 1765 "stress-ng.c" 3 4
     8
# 1765 "stress-ng.c"
           :
 case 
# 1766 "stress-ng.c" 3 4
     7
# 1766 "stress-ng.c"
           :
  (void)fprintf(
# 1767 "stress-ng.c" 3 4
               stderr
# 1767 "stress-ng.c"
                     , "%s: info:  [%d] terminated with unexpected signal %s\n",
   g_app_name, (int)getpid(), stress_strsignal(signum));
  (void)fflush(
# 1769 "stress-ng.c" 3 4
              stderr
# 1769 "stress-ng.c"
                    );
  _exit((5));
  break;
 default:
  break;
 }
}





static stress_stressor_t *stress_get_nth_stressor(const uint32_t n)
{
 stress_stressor_t *ss = stressors_head;
 uint32_t i;

 for (i = 0; ss && (i < n); i++)
  ss = ss->next;

 return ss;
}





static uint32_t stress_get_num_stressors(void)
{
 uint32_t n = 0;
 stress_stressor_t *ss;

 for (ss = stressors_head; ss; ss = ss->next)
  n++;

 return n;
}





static void stress_stressors_free(void)
{
 stress_stressor_t *ss = stressors_head;

 while (ss) {
  stress_stressor_t *next = ss->next;

  free(ss->pids);
  free(ss->stats);
  free(ss);

  ss = next;
 }

 stressors_head = 
# 1825 "stress-ng.c" 3 4
                 ((void *)0)
# 1825 "stress-ng.c"
                     ;
 stressors_tail = 
# 1826 "stress-ng.c" 3 4
                 ((void *)0)
# 1826 "stress-ng.c"
                     ;
}





static uint32_t stress_get_total_num_instances(stress_stressor_t *stressors_list)
{
 uint32_t total_num_instances = 0;
 stress_stressor_t *ss;

 for (ss = stressors_list; ss; ss = ss->next)
  total_num_instances += ss->num_instances;

 return total_num_instances;
}





static void stress_child_atexit(void)
{
 _exit((6));
}





static void __attribute__((__section__("mlocked_text"))) stress_run(
 stress_stressor_t *stressors_list,
 double *duration,
 
# 1860 "stress-ng.c" 3 4
_Bool 
# 1860 "stress-ng.c"
     *success,
 
# 1861 "stress-ng.c" 3 4
_Bool 
# 1861 "stress-ng.c"
     *resource_success,
 
# 1862 "stress-ng.c" 3 4
_Bool 
# 1862 "stress-ng.c"
     *metrics_success,
 stress_checksum_t **checksum)
{
 double time_start, time_finish;
 int32_t started_instances = 0;

 wait_flag = 
# 1868 "stress-ng.c" 3 4
            1
# 1868 "stress-ng.c"
                ;
 time_start = stress_time_now();
 pr_dbg("starting stressors\n");




 for (g_stressor_current = stressors_list; g_stressor_current; g_stressor_current = g_stressor_current->next) {
  int32_t j;




  for (j = 0; j < g_stressor_current->num_instances; j++, (*checksum)++) {
   int rc = 
# 1882 "stress-ng.c" 3 4
           0
# 1882 "stress-ng.c"
                       ;
   pid_t pid;
   char name[64];
   int64_t backoff = (0);
   int32_t ionice_class = (-1);
   int32_t ionice_level = (-1);
   stress_stats_t *stats = g_stressor_current->stats[j];

   if (g_opt_timeout && (stress_time_now() - time_start > g_opt_timeout))
    goto abort;

   (void)stress_get_setting("backoff", &backoff);
   (void)stress_get_setting("ionice-class", &ionice_class);
   (void)stress_get_setting("ionice-level", &ionice_level);

   stats->counter_ready = 
# 1897 "stress-ng.c" 3 4
                         1
# 1897 "stress-ng.c"
                             ;
   stats->counter = 0;
   stats->checksum = *checksum;
again:
   if (!keep_stressing_flag())
    break;
   pid = fork();
   switch (pid) {
   case -1:
    if (
# 1906 "stress-ng.c" 3 4
       (*__errno_location ()) 
# 1906 "stress-ng.c"
             == 
# 1906 "stress-ng.c" 3 4
                11
# 1906 "stress-ng.c"
                      ) {
     (void)shim_usleep(100000);
     goto again;
    }
    pr_err("Cannot fork: errno=%d (%s)\n",
     
# 1911 "stress-ng.c" 3 4
    (*__errno_location ())
# 1911 "stress-ng.c"
         , strerror(
# 1911 "stress-ng.c" 3 4
                    (*__errno_location ())
# 1911 "stress-ng.c"
                         ));
    stress_kill_stressors(
# 1912 "stress-ng.c" 3 4
                         14
# 1912 "stress-ng.c"
                                );
    goto wait_for_stressors;
   case 0:

    (void)snprintf(name, sizeof(name), "%s-%s", g_app_name,
     stress_munge_underscore(g_stressor_current->stressor->name));
    stress_set_proc_state(name, (0));

    (void)sched_settings_apply(
# 1920 "stress-ng.c" 3 4
                              1
# 1920 "stress-ng.c"
                                  );
    (void)atexit(stress_child_atexit);
    (void)setpgid(0, g_pgrp);
    if (stress_set_handler(name, 
# 1923 "stress-ng.c" 3 4
                                1
# 1923 "stress-ng.c"
                                    ) < 0) {
     rc = 
# 1924 "stress-ng.c" 3 4
         1
# 1924 "stress-ng.c"
                     ;
     goto child_exit;
    }
    stress_parent_died_alarm();
    stress_process_dumpable(
# 1928 "stress-ng.c" 3 4
                           0
# 1928 "stress-ng.c"
                                );
    stress_set_timer_slack();

    if (g_opt_timeout)
     (void)alarm(g_opt_timeout);

    stress_set_proc_state(name, (1));
    stress_mwc_reseed();
    stress_set_oom_adjustment(name, 
# 1936 "stress-ng.c" 3 4
                                   0
# 1936 "stress-ng.c"
                                        );
    stress_set_max_limits();
    stress_set_iopriority(ionice_class, ionice_level);

    (void)umask(0077);

    pr_dbg("%s: started [%d] (instance %" 
# 1942 "stress-ng.c" 3 4
                                         "u" 
# 1942 "stress-ng.c"
                                                ")\n",
     name, (int)getpid(), j);

    stats->start = stats->finish = stress_time_now();


    if (g_opt_flags & (0x00000001000000ULL))
     (void)stress_perf_open(&stats->sp);

    (void)shim_usleep(backoff * started_instances);


    if (g_opt_flags & (0x00000001000000ULL))
     (void)stress_perf_enable(&stats->sp);

    if (keep_stressing_flag() && !(g_opt_flags & (0x00000000000010ULL))) {
     const stress_args_t args = {
      .counter = &stats->counter,
      .counter_ready = &stats->counter_ready,
      .name = name,
      .max_ops = g_stressor_current->bogo_ops,
      .instance = j,
      .num_instances = g_stressor_current->num_instances,
      .pid = getpid(),
      .ppid = getppid(),
      .page_size = stress_get_pagesize(),
      .mapped = &g_shared->mapped
     };

     (void)memset(*checksum, 0, sizeof(**checksum));
     rc = g_stressor_current->stressor->info->stressor(&args);
     pr_fail_check(&rc);
     if (rc == 
# 1974 "stress-ng.c" 3 4
              0
# 1974 "stress-ng.c"
                          ) {
      stats->run_ok = 
# 1975 "stress-ng.c" 3 4
                     1
# 1975 "stress-ng.c"
                         ;
      (*checksum)->data.run_ok = 
# 1976 "stress-ng.c" 3 4
                                1
# 1976 "stress-ng.c"
                                    ;
     }
     stress_set_proc_state(name, (4));





     if (!stats->counter_ready) {
      pr_inf("%s: NOTE: bogo-ops counter in non-ready state, metrics are untrustworthy (process may have been terminated prematurely)\n",
       name);
      rc = (7);
     }
     (*checksum)->data.counter = *args.counter;
     stress_hash_checksum(*checksum);
    }


    if (g_opt_flags & (0x00000001000000ULL)) {
     (void)stress_perf_disable(&stats->sp);
     (void)stress_perf_close(&stats->sp);
    }


    if (g_opt_flags & (0x00000004000000ULL))
     (void)stress_tz_get_temperatures(&g_shared->tz_info, &stats->tz);

    stats->finish = stress_time_now();
    if (times(&stats->tms) == (clock_t)-1) {
     pr_dbg("times failed: errno=%d (%s)\n",
      
# 2006 "stress-ng.c" 3 4
     (*__errno_location ())
# 2006 "stress-ng.c"
          , strerror(
# 2006 "stress-ng.c" 3 4
                     (*__errno_location ())
# 2006 "stress-ng.c"
                          ));
    }
    pr_dbg("%s: exited [%d] (instance %" 
# 2008 "stress-ng.c" 3 4
                                        "u" 
# 2008 "stress-ng.c"
                                               ")\n",
     name, (int)getpid(), j);

child_exit:
    stress_stressors_free();
    stress_cache_free();
    stress_settings_free();
    (void)stress_ftrace_free();

    if ((rc != 0) && (g_opt_flags & (0x00000200000000ULL))) {
     keep_stressing_set_flag(
# 2018 "stress-ng.c" 3 4
                            0
# 2018 "stress-ng.c"
                                 );
     wait_flag = 
# 2019 "stress-ng.c" 3 4
                0
# 2019 "stress-ng.c"
                     ;
     (void)kill(getppid(), 
# 2020 "stress-ng.c" 3 4
                          14
# 2020 "stress-ng.c"
                                 );
    }
    stress_set_proc_state(name, (5));
    if (terminate_signum)
     rc = (5);
    _exit(rc);
   default:
    if (pid > -1) {
     (void)setpgid(pid, g_pgrp);
     g_stressor_current->pids[j] = pid;
     g_stressor_current->started_instances++;
     started_instances++;
     stress_ftrace_add_pid(pid);
    }


    if (!keep_stressing_flag()) {
     pr_dbg("abort signal during startup, cleaning up\n");
     stress_kill_stressors(
# 2038 "stress-ng.c" 3 4
                          14
# 2038 "stress-ng.c"
                                 );
     goto wait_for_stressors;
    }
    break;
   }
  }
 }
 (void)stress_set_handler("stress-ng", 
# 2045 "stress-ng.c" 3 4
                                      0
# 2045 "stress-ng.c"
                                           );
 if (g_opt_timeout)
  (void)alarm(g_opt_timeout);

abort:
 pr_dbg("%d stressor%s started\n", started_instances,
   started_instances == 1 ? "" : "s");

wait_for_stressors:
 stress_wait_stressors(stressors_list, success, resource_success, metrics_success);
 time_finish = stress_time_now();

 *duration += time_finish - time_start;
}





static int stress_show_stressors(void)
{
 char *newstr, *str = 
# 2066 "stress-ng.c" 3 4
                     ((void *)0)
# 2066 "stress-ng.c"
                         ;
 ssize_t len = 0;
 char buffer[64];
 
# 2069 "stress-ng.c" 3 4
_Bool 
# 2069 "stress-ng.c"
     previous = 
# 2069 "stress-ng.c" 3 4
                0
# 2069 "stress-ng.c"
                     ;
 stress_stressor_t *ss;

 for (ss = stressors_head; ss; ss = ss->next) {
  const int32_t n = ss->num_instances;

  if (n) {
   const ssize_t buffer_len =
    snprintf(buffer, sizeof(buffer),
     "%s %" 
# 2078 "stress-ng.c" 3 4
           "d" 
# 2078 "stress-ng.c"
                  " %s",
     previous ? "," : "", n,
     stress_munge_underscore(ss->stressor->name));
   previous = 
# 2081 "stress-ng.c" 3 4
             1
# 2081 "stress-ng.c"
                 ;
   if (buffer_len >= 0) {
    newstr = realloc(str, len + buffer_len + 1);
    if (!newstr) {
     pr_err("Cannot allocate temporary buffer\n");
     free(str);
     return -1;
    }
    str = newstr;
    (void)shim_strlcpy(str + len, buffer, buffer_len + 1);
   }
   len += buffer_len;
  }
 }
 pr_inf("dispatching hogs:%s\n", str ? str : "");
 free(str);
 (void)fflush(
# 2097 "stress-ng.c" 3 4
             stdout
# 2097 "stress-ng.c"
                   );

 return 0;
}







static void stress_metrics_check(
# 2108 "stress-ng.c" 3 4
                                _Bool 
# 2108 "stress-ng.c"
                                     *success)
{
 stress_stressor_t *ss;
 
# 2111 "stress-ng.c" 3 4
_Bool 
# 2111 "stress-ng.c"
     ok = 
# 2111 "stress-ng.c" 3 4
          1
# 2111 "stress-ng.c"
              ;

 for (ss = stressors_head; ss; ss = ss->next) {
  int32_t j;

  for (j = 0; j < ss->started_instances; j++) {
   const stress_stats_t *const stats = ss->stats[j];
   const stress_checksum_t *checksum = stats->checksum;
   stress_checksum_t stats_checksum;

   if (checksum == 
# 2121 "stress-ng.c" 3 4
                  ((void *)0)
# 2121 "stress-ng.c"
                      ) {
    pr_fail("%s instance %d unexpected null checksum data\n",
     ss->stressor->name, j);
    ok = 
# 2124 "stress-ng.c" 3 4
        0
# 2124 "stress-ng.c"
             ;
    continue;
   }

   (void)memset(&stats_checksum, 0, sizeof(stats_checksum));
   stats_checksum.data.counter = stats->counter;
   stats_checksum.data.run_ok = stats->run_ok;
   stress_hash_checksum(&stats_checksum);

   if (stats->counter != checksum->data.counter) {
    pr_fail("%s instance %d corrupted bogo-ops counter, %" 
# 2134 "stress-ng.c" 3 4
                                                          "l" "u" 
# 2134 "stress-ng.c"
                                                                 " vs %" 
# 2134 "stress-ng.c" 3 4
                                                                         "l" "u" 
# 2134 "stress-ng.c"
                                                                                "\n",
     ss->stressor->name, j,
     stats->counter, checksum->data.counter);
    ok = 
# 2137 "stress-ng.c" 3 4
        0
# 2137 "stress-ng.c"
             ;
   }
   if (stats->run_ok != checksum->data.run_ok) {
    pr_fail("%s instance %d corrupted run flag, %d vs %d\n",
     ss->stressor->name, j,
     stats->run_ok, checksum->data.run_ok);
    ok = 
# 2143 "stress-ng.c" 3 4
        0
# 2143 "stress-ng.c"
             ;
   }
   if (stats_checksum.hash != checksum->hash) {
    pr_fail("%s instance %d hash error in bogo-ops counter and run flag, %" 
# 2146 "stress-ng.c" 3 4
                                                                           "u" 
# 2146 "stress-ng.c"
                                                                                  " vs %" 
# 2146 "stress-ng.c" 3 4
                                                                                          "u" 
# 2146 "stress-ng.c"
                                                                                                 "\n",
     ss->stressor->name, j,
     stats_checksum.hash, checksum->hash);
    ok = 
# 2149 "stress-ng.c" 3 4
        0
# 2149 "stress-ng.c"
             ;
   }
  }
 }
 if (ok) {
  pr_dbg("metrics-check: all stressor metrics validated and sane\n");
 } else {
  pr_fail("metrics-check: stressor metrics corrupted, data is compromised\n");
  *success = 
# 2157 "stress-ng.c" 3 4
            0
# 2157 "stress-ng.c"
                 ;
 }
}





static void stress_metrics_dump(
 FILE *yaml,
 const int32_t ticks_per_sec)
{
 stress_stressor_t *ss;

 if (g_opt_flags & (0x00000000000200ULL)) {
  pr_inf("%-13s %9.9s %9.9s %9.9s %9.9s %12s %14s\n",
   "stressor", "bogo ops", "real time", "usr time",
   "sys time", "bogo ops/s", "bogo ops/s");
  pr_inf("%-13s %9.9s %9.9s %9.9s %9.9s %12s %14s\n",
   "", "", "(secs) ", "(secs) ", "(secs) ", "(real time)",
   "(usr+sys time)");
 } else {
  pr_inf("%-13s %9.9s %9.9s %9.9s %9.9s %12s %14s %12.12s\n",
   "stressor", "bogo ops", "real time", "usr time",
   "sys time", "bogo ops/s", "bogo ops/s", "CPU used per");
  pr_inf("%-13s %9.9s %9.9s %9.9s %9.9s %12s %14s %12.12s\n",
   "", "", "(secs) ", "(secs) ", "(secs) ", "(real time)",
   "(usr+sys time)","instance (%)");
 }
 pr_yaml(yaml, "metrics:\n");

 for (ss = stressors_head; ss; ss = ss->next) {
  uint64_t c_total = 0, u_total = 0, s_total = 0, us_total;
  double r_total = 0.0;
  int32_t j;
  const char *munged = stress_munge_underscore(ss->stressor->name);
  double u_time, s_time, t_time, bogo_rate_r_time, bogo_rate, cpu_usage;
  
# 2194 "stress-ng.c" 3 4
 _Bool 
# 2194 "stress-ng.c"
      run_ok = 
# 2194 "stress-ng.c" 3 4
               0
# 2194 "stress-ng.c"
                    ;

  for (j = 0; j < ss->started_instances; j++) {
   const stress_stats_t *const stats = ss->stats[j];

   run_ok |= stats->run_ok;
   c_total += stats->counter;
   u_total += stats->tms.tms_utime +
       stats->tms.tms_cutime;
   s_total += stats->tms.tms_stime +
       stats->tms.tms_cstime;
   r_total += stats->finish - stats->start;
  }

  us_total = u_total + s_total;

  r_total = ss->started_instances ?
   r_total / (double)ss->started_instances : 0.0;

  if ((g_opt_flags & (0x00000000000200ULL)) &&
      (c_total == 0) && (!run_ok))
   continue;

  u_time = (ticks_per_sec > 0) ? (double)u_total / (double)ticks_per_sec : 0.0;
  s_time = (ticks_per_sec > 0) ? (double)s_total / (double)ticks_per_sec : 0.0;
  t_time = u_time + s_time;

  bogo_rate_r_time = (r_total > 0.0) ? (double)c_total / r_total : 0.0;
  bogo_rate = (us_total > 0) ? (double)c_total / ((double)us_total / (double)ticks_per_sec) : 0.0;
  cpu_usage = (r_total > 0) ? 100.0 * t_time / r_total : 0.0;
  cpu_usage = ss->started_instances ? cpu_usage / ss->started_instances : 0.0;

  if (g_opt_flags & (0x00000000000200ULL)) {
   pr_inf("%-13s %9" 
# 2227 "stress-ng.c" 3 4
                    "l" "u" 
# 2227 "stress-ng.c"
                           " %9.2f %9.2f %9.2f %12.2f %14.2f\n",
    munged,
    c_total,
    r_total,
    u_time,
    s_time,
    bogo_rate_r_time,
    bogo_rate);
  } else {

   pr_inf("%-13s %9" 
# 2237 "stress-ng.c" 3 4
                    "l" "u" 
# 2237 "stress-ng.c"
                           " %9.2f %9.2f %9.2f %12.2f %14.2f %12.2f\n",
    munged,
    c_total,
    r_total,
    u_time,
    s_time,
    bogo_rate_r_time,
    bogo_rate,
    cpu_usage);
  }

  pr_yaml(yaml, "    - stressor: %s\n", munged);
  pr_yaml(yaml, "      bogo-ops: %" 
# 2249 "stress-ng.c" 3 4
                                   "l" "u" 
# 2249 "stress-ng.c"
                                          "\n", c_total);
  pr_yaml(yaml, "      bogo-ops-per-second-usr-sys-time: %f\n", bogo_rate);
  pr_yaml(yaml, "      bogo-ops-per-second-real-time: %f\n", bogo_rate_r_time);
  pr_yaml(yaml, "      wall-clock-time: %f\n", r_total);
  pr_yaml(yaml, "      user-time: %f\n", u_time);
  pr_yaml(yaml, "      system-time: %f\n", s_time);
  pr_yaml(yaml, "      cpu-usage-per-instance: %f\n", cpu_usage);
  pr_yaml(yaml, "\n");
 }
}





static void stress_times_dump(
 FILE *yaml,
 const int32_t ticks_per_sec,
 const double duration)
{
 struct tms buf;
 double total_cpu_time = stress_get_processors_configured() * duration;
 double u_time, s_time, t_time, u_pc, s_pc, t_pc;
 double min1, min5, min15;
 int rc;

 if (times(&buf) == (clock_t)-1) {
  pr_err("cannot get run time information: errno=%d (%s)\n",
   
# 2277 "stress-ng.c" 3 4
  (*__errno_location ())
# 2277 "stress-ng.c"
       , strerror(
# 2277 "stress-ng.c" 3 4
                  (*__errno_location ())
# 2277 "stress-ng.c"
                       ));
  return;
 }
 rc = stress_get_load_avg(&min1, &min5, &min15);

 u_time = (float)buf.tms_cutime / (float)ticks_per_sec;
 s_time = (float)buf.tms_cstime / (float)ticks_per_sec;
 t_time = ((float)buf.tms_cutime + (float)buf.tms_cstime) / (float)ticks_per_sec;
 u_pc = (total_cpu_time > 0.0) ? 100.0 * u_time / total_cpu_time : 0.0;
 s_pc = (total_cpu_time > 0.0) ? 100.0 * s_time / total_cpu_time : 0.0;
 t_pc = (total_cpu_time > 0.0) ? 100.0 * t_time / total_cpu_time : 0.0;

 pr_inf("for a %.2fs run time:\n", duration);
 pr_inf("  %8.2fs available CPU time\n",
  total_cpu_time);
 pr_inf("  %8.2fs user time   (%6.2f%%)\n", u_time, u_pc);
 pr_inf("  %8.2fs system time (%6.2f%%)\n", s_time, s_pc);
 pr_inf("  %8.2fs total time  (%6.2f%%)\n", t_time, t_pc);

 if (!rc) {
  pr_inf("load average: %.2f %.2f %.2f\n",
   min1, min5, min15);
 }

 pr_yaml(yaml, "times:\n");
 pr_yaml(yaml, "      run-time: %f\n", duration);
 pr_yaml(yaml, "      available-cpu-time: %f\n", total_cpu_time);
 pr_yaml(yaml, "      user-time: %f\n", u_time);
 pr_yaml(yaml, "      system-time: %f\n", s_time);
 pr_yaml(yaml, "      total-time: %f\n", t_time);
 pr_yaml(yaml, "      user-time-percent: %f\n", u_pc);
 pr_yaml(yaml, "      system-time-percent: %f\n", s_pc);
 pr_yaml(yaml, "      total-time-percent: %f\n", t_pc);
 if (!rc) {
  pr_yaml(yaml, "      load-average-1-minute: %f\n", min1);
  pr_yaml(yaml, "      load-average-5-minute: %f\n", min5);
  pr_yaml(yaml, "      load-average-15-minute: %f\n", min15);
 }
}





static void stress_log_args(int argc, char **argv)
{
 size_t i, len, arglen[argc];
 char *buf;

 for (len = 0, i = 0; i < (size_t)argc; i++) {
  arglen[i] = strlen(argv[i]);
  len += arglen[i] + 1;
 }

 buf = calloc(len, sizeof(*buf));
 if (!buf)
  return;

 for (len = 0, i = 0; i < (size_t)argc; i++) {
  if (i) {
   (void)shim_strlcat(buf + len, " ", 1);
   len++;
  }
  (void)shim_strlcat(buf + len, argv[i], arglen[i]);
  len += arglen[i];
 }
 syslog(
# 2343 "stress-ng.c" 3 4
6
# 2343 "stress-ng.c"
, "invoked with '%s' by user %d", buf, getuid());
 free(buf);
}





void stress_log_system_mem_info(void)
{



 struct sysinfo info;

 (void)memset(&info, 0, sizeof(info));
 if (sysinfo(&info) == 0) {
  syslog(
# 2360 "stress-ng.c" 3 4
 6
# 2360 "stress-ng.c"
 , "memory (MB): total %.2f, " "free %.2f, " "shared %.2f, " "buffer %.2f, " "swap %.2f, " "free swap %.2f\n", (double)(info.totalram * info.mem_unit) / (1ULL << 20), (double)(info.freeram * info.mem_unit) / (1ULL << 20), (double)(info.sharedram * info.mem_unit) / (1ULL << 20), (double)(info.bufferram * info.mem_unit) / (1ULL << 20), (double)(info.totalswap * info.mem_unit) / (1ULL << 20), (double)(info.freeswap * info.mem_unit) / (1ULL << 20))
# 2371 "stress-ng.c"
                                                ;
 }

}





static void stress_log_system_info(void)
{



 struct utsname buf;

 if (uname(&buf) == 0) {
  syslog(
# 2388 "stress-ng.c" 3 4
 6
# 2388 "stress-ng.c"
 , "system: '%s' %s %s %s %s\n", buf.nodename, buf.sysname, buf.release, buf.version, buf.machine)




               ;
 }

}

static void *stress_map_page(int prot, char *prot_str, size_t page_size)
{
 void *ptr;

 ptr = mmap(
# 2402 "stress-ng.c" 3 4
           ((void *)0)
# 2402 "stress-ng.c"
               , page_size, prot,
  
# 2403 "stress-ng.c" 3 4
 0x02 
# 2403 "stress-ng.c"
             | 
# 2403 "stress-ng.c" 3 4
               0x20
# 2403 "stress-ng.c"
                       , -1, 0);
 if (ptr == 
# 2404 "stress-ng.c" 3 4
           ((void *) -1)
# 2404 "stress-ng.c"
                     ) {
  pr_err("cannot mmap %s shared page, errno=%d (%s)\n",
   prot_str, 
# 2406 "stress-ng.c" 3 4
            (*__errno_location ())
# 2406 "stress-ng.c"
                 , strerror(
# 2406 "stress-ng.c" 3 4
                            (*__errno_location ())
# 2406 "stress-ng.c"
                                 ));
 }
 return ptr;
}







static inline void stress_shared_map(const size_t num_procs)
{
 const size_t page_size = stress_get_pagesize();
 size_t len = sizeof(stress_shared_t) + (sizeof(stress_stats_t) * num_procs);
 size_t sz = (len + (page_size << 1)) & ~(page_size - 1);

 void *last_page;


 g_shared = (stress_shared_t *)mmap(
# 2426 "stress-ng.c" 3 4
                                   ((void *)0)
# 2426 "stress-ng.c"
                                       , sz, 
# 2426 "stress-ng.c" 3 4
                                             0x1 
# 2426 "stress-ng.c"
                                                       | 
# 2426 "stress-ng.c" 3 4
                                                         0x2
# 2426 "stress-ng.c"
                                                                   ,
  
# 2427 "stress-ng.c" 3 4
 0x01 
# 2427 "stress-ng.c"
            | 
# 2427 "stress-ng.c" 3 4
              0x20
# 2427 "stress-ng.c"
                      , -1, 0);
 if (g_shared == 
# 2428 "stress-ng.c" 3 4
                ((void *) -1)
# 2428 "stress-ng.c"
                          ) {
  pr_err("cannot mmap to shared memory region, errno=%d (%s)\n",
   
# 2430 "stress-ng.c" 3 4
  (*__errno_location ())
# 2430 "stress-ng.c"
       , strerror(
# 2430 "stress-ng.c" 3 4
                  (*__errno_location ())
# 2430 "stress-ng.c"
                       ));
  stress_stressors_free();
  exit(
# 2432 "stress-ng.c" 3 4
      1
# 2432 "stress-ng.c"
                  );
 }


 (void)memset(g_shared, 0, sz);
 g_shared->length = sz;


 last_page = ((uint8_t *)g_shared) + sz - page_size;


 (void)mprotect(last_page, page_size, 
# 2443 "stress-ng.c" 3 4
                                     0x0
# 2443 "stress-ng.c"
                                              );
# 2469 "stress-ng.c"
 len = sizeof(stress_checksum_t) * (8192);
 sz = (len + page_size) & ~(page_size - 1);
 g_shared->checksums = (stress_checksum_t *)mmap(
# 2471 "stress-ng.c" 3 4
                                                ((void *)0)
# 2471 "stress-ng.c"
                                                    , sz,
  
# 2472 "stress-ng.c" 3 4
 0x1 
# 2472 "stress-ng.c"
           | 
# 2472 "stress-ng.c" 3 4
             0x2
# 2472 "stress-ng.c"
                       , 
# 2472 "stress-ng.c" 3 4
                         0x01 
# 2472 "stress-ng.c"
                                    | 
# 2472 "stress-ng.c" 3 4
                                      0x20
# 2472 "stress-ng.c"
                                              , -1, 0);
 if (g_shared->checksums == 
# 2473 "stress-ng.c" 3 4
                           ((void *) -1)
# 2473 "stress-ng.c"
                                     ) {
  pr_err("cannot mmap checksums, errno=%d (%s)\n",
   
# 2475 "stress-ng.c" 3 4
  (*__errno_location ())
# 2475 "stress-ng.c"
       , strerror(
# 2475 "stress-ng.c" 3 4
                  (*__errno_location ())
# 2475 "stress-ng.c"
                       ));
  goto err_unmap_shared;
 }
 (void)memset(g_shared->checksums, 0, sz);
 g_shared->checksums_length = sz;







 g_shared->mapped.page_none = stress_map_page(
# 2487 "stress-ng.c" 3 4
                                             0x0
# 2487 "stress-ng.c"
                                                      , "PROT_NONE", page_size);
 if (g_shared->mapped.page_none == 
# 2488 "stress-ng.c" 3 4
                                  ((void *) -1)
# 2488 "stress-ng.c"
                                            )
  goto err_unmap_checksums;
 g_shared->mapped.page_ro = stress_map_page(
# 2490 "stress-ng.c" 3 4
                                           0x1
# 2490 "stress-ng.c"
                                                    , "PROT_READ", page_size);
 if (g_shared->mapped.page_ro == 
# 2491 "stress-ng.c" 3 4
                                ((void *) -1)
# 2491 "stress-ng.c"
                                          )
  goto err_unmap_page_none;
 g_shared->mapped.page_wo = stress_map_page(
# 2493 "stress-ng.c" 3 4
                                           0x1
# 2493 "stress-ng.c"
                                                    , "PROT_WRITE", page_size);
 if (g_shared->mapped.page_wo == 
# 2494 "stress-ng.c" 3 4
                                ((void *) -1)
# 2494 "stress-ng.c"
                                          )
  goto err_unmap_page_ro;
 return;

err_unmap_page_ro:
 (void)munmap((void *)g_shared->mapped.page_ro, page_size);
err_unmap_page_none:
 (void)munmap((void *)g_shared->mapped.page_none, page_size);
err_unmap_checksums:
 (void)munmap((void *)g_shared->checksums, g_shared->checksums_length);
err_unmap_shared:
 (void)munmap((void *)g_shared, g_shared->length);
 stress_stressors_free();
 exit(
# 2507 "stress-ng.c" 3 4
     1
# 2507 "stress-ng.c"
                 );

}





void stress_shared_unmap(void)
{
 const size_t page_size = stress_get_pagesize();

 (void)munmap((void *)g_shared->mapped.page_wo, page_size);
 (void)munmap((void *)g_shared->mapped.page_ro, page_size);
 (void)munmap((void *)g_shared->mapped.page_none, page_size);
 (void)munmap((void *)g_shared->checksums, g_shared->checksums_length);
 (void)munmap((void *)g_shared, g_shared->length);
}





static inline void stress_exclude_unsupported(void)
{
 size_t i;

 for (i = 0; i < (sizeof(stressors) / sizeof(stressors[0])); i++) {
  if (stressors[i].info && stressors[i].info->supported) {
   stress_stressor_t *ss = stressors_head;
   stress_id_t id = stressors[i].id;

   while (ss) {
    stress_stressor_t *next = ss->next;

    if ((ss->stressor->id == id) &&
        ss->num_instances &&
        (stressors[i].info->supported(stressors[i].name) < 0)) {
     stress_remove_stressor(ss);
     g_unsupported = 
# 2546 "stress-ng.c" 3 4
                    1
# 2546 "stress-ng.c"
                        ;
    }
    ss = next;
   }
  }
 }
}





static void stress_set_proc_limits(void)
{

 stress_stressor_t *ss;
 struct rlimit limit;

 if (getrlimit(
# 2564 "stress-ng.c" 3 4
              __RLIMIT_NPROC
# 2564 "stress-ng.c"
                          , &limit) < 0)
  return;

 for (ss = stressors_head; ss; ss = ss->next) {
  size_t i;

  for (i = 0; i < (sizeof(stressors) / sizeof(stressors[0])); i++) {
   if (stressors[i].info &&
       stressors[i].info->set_limit &&
       (stressors[i].id == ss->stressor->id) &&
       ss->num_instances) {
    const uint64_t max = (uint64_t)limit.rlim_cur / ss->num_instances;

    stressors[i].info->set_limit(max);
   }
  }
 }

}







static stress_stressor_t *stress_find_proc_info(const stress_t *stressor)
{
 stress_stressor_t *ss;
# 2602 "stress-ng.c"
 ss = calloc(1, sizeof(*ss));
 if (!ss) {
  (void)fprintf(
# 2604 "stress-ng.c" 3 4
               stderr
# 2604 "stress-ng.c"
                     , "Cannot allocate stressor state info\n");
  exit(
# 2605 "stress-ng.c" 3 4
      1
# 2605 "stress-ng.c"
                  );
 }

 ss->stressor = stressor;


 if (stressors_tail)
  stressors_tail->next = ss;
 else
  stressors_head = ss;
 ss->prev = stressors_tail;
 stressors_tail = ss;

 return ss;
}





static void stress_stressors_init(void)
{
 stress_stressor_t *ss;

 for (ss = stressors_head; ss; ss = ss->next) {
  size_t i;

  for (i = 0; i < (sizeof(stressors) / sizeof(stressors[0])); i++) {
   if (stressors[i].info &&
       stressors[i].info->init &&
       stressors[i].id == ss->stressor->id)
    stressors[i].info->init();
  }
 }
}





static void stress_stressors_deinit(void)
{
 stress_stressor_t *ss;

 for (ss = stressors_head; ss; ss = ss->next) {
  size_t i;

  for (i = 0; i < (sizeof(stressors) / sizeof(stressors[0])); i++) {
   if (stressors[i].info &&
       stressors[i].info->deinit &&
       stressors[i].id == ss->stressor->id)
    stressors[i].info->deinit();
  }
 }
}







static inline void stressor_set_defaults(void)
{
 size_t i;

 for (i = 0; i < (sizeof(stressors) / sizeof(stressors[0])); i++) {
  if (stressors[i].info && stressors[i].info->set_default) {
   stressors[i].info->set_default();
  }
 }
}






static inline void stress_exclude_pathological(void)
{
 if (!(g_opt_flags & (0x00000020000000ULL))) {
  stress_stressor_t *ss = stressors_head;

  while (ss) {
   stress_stressor_t *next = ss->next;

   if (ss->stressor->info->class & (0x00002000)) {
    if (ss->num_instances > 0) {
     pr_inf("disabled '%s' as it "
      "may hang or reboot the machine "
      "(enable it with the "
      "--pathological option)\n",
      stress_munge_underscore(ss->stressor->name));
    }
    stress_remove_stressor(ss);
   }
   ss = next;
  }
 }
}





static inline void stress_setup_stats_buffers(void)
{
 stress_stressor_t *ss;
 stress_stats_t *stats = g_shared->stats;

 for (ss = stressors_head; ss; ss = ss->next) {
  int32_t j;

  for (j = 0; j < ss->num_instances; j++, stats++)
   ss->stats[j] = stats;
 }
}





static inline void stress_set_random_stressors(void)
{
 int32_t opt_random = 0;

 (void)stress_get_setting("random", &opt_random);

 if (g_opt_flags & (0x00000000000040ULL)) {
  int32_t n = opt_random;
  const int32_t n_procs = stress_get_num_stressors();

  if (g_opt_flags & (0x00000000000080ULL)) {
   (void)fprintf(
# 2738 "stress-ng.c" 3 4
                stderr
# 2738 "stress-ng.c"
                      , "Cannot specify random "
    "option with other stress processes "
    "selected\n");
   exit(
# 2741 "stress-ng.c" 3 4
       1
# 2741 "stress-ng.c"
                   );
  }

  if (!n_procs) {
   (void)fprintf(
# 2745 "stress-ng.c" 3 4
                stderr
# 2745 "stress-ng.c"
                      ,
    "No stressors are available, unable to continue\n");
   exit(
# 2747 "stress-ng.c" 3 4
       1
# 2747 "stress-ng.c"
                   );
  }


  while (n > 0) {
   int32_t rnd = stress_mwc32() % ((opt_random >> 5) + 2);
   const int32_t i = stress_mwc32() % n_procs;
   stress_stressor_t *ss = stress_get_nth_stressor(i);

   if (!ss)
    continue;

   if (rnd > n)
    rnd = n;
   ss->num_instances += rnd;
   n -= rnd;
  }
 }
}





static void stress_enable_all_stressors(const uint32_t instances)
{
 size_t i;


 if (g_opt_flags & (0x00000000000080ULL))
  return;

 for (i = 0; i < STRESS_MAX; i++) {
  stress_stressor_t *ss = stress_find_proc_info(&stressors[i]);

  if (!ss) {
   (void)fprintf(
# 2783 "stress-ng.c" 3 4
                stderr
# 2783 "stress-ng.c"
                      , "Cannot allocate stressor state info\n");
   exit(
# 2784 "stress-ng.c" 3 4
       1
# 2784 "stress-ng.c"
                   );
  }
  ss->num_instances = instances;
 }
}





static void stress_enable_classes(const uint32_t class)
{
 size_t i;

 if (!class)
  return;


 g_opt_flags |= (0x00000000000080ULL);

 for (i = 0; stressors[i].id != STRESS_MAX; i++) {
  if (stressors[i].info->class & class) {
   stress_stressor_t *ss = stress_find_proc_info(&stressors[i]);

   if (g_opt_flags & (0x00000000800000ULL))
    ss->num_instances = g_opt_sequential;
   if (g_opt_flags & (0x00000000400000ULL))
    ss->num_instances = g_opt_parallel;
  }
 }
}






int stress_parse_opts(int argc, char **argv, const 
# 2821 "stress-ng.c" 3 4
                                                  _Bool 
# 2821 "stress-ng.c"
                                                       jobmode)
{
 optind = 0;

 for (;;) {
  int64_t i64;
  int32_t i32;
  uint32_t u32;
  uint64_t u64, max_fds;
  int16_t i16;
  int c, option_index, ret;
  size_t i;

  opterr = (!jobmode)? opterr: 0;

next_opt:
  if ((c = getopt_long(argc, argv, "?khMVvqnt:b:c:i:j:m:d:f:s:l:p:P:C:S:a:y:F:D:T:u:o:r:B:R:Y:x:",
   long_options, &option_index)) == -1) {
   break;
  }

  for (i = 0; stressors[i].id != STRESS_MAX; i++) {
   if (stressors[i].short_getopt == c) {
    const char *name = stress_opt_name(c);
    stress_stressor_t *ss = stress_find_proc_info(&stressors[i]);
    g_stressor_current = ss;

    g_opt_flags |= (0x00000000000080ULL);
    ss->num_instances = stress_get_int32(optarg);
    stress_get_processors(&ss->num_instances);
    stress_check_value(name, ss->num_instances);

    goto next_opt;
   }
   if (stressors[i].op == (stress_op_t)c) {
    uint64_t bogo_ops;

    bogo_ops = stress_get_uint64(optarg);
    stress_check_range(stress_opt_name(c), bogo_ops,
     (1ULL), (100000000ULL));

    stress_set_setting(stress_opt_name(c), TYPE_ID_UINT64, &bogo_ops);
    if (g_stressor_current)
     g_stressor_current->bogo_ops = bogo_ops;
    goto next_opt;
   }
   if (stressors[i].info->opt_set_funcs) {
    size_t j;
    const stressor_info_t *info = stressors[i].info;

    for (j = 0; info->opt_set_funcs[j].opt_set_func; j++) {
     if (info->opt_set_funcs[j].opt == c) {
      ret = info->opt_set_funcs[j].opt_set_func(optarg);
      if (ret < 0)
       return 
# 2875 "stress-ng.c" 3 4
             1
# 2875 "stress-ng.c"
                         ;
      goto next_opt;
     }
    }
   }
  }

  for (i = 0; i < (sizeof(opt_flags) / sizeof(opt_flags[0])); i++) {
   if (c == opt_flags[i].opt) {
    g_opt_flags |= opt_flags[i].opt_flag;
    goto next_opt;
   }
  }

  switch (c) {
  case OPT_all:
   g_opt_flags |= (0x00000000400000ULL);
   g_opt_parallel = stress_get_int32(optarg);
   stress_get_processors(&g_opt_parallel);
   stress_check_value("all", g_opt_parallel);
   break;
  case OPT_backoff:
   i64 = (int64_t)stress_get_uint64(optarg);
   stress_set_setting_global("backoff", TYPE_ID_INT64, &i64);
   break;
  case OPT_cache_level:




   i16 = atoi(optarg);
   if ((i16 <= 0) || (i16 > 3))
    i16 = 3;
   stress_set_setting("cache-level", TYPE_ID_INT16, &i16);
   break;
  case OPT_cache_ways:
   u32 = stress_get_uint32(optarg);
   stress_set_setting("cache-ways", TYPE_ID_UINT32, &u32);
   break;
  case OPT_class:
   ret = stress_get_class(optarg, &u32);
   if (ret < 0)
    return 
# 2917 "stress-ng.c" 3 4
          1
# 2917 "stress-ng.c"
                      ;
   else if (ret > 0)
    exit(
# 2919 "stress-ng.c" 3 4
        0
# 2919 "stress-ng.c"
                    );
   else {
    stress_set_setting("class", TYPE_ID_UINT32, &u32);
    stress_enable_classes(u32);
   }
   break;
  case OPT_exclude:
   stress_set_setting_global("exclude", TYPE_ID_STR, (void *)optarg);
   break;
  case OPT_help:
   stress_usage();
   break;
  case OPT_ionice_class:
   i32 = stress_get_opt_ionice_class(optarg);
   stress_set_setting("ionice-class", TYPE_ID_INT32, &i32);
   break;
  case OPT_ionice_level:
   i32 = stress_get_int32(optarg);
   stress_set_setting("ionice-level", TYPE_ID_INT32, &i32);
   break;
  case OPT_job:
   stress_set_setting_global("job", TYPE_ID_STR, (void *)optarg);
   break;
  case OPT_log_file:
   stress_set_setting_global("log-file", TYPE_ID_STR, (void *)optarg);
   break;
  case OPT_max_fd:
   max_fds = (uint64_t)stress_get_file_limit();
   u64 = stress_get_uint64_percent(optarg, 1, max_fds,
    "Cannot determine maximum file descriptor limit");
   stress_check_range(optarg, u64, 8, max_fds);
   stress_set_setting_global("max-fd", TYPE_ID_UINT64, &u64);
   break;
  case OPT_no_madvise:
   g_opt_flags &= ~(0x00000000000800ULL);
   break;
  case OPT_query:
   if (!jobmode) {
    (void)printf("Try '%s --help' for more information.\n", g_app_name);
   }
   return 
# 2959 "stress-ng.c" 3 4
         1
# 2959 "stress-ng.c"
                     ;
   break;
  case OPT_quiet:
   g_opt_flags &= ~(((0x00000000000001ULL) | (0x00000000000002ULL) | (0x00000000000004ULL) | (0x00000000000008ULL)));
   break;
  case OPT_random:
   g_opt_flags |= (0x00000000000040ULL);
   i32 = stress_get_int32(optarg);
   stress_get_processors(&i32);
   stress_check_value("random", i32);
   stress_set_setting("random", TYPE_ID_INT32, &i32);
   break;
  case OPT_sched:
   i32 = stress_get_opt_sched(optarg);
   stress_set_setting_global("sched", TYPE_ID_INT32, &i32);
   break;
  case OPT_sched_prio:
   i32 = stress_get_int32(optarg);
   stress_set_setting_global("sched-prio", TYPE_ID_INT32, &i32);
   break;
  case OPT_sched_period:
   i64 = stress_get_uint64(optarg);
   stress_set_setting_global("sched-period", TYPE_ID_INT64, &i64);
   break;
  case OPT_sched_runtime:
   i64 = stress_get_uint64(optarg);
   stress_set_setting_global("sched-runtime", TYPE_ID_INT64, &i64);
   break;
  case OPT_sched_deadline:
   i64 = stress_get_uint64(optarg);
   stress_set_setting_global("sched-deadline", TYPE_ID_INT64, &i64);
   break;
  case OPT_sched_reclaim:
   g_opt_flags |= (0x00001000000000ULL);
   break;
  case OPT_sequential:
   g_opt_flags |= (0x00000000800000ULL);
   g_opt_sequential = stress_get_int32(optarg);
   stress_get_processors(&g_opt_sequential);
   stress_check_range("sequential", g_opt_sequential,
    (0), (1000000));
   break;
  case OPT_stressors:
   stress_show_stressor_names();
   exit(
# 3003 "stress-ng.c" 3 4
       0
# 3003 "stress-ng.c"
                   );
  case OPT_taskset:
   if (stress_set_cpu_affinity(optarg) < 0)
    exit(
# 3006 "stress-ng.c" 3 4
        1
# 3006 "stress-ng.c"
                    );
   break;
  case OPT_temp_path:
   if (stress_set_temp_path(optarg) < 0)
    exit(
# 3010 "stress-ng.c" 3 4
        1
# 3010 "stress-ng.c"
                    );
   break;
  case OPT_timeout:
   g_opt_timeout = stress_get_uint64_time(optarg);
   break;
  case OPT_timer_slack:
   (void)stress_set_timer_slack_ns(optarg);
   break;
  case OPT_version:
   stress_version();
   exit(
# 3020 "stress-ng.c" 3 4
       0
# 3020 "stress-ng.c"
                   );
  case OPT_vmstat:
   if (stress_set_vmstat(optarg) < 0)
    exit(
# 3023 "stress-ng.c" 3 4
        1
# 3023 "stress-ng.c"
                    );
   break;
  case OPT_thermalstat:
   if (stress_set_thermalstat(optarg) < 0)
    exit(
# 3027 "stress-ng.c" 3 4
        1
# 3027 "stress-ng.c"
                    );
   break;
  case OPT_yaml:
   stress_set_setting_global("yaml", TYPE_ID_STR, (void *)optarg);
   break;
  default:
   if (!jobmode)
    (void)printf("Unknown option (%d)\n",c);
   return 
# 3035 "stress-ng.c" 3 4
         1
# 3035 "stress-ng.c"
                     ;
  }
 }
 return 
# 3038 "stress-ng.c" 3 4
       0
# 3038 "stress-ng.c"
                   ;
}





static void stress_alloc_proc_resources(pid_t **pids, stress_stats_t ***stats, size_t n)
{
 *pids = calloc(n, sizeof(pid_t));
 if (!*pids) {
  pr_err("cannot allocate pid list\n");
  stress_stressors_free();
  exit(
# 3051 "stress-ng.c" 3 4
      1
# 3051 "stress-ng.c"
                  );
 }

 *stats = calloc(n, sizeof(stress_stats_t *));
 if (!*stats) {
  pr_err("cannot allocate stats list\n");
  free(*pids);
  *pids = 
# 3058 "stress-ng.c" 3 4
         ((void *)0)
# 3058 "stress-ng.c"
             ;
  stress_stressors_free();
  exit(
# 3060 "stress-ng.c" 3 4
      1
# 3060 "stress-ng.c"
                  );
 }
}





static void stress_set_default_timeout(const uint64_t timeout)
{
 if (g_opt_timeout == (~0ULL)) {
  g_opt_timeout = timeout;
  pr_inf("defaulting to a %" 
# 3072 "stress-ng.c" 3 4
                            "l" "u" 
# 3072 "stress-ng.c"
                                   " second%s run per stressor\n",
   g_opt_timeout,
   stress_duration_to_str((double)g_opt_timeout));
 }
}





static void stress_setup_sequential(const uint32_t class)
{
 stress_stressor_t *ss;

 stress_set_default_timeout(60);

 for (ss = stressors_head; ss; ss = ss->next) {
  if (ss->stressor->info->class & class)
   ss->num_instances = g_opt_sequential;
  stress_alloc_proc_resources(&ss->pids, &ss->stats, ss->num_instances);
 }
}





static void stress_setup_parallel(const uint32_t class)
{
 stress_stressor_t *ss;

 stress_set_default_timeout((60 * 60 * 24));

 for (ss = stressors_head; ss; ss = ss->next) {
  if (ss->stressor->info->class & class)
   ss->num_instances = g_opt_parallel;




  ss->bogo_ops = ss->num_instances ?
   (ss->bogo_ops + (ss->num_instances - 1)) / ss->num_instances : 0;
  if (ss->num_instances)
   stress_alloc_proc_resources(&ss->pids, &ss->stats, ss->num_instances);
 }
}





static inline void stress_run_sequential(
 double *duration,
 
# 3125 "stress-ng.c" 3 4
_Bool 
# 3125 "stress-ng.c"
     *success,
 
# 3126 "stress-ng.c" 3 4
_Bool 
# 3126 "stress-ng.c"
     *resource_success,
 
# 3127 "stress-ng.c" 3 4
_Bool 
# 3127 "stress-ng.c"
     *metrics_success)
{
 stress_stressor_t *ss;
 stress_checksum_t *checksum = g_shared->checksums;




 for (ss = stressors_head; ss && keep_stressing_flag(); ss = ss->next) {
  stress_stressor_t *next = ss->next;

  ss->next = 
# 3138 "stress-ng.c" 3 4
            ((void *)0)
# 3138 "stress-ng.c"
                ;
  stress_run(ss, duration, success, resource_success,
   metrics_success, &checksum);
  ss->next = next;

 }
}





static inline void stress_run_parallel(
 double *duration,
 
# 3152 "stress-ng.c" 3 4
_Bool 
# 3152 "stress-ng.c"
     *success,
 
# 3153 "stress-ng.c" 3 4
_Bool 
# 3153 "stress-ng.c"
     *resource_success,
 
# 3154 "stress-ng.c" 3 4
_Bool 
# 3154 "stress-ng.c"
     *metrics_success)
{
 stress_checksum_t *checksum = g_shared->checksums;




 stress_run(stressors_head, duration, success, resource_success,
   metrics_success, &checksum);
}






static inline void stress_mlock_executable(void)
{

 extern void *__start_mlocked_text;
 extern void *__stop_mlocked_text;

 stress_mlock_region(&__start_mlocked_text, &__stop_mlocked_text);

}

int main(int argc, char **argv, char **envp)
{
 double duration = 0.0;
 
# 3183 "stress-ng.c" 3 4
_Bool 
# 3183 "stress-ng.c"
     success = 
# 3183 "stress-ng.c" 3 4
               1
# 3183 "stress-ng.c"
                   ;
 
# 3184 "stress-ng.c" 3 4
_Bool 
# 3184 "stress-ng.c"
     resource_success = 
# 3184 "stress-ng.c" 3 4
                        1
# 3184 "stress-ng.c"
                            ;
 
# 3185 "stress-ng.c" 3 4
_Bool 
# 3185 "stress-ng.c"
     metrics_success = 
# 3185 "stress-ng.c" 3 4
                       1
# 3185 "stress-ng.c"
                           ;
 FILE *yaml;
 char *yaml_filename = 
# 3187 "stress-ng.c" 3 4
                      ((void *)0)
# 3187 "stress-ng.c"
                          ;
 char *log_filename;
 char *job_filename = 
# 3189 "stress-ng.c" 3 4
                     ((void *)0)
# 3189 "stress-ng.c"
                         ;
 int32_t ticks_per_sec;
 int32_t ionice_class = (-1);
 int32_t ionice_level = (-1);
 size_t i;
 uint32_t class = 0;
 const uint32_t cpus_online = stress_get_processors_online();
 const uint32_t cpus_configured = stress_get_processors_configured();
 int ret;

 if (stress_set_temp_path(".") < 0)
  exit(
# 3200 "stress-ng.c" 3 4
      1
# 3200 "stress-ng.c"
                  );
 stress_set_proc_name_init(argc, argv, envp);

 if (
# 3203 "stress-ng.c" 3 4
    _setjmp (
# 3203 "stress-ng.c"
    g_error_env
# 3203 "stress-ng.c" 3 4
    ) 
# 3203 "stress-ng.c"
                        == 1)
  exit(
# 3204 "stress-ng.c" 3 4
      1
# 3204 "stress-ng.c"
                  );

 yaml = 
# 3206 "stress-ng.c" 3 4
       ((void *)0)
# 3206 "stress-ng.c"
           ;


 if ((argc == 2) && !strcmp(argv[1], "--exec-exit"))
  exit(
# 3210 "stress-ng.c" 3 4
      0
# 3210 "stress-ng.c"
                  );

 stressors_head = 
# 3212 "stress-ng.c" 3 4
                 ((void *)0)
# 3212 "stress-ng.c"
                     ;
 stressors_tail = 
# 3213 "stress-ng.c" 3 4
                 ((void *)0)
# 3213 "stress-ng.c"
                     ;
 stress_mwc_reseed();

 (void)stress_get_pagesize();
 stressor_set_defaults();
 g_pgrp = getpid();

 if (stress_get_processors_configured() < 0) {
  pr_err("sysconf failed, number of cpus configured "
   "unknown: errno=%d: (%s)\n",
   
# 3223 "stress-ng.c" 3 4
  (*__errno_location ())
# 3223 "stress-ng.c"
       , strerror(
# 3223 "stress-ng.c" 3 4
                  (*__errno_location ())
# 3223 "stress-ng.c"
                       ));
  exit(
# 3224 "stress-ng.c" 3 4
      1
# 3224 "stress-ng.c"
                  );
 }
 ticks_per_sec = stress_get_ticks_per_second();
 if (ticks_per_sec < 0) {
  pr_err("sysconf failed, clock ticks per second "
   "unknown: errno=%d (%s)\n",
   
# 3230 "stress-ng.c" 3 4
  (*__errno_location ())
# 3230 "stress-ng.c"
       , strerror(
# 3230 "stress-ng.c" 3 4
                  (*__errno_location ())
# 3230 "stress-ng.c"
                       ));
  exit(
# 3231 "stress-ng.c" 3 4
      1
# 3231 "stress-ng.c"
                  );
 }

 ret = stress_parse_opts(argc, argv, 
# 3234 "stress-ng.c" 3 4
                                    0
# 3234 "stress-ng.c"
                                         );
 if (ret != 
# 3235 "stress-ng.c" 3 4
           0
# 3235 "stress-ng.c"
                       )
  exit(ret);



 (void)stress_get_setting("job", &job_filename);
 if (stress_parse_jobfile(argc, argv, job_filename) < 0)
  exit(
# 3242 "stress-ng.c" 3 4
      1
# 3242 "stress-ng.c"
                  );




 if ((g_opt_flags & ((0x00000000040000ULL) | (0x00000000080000ULL))) == ((0x00000000040000ULL) | (0x00000000080000ULL))) {
  (void)fprintf(
# 3248 "stress-ng.c" 3 4
               stderr
# 3248 "stress-ng.c"
                     , "maximize and minimize cannot "
   "be used together\n");
  exit(
# 3250 "stress-ng.c" 3 4
      1
# 3250 "stress-ng.c"
                  );
 }




 if ((g_opt_flags & ((0x00000000800000ULL) | (0x00000000400000ULL))) ==
     ((0x00000000800000ULL) | (0x00000000400000ULL))) {
  (void)fprintf(
# 3258 "stress-ng.c" 3 4
               stderr
# 3258 "stress-ng.c"
                     , "cannot invoke --sequential and --all "
   "options together\n");
  exit(
# 3260 "stress-ng.c" 3 4
      1
# 3260 "stress-ng.c"
                  );
 }
 (void)stress_get_setting("class", &class);

 if (class &&
     !(g_opt_flags & ((0x00000000800000ULL) | (0x00000000400000ULL)))) {
  (void)fprintf(
# 3266 "stress-ng.c" 3 4
               stderr
# 3266 "stress-ng.c"
                     , "class option is only used with "
   "--sequential or --all options\n");
  exit(
# 3268 "stress-ng.c" 3 4
      1
# 3268 "stress-ng.c"
                  );
 }




 if (stress_get_setting("log-file", &log_filename))
  pr_openlog(log_filename);
 openlog("stress-ng", 0, 
# 3276 "stress-ng.c" 3 4
(1<<3)
# 3276 "stress-ng.c"
);
 stress_log_args(argc, argv);
 stress_log_system_info();
 stress_log_system_mem_info();

 pr_runinfo();
 pr_dbg("%" 
# 3282 "stress-ng.c" 3 4
           "d" 
# 3282 "stress-ng.c"
                  " processor%s online, %" 
# 3282 "stress-ng.c" 3 4
                                           "d"
  
# 3283 "stress-ng.c"
 " processor%s configured\n",
  cpus_online, cpus_online == 1 ? "" : "s",
  cpus_configured, cpus_configured == 1 ? "" : "s");




 if (g_opt_flags & (0x00000000000040ULL))
  stress_enable_all_stressors(0);



 if (g_opt_flags & (0x00000000800000ULL))
  stress_enable_all_stressors(g_opt_sequential);
 if (g_opt_flags & (0x00000000400000ULL))
  stress_enable_all_stressors(g_opt_parallel);




 stress_exclude_unsupported();
 stress_exclude_pathological();



 if (stress_exclude() < 0)
  exit(
# 3309 "stress-ng.c" 3 4
      1
# 3309 "stress-ng.c"
                  );




 stress_set_random_stressors();

 (void)stress_ftrace_start();


 if (g_opt_flags & (0x00000001000000ULL))
  stress_perf_init();





 stress_process_dumpable(
# 3326 "stress-ng.c" 3 4
                        0
# 3326 "stress-ng.c"
                             );
 stress_cwd_readwriteable();
 stress_set_oom_adjustment("main", 
# 3328 "stress-ng.c" 3 4
                                  0
# 3328 "stress-ng.c"
                                       );




 if (sched_settings_apply(
# 3333 "stress-ng.c" 3 4
                         0
# 3333 "stress-ng.c"
                              ) < 0)
  exit(
# 3334 "stress-ng.c" 3 4
      1
# 3334 "stress-ng.c"
                  );
 (void)stress_get_setting("ionice-class", &ionice_class);
 (void)stress_get_setting("ionice-level", &ionice_level);
 stress_set_iopriority(ionice_class, ionice_level);
 (void)stress_get_setting("yaml", &yaml_filename);

 stress_mlock_executable();




 for (i = 0; i < (sizeof(terminate_signals) / sizeof(terminate_signals[0])); i++) {
  if (stress_sighandler("stress-ng", terminate_signals[i], stress_handle_terminate, 
# 3346 "stress-ng.c" 3 4
                                                                                   ((void *)0)
# 3346 "stress-ng.c"
                                                                                       ) < 0)
   exit(
# 3347 "stress-ng.c" 3 4
       1
# 3347 "stress-ng.c"
                   );
 }



 for (i = 0; i < (sizeof(ignore_signals) / sizeof(ignore_signals[0])); i++) {
  ret = stress_sighandler("stress-ng", ignore_signals[i], 
# 3353 "stress-ng.c" 3 4
                                                         ((__sighandler_t) 1)
# 3353 "stress-ng.c"
                                                                , 
# 3353 "stress-ng.c" 3 4
                                                                  ((void *)0)
# 3353 "stress-ng.c"
                                                                      );
  (void)ret;
 }




 if (g_opt_flags & (0x00000000800000ULL)) {
  stress_setup_sequential(class);
 } else {
  stress_setup_parallel(class);
 }




 stress_exclude_unsupported();
 stress_exclude_pathological();

 stress_set_proc_limits();

 if (!stressors_head) {
  pr_err("No stress workers invoked%s\n",
   g_unsupported ? " (one or more were unsupported)" : "");
  stress_stressors_free();




  exit(g_unsupported ? 
# 3382 "stress-ng.c" 3 4
                      0 
# 3382 "stress-ng.c"
                                   : 
# 3382 "stress-ng.c" 3 4
                                     1
# 3382 "stress-ng.c"
                                                 );
 }




 if (stress_show_stressors() < 0) {
  stress_stressors_free();
  exit(
# 3390 "stress-ng.c" 3 4
      1
# 3390 "stress-ng.c"
                  );
 }





 stress_shared_map(stress_get_total_num_instances(stressors_head));






 pthread_spin_init(&g_shared->perf.lock, 0);


 pthread_spin_init(&g_shared->warn_once.lock, 0);





 stress_setup_stats_buffers();




 g_shared->mem_cache_level = 3;
 (void)stress_get_setting("cache-level", &g_shared->mem_cache_level);
 g_shared->mem_cache_ways = 0;
 (void)stress_get_setting("cache-ways", &g_shared->mem_cache_ways);
 if (stress_cache_alloc("cache allocate") < 0) {
  stress_shared_unmap();
  stress_stressors_free();
  exit(
# 3425 "stress-ng.c" 3 4
      1
# 3425 "stress-ng.c"
                  );
 }





 if (g_opt_flags & (0x00000004000000ULL))
  stress_tz_init(&g_shared->tz_info);


 stress_stressors_init();


 if (g_opt_flags & (0x00000080000000ULL))
  stress_thrash_start();

 stress_vmstat_start();

 if (g_opt_flags & (0x00000000800000ULL)) {
  stress_run_sequential(&duration,
   &success, &resource_success, &metrics_success);
 } else {
  stress_run_parallel(&duration,
   &success, &resource_success, &metrics_success);
 }


 if (g_opt_flags & (0x00000080000000ULL))
  stress_thrash_stop();

 pr_inf("%s run completed in %.2fs%s\n",
  success ? "successful" : "unsuccessful",
  duration, stress_duration_to_str(duration));




 if (yaml_filename) {
  yaml = fopen(yaml_filename, "w");
  if (!yaml)
   pr_err("Cannot output YAML data to %s\n", yaml_filename);

  pr_yaml(yaml, "---\n");
  pr_yaml_runinfo(yaml);
 }




 if (g_opt_flags & (0x00000000000020ULL))
  stress_metrics_dump(yaml, ticks_per_sec);

 stress_metrics_check(&success);






 if (g_opt_flags & (0x00000001000000ULL))
  stress_perf_stat_dump(yaml, stressors_head, duration);






 if (g_opt_flags & (0x00000004000000ULL)) {
  stress_tz_dump(yaml, stressors_head);
  stress_tz_free(&g_shared->tz_info);
 }




 if (g_opt_flags & (0x00000000002000ULL))
  stress_times_dump(yaml, ticks_per_sec, duration);

 (void)stress_vmstat_stop();
 (void)stress_ftrace_stop();
 (void)stress_ftrace_free();




 stress_stressors_deinit();
 stress_stressors_free();
 stress_cache_free();
 stress_shared_unmap();
 stress_settings_free();
 stress_temp_path_free();




 closelog();
 pr_closelog();
 if (yaml) {
  pr_yaml(yaml, "...\n");
  (void)fclose(yaml);
 }




 if (!success)
  exit((2));
 if (!resource_success)
  exit((3));
 if (!metrics_success)
  exit((7));
 exit(
# 3537 "stress-ng.c" 3 4
     0
# 3537 "stress-ng.c"
                 );
}
